[{"categories":[""],"content":"开启 WebDAV 可以让你的 windows 设备变成家庭媒体服务器。\n这是一个替代选项，毕竟ftp已经过时（无安全性）、文件夹共享简直是太烂了\n开启系统功能 搜索：启用或关闭 Windows 功能 勾选并开启下列功能 1- Internet Information Services 功能（全选） 2 3 （Internet Information Services 中下列功能需要手动打勾，默认不选） 4 - 万维网服务功能 5 - 安全性 6 - 基本身份验证 7 - 常见HTTP功能 8 - Webdav发布 创建 webDAV 站点 添加网站\n开启下列功能\nwebdav - 右侧 - 启用webdav\nwebdav - 添加创作功能 - 允许所有用户，分配读写权限\n目录浏览 - 打开功能\n身份验证 - 基本身份验证 - 启用（其他选项禁用）\n✨右键重启网站 准备要分享的文件夹 针对错误：无权访问web.config\n在任何目录下新建一个文件夹，比如：e:本地影视 确保添加everyone用户组的完全控制权限 打通网络 针对问题：在其他电脑上无法连接到 8090 端口\n搜索并打开：防火墙\n新增一条入站规则、一条出站规则，允许端口8090的所有通信。\n设置mime类型 解决特殊格式视频403错误\n可以手动添加一条mime类型\n或者可以在 web.config （会自动的在根文件夹生成）添加如下配置\n1\u0026lt;configuration\u0026gt; 2 \u0026lt;system.webServer\u0026gt; 3 \u0026lt;!-- 添加了支持浏览器查看目录的功能 --\u0026gt; 4 \u0026lt;directoryBrowse enabled=\u0026#34;true\u0026#34; /\u0026gt; 5 \u0026lt;staticContent\u0026gt; 6 \u0026lt;!-- 解决 rmvb格式 404.3 mime格式不支持的问题 --\u0026gt; 7 \u0026lt;mimeMap fileExtension=\u0026#34;.*\u0026#34; mimeType=\u0026#34;video/mpeg\u0026#34; /\u0026gt; 8 \u0026lt;/staticContent\u0026gt; 9 \u0026lt;/system.webServer\u0026gt; 10\u0026lt;/configuration\u0026gt; 登录用的账号 微软账号：邮箱 + 密码\n","date":"2023-02-24","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-24windows%E5%BC%80%E5%90%AFwebdav/","series":[],"tags":["windows"],"title":"Windows开启WebDAV"},{"categories":[""],"content":"经过了半年的使用，这是最新的软件推荐列表！\nPS：最近在装机（mac mini），正好整理一下。\nmac必装软件 解压软件 fastzip 滚轮和鼠标优化软件 Mos 视频软件 iina 截图软件 Snipaste 显示器亮度调节 Monitor Control 粘贴版历史记录软件 Paste Now 稍微个性化一点 微软远程桌面（RDP） microsoft-remote-desktop 看书软件 calibre 密码管理软件 keepassxc 触控板 swish 触控板 BetterTouchTool 动手动脑 快捷键启动 + 窗口 snapping：Raycast AHK代替品: hammerspoon // 我的例子 clashX or ShadowRocket 2k显示器开Hidpi：one-key-hidpi 包管理器：homebrew 新一代命令行：warp 开发人员专属 vscode ｜ jetbrains-toolbox ｜ python ｜ ohmyzsh ｜ docker mac常备脚本 github 私人库 手工配置 code 命令加入命令行：vscode 中按下 cmd+shift+p，选择 Shell Command: Install 'code' command in PATH\ngit 配置 目前命令行的 git 不能通过密码登陆了，需要 token ","date":"2023-02-23","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-23macos_essencials2/","series":[],"tags":["mac"],"title":"Mac Essencials 2"},{"categories":[""],"content":"我需要把我写的程序分给很多没有装 python 环境的人用（即使撞上了 python 环境，也会因为网络原因无法 pip 下载依赖），所以我需要把它打包成 exe ，这样使用门槛就可以很低了。\n我主要参考了这篇文章 。\n我的场景 我的程序比较复杂，虽然是命令行程序，但是有很多依赖，并且程序文件分散在几个文件夹里。\n如何打包 1. 安装 pyinstaller 1pip install pyinstaller 2. 在命令行打包 我的主程序从main2.py开始，并且使用了三个库，采用自动覆盖不提示模式打包，命令如下：\n我没有采用打包成单个exe的方式，听说打包成 单个exe 影响性能，本来程序性能就不太好……\n1pyinstaller -c main2.py --noconfirm --hidden-import pandas，bs4，json5 pyinstaller:\n-c 命令行模式 \u0026ndash;noconfirm 不需要确认，直接覆盖文件 \u0026ndash;hidden-import 导入库 3. 复制配置文件 workdir下有一个config文件夹，里面有一些配置文件会在程序运行时动态加载，需要复制到打包后的文件夹里，这里我用了 xcopy 命令，如果你用的是 linux ，可以用 cp 命令。\n这里其实完全可以手动复制，但是如果从 Devops 的角度来看，这个过程应该是自动化的。\n1xcopy config dist\\main2\\config\\ /S /c /y 2xcopy config\\xml转换工具.bat dist\\ /S /c /y 4. 检查打包结果 默认打包后的位置是 dist\\main2\\main2.exe\n推荐使用windows沙盒 测试，如果测试使用没有问题，就可以把整个目录打包给别人用了。\n","date":"2023-02-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-18-python%E6%89%93%E5%8C%85%E6%88%90exe/","series":[],"tags":["python"],"title":"如何把 Python 程序打包成 Exe"},{"categories":[""],"content":"教程 用 python 的人都用 pip 安装过包。那么有着开源精神的你，是否也想把自己写的包上传到 pypi 呢？\n官方中文教程地址 一个视频教程 更新/发布步骤： 修改完善 setup.py 进行本地测试 python setup.py develop 编译 python3 setup.py sdist 上传到 pypi twine upload dist/* 新手注意事项 你需要先去 pypi 注册一个账号，给你的包起一个名字（搜一搜没有被占用就行），然后用 pip 在本地安装 twine，这个是用来上传到 pypi 的工具。\n目录结构需要注意，你的项目目录结构应该是这样的，要把 setup.py 放在外面：\nsetup.py 的内容大致如下；可以抄我的，改改名称、版本、描述就行，非常简单。\n1import codecs 2import os 3from setuptools import setup, find_packages 4 5# these things are needed for the README.md show on pypi (if you dont need delete it) 6here = os.path.abspath(os.path.dirname(__file__)) 7 8with codecs.open(os.path.join(here, \u0026#34;README.md\u0026#34;), encoding=\u0026#34;utf-8\u0026#34;) as fh: 9 long_description = \u0026#34;\\n\u0026#34; + fh.read() 10 11# you need to change all these 12VERSION = \u0026#39;1.0.2\u0026#39; 13DESCRIPTION = \u0026#39;a ligh weight menu , support both win and mac \u0026#39; 14LONG_DESCRIPTION = \u0026#39;dumb_menu is a ligh weight menu ,support hot key, support both win and mac\u0026#39; 15 16setup( 17 name=\u0026#34;dumb_menu\u0026#34;, 18 version=VERSION, 19 author=\u0026#34;clever chen\u0026#34;, 20 author_email=\u0026#34;\u0026#34;, 21 description=DESCRIPTION, 22 long_description_content_type=\u0026#34;text/markdown\u0026#34;, 23 long_description=long_description, 24 packages=find_packages(), 25 install_requires=[], 26 keywords=[\u0026#39;python\u0026#39;, \u0026#39;menu\u0026#39;, \u0026#39;dumb_menu\u0026#39;,\u0026#39;windows\u0026#39;,\u0026#39;mac\u0026#39;,\u0026#39;linux\u0026#39;], 27 classifiers=[ 28 \u0026#34;Development Status :: 1 - Planning\u0026#34;, 29 \u0026#34;Intended Audience :: Developers\u0026#34;, 30 \u0026#34;Programming Language :: Python :: 3\u0026#34;, 31 \u0026#34;Operating System :: Unix\u0026#34;, 32 \u0026#34;Operating System :: MacOS :: MacOS X\u0026#34;, 33 \u0026#34;Operating System :: Microsoft :: Windows\u0026#34;, 34 ] 35) 编译成功的话会生成 dist 和 egg-info 两个文件夹，egg-info 是用来记录包的信息的，dist 是用来存放打包好的包的。\n然后就可以上传到 pypi 了，最好测试好了再发，因为你不能发重复的版本号。\n1twine upload dist/* 然后后面再修改和更新的话，参考 更新/发布步骤 即可。\n","date":"2023-02-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-18-python%E6%89%93%E5%8C%85/","series":[],"tags":["python"],"title":"Python打包和上传到pypi"},{"categories":[""],"content":" 我之前再我的程序里面 用了一个第三方库：simple_term_menu，提供菜单功能。但是当我再windows上尝试跑一下终于写好的程序时，竟然不能用。原因是它依赖于 termios 库， 不支持 win 。 因为我的功能需求比较简单，我决定自己下一个代替品，就是这个 dumb_meun 了。\n主要要实现的功能：\n传入一个 list ，显示菜单， 返回选中的 index 上下键选择 enter建确认 *支持快捷键 因为python没有提供类似于c语言中的getchar函数，再 linux 上用 termios 库可以实现，但是在windows上使用的是 msvcrt 库。所以实际上在 python 中实现起来不是很容易。\n1def get_key(): #get keypress using getch , msvcrt = windows or termios = linux 2 try : 3 import getch 4 first_char = getch.getch() 5 if first_char == \u0026#39;\\x1b\u0026#39;: #arrow keys 6 a=getch.getch() 7 b=getch.getch() 8 return {\u0026#39;[A\u0026#39;: \u0026#39;up\u0026#39;, \u0026#39;[B\u0026#39;: \u0026#39;down\u0026#39;, \u0026#39;[C\u0026#39;: \u0026#39;right\u0026#39;, \u0026#39;[D\u0026#39;: \u0026#39;left\u0026#39; }[a+b] 9 if ord(first_char) == 10: 10 return \u0026#39;enter\u0026#39; 11 if ord(first_char) == 32: 12 return \u0026#39;space\u0026#39; 13 else: 14 return first_char #normal keys like abcd 1234 15 except : 16 pass 17 try: 18 import msvcrt 19 key = msvcrt.getch() # get keypress 20 if key == b\u0026#39;\\x1b\u0026#39;: # Esc key to exit 21 return \u0026#39;esc\u0026#39; 22 elif key == b\u0026#39;\\r\u0026#39;: # Enter key to select 23 return \u0026#39;enter\u0026#39; 24 elif key == b\u0026#39;\\x48\u0026#39;: # Up or Down arrow 25 return \u0026#39;up\u0026#39; 26 elif key == b\u0026#39;\\x50\u0026#39;: # Up or Down arrow 27 return \u0026#39;down\u0026#39; 28 else: 29 return key.decode(\u0026#39;utf-8\u0026#39;) 30 except: 31 pass 32 33while True: 34 key = get_key() 35 print(\u0026#34;You pressed: \u0026#34;, key) 这个函数可以获取键盘输入，返回值是一个字符串，比如up down / enter / a b c / 1 2 3，这样统一一下，可以兼容linux 和 win。\n测试结果：\n1Press a key to test out! 2You pressed: down 3You pressed: up 4You pressed: a 5... menu代码 我拷问了chatgpt老半天，他才给我编好\n提取快捷键是用 re 库的正则表达式\n显示菜单通过 os.system(\u0026quot;cls\u0026quot; if os.name == \u0026quot;nt\u0026quot; else \u0026quot;clear\u0026quot;) 清屏，再打印出来，每次给菜单传入 list 和选中的 index ，这样用户可以看到自己正在选择哪个。\n1import os 2import re 3def get_menu_choice(options): 4 shortcuts = scan_short_cuts(options) # scan for shortcuts 5 selected_index = 0 6 print(shortcuts) 7 while True: 8 show_menu(options, selected_index) 9 key = get_key() 10 if key == \u0026#39;enter\u0026#39;: # Enter key to select 11 return selected_index 12 elif key in (\u0026#39;up\u0026#39;,\u0026#39;down\u0026#39;): # Up or Down arrow 13 selected_index = (selected_index + (1 if key == \u0026#39;down\u0026#39; else -1) + len(options)) % len(options) 14 elif key in shortcuts: # Shortcut key 15 show_menu(options, shortcuts[key]) #show selected option when using shortcut 16 return shortcuts[key] 17 18def scan_short_cuts(options): 19 shortcuts = {} 20 for i, option in enumerate(options): 21 match = re.match(r\u0026#34;\\[(.*)\\](.*)\u0026#34;, option) 22 if match: 23 shortcut, text = match.group(1, 2) 24 shortcuts[shortcut] = i 25 return shortcuts 26 27 28def show_menu(options, selected_index): 29 os.system(\u0026#34;cls\u0026#34; if os.name == \u0026#34;nt\u0026#34; else \u0026#34;clear\u0026#34;) 30 print(\u0026#34;Menu\u0026#34;,\u0026#34;current option:\u0026#34;,selected_index) 31 for i, option in enumerate(options): 32 if i == selected_index: 33 print(f\u0026#34;\u0026gt; {option}\u0026#34;) 34 else: 35 print(f\u0026#34; {option}\u0026#34;) 36 print(\u0026#34;\\nUse the arrow keys to move, Enter/Hotkey to select.\u0026#34;) 使用方法非常直白：\n1options = [\u0026#34;[1]Option 1\u0026#34;, \u0026#34;[2]Option 2\u0026#34;, \u0026#34;[3]Option 3\u0026#34;,\u0026#34;[q]quit\u0026#34;] 2index = get_menu_choice(options) 3print(f\u0026#34;You selected option {index + 1}: {options[index]}\u0026#34;) 看看效果：\n代码地址 其实我一开始想要参考一下 simple_term_menu 的源码，但是我发现我太菜了，根本看不懂他们的贼复杂的源代码（还用了信号啥的，我都不会），所以我就自己写了一个简单的。\n使用的话就：\n1pip install dumb-menu 可以看看我在 pypi 写的简明教程 ","date":"2023-02-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-18-%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AApython%E5%BA%93dumb_meun/","series":[],"tags":["python"],"title":"我写了一个python库：dumb_meun"},{"categories":[""],"content":"安装\n1pip install simple_term_menu ⚠️ 不支持windows 这个菜单库使用非常简单，只需要传入一个列表，就可以生成一个菜单，返回值就是选择的菜单项的索引。\n支持J K/⬆️ ⬇️ 键移动 支持/斜杠搜索 支持快捷键（传入的 string 如 [q] 退出 ,q 就变成快捷键了） 好看！ 还有更多功能，我没有仔细研究，参考\u0026gt;这里\u0026lt; 封装成函数，方便调用\n1from simple_term_menu import TerminalMenu 2def menu(choices:list): 3 terminal_menu = TerminalMenu(choices,title=\u0026#34;扫描结果转换XML工具 v1.0 (230208)\\n---\u0026#34;,show_search_hint=True) 4 index = terminal_menu.show() 5 6 print(\u0026#34;执行\u0026#34;, choices[index]) 7 if choices[index] == \u0026#34;[h] 文档\u0026#34;: 8 import webbrowser 9 webbrowser.open(\u0026#39;http://example.com\u0026#39;) 10 return 0 11 if choices[index] == \u0026#34;[q] 退出\u0026#34;: 12 exit() 13 return index + 1 # 返回结果，从1开始 main 函数调用\n1if __name__ == \u0026#39;__main__\u0026#39;: 2 while True: 3 # 获取功能列表，显示菜单 4 choices_str = open(\u0026#39;menu.md\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read() 5 choices =choices_str.splitlines() 6 choice_index = menu(choices) 其实一开始选择用md是因为写序号的话可以自动排序，但是加了序号和快捷键之后，就不美观了，所以把序号删除了。\n加载菜单 menu.md\n1长亭xray（主机+应用） html 1-\u0026gt;1 2长亭xray（主机+应用） html 多-\u0026gt;1 3绿盟（主机） \u0026lt;ip\u0026gt;.html 1-\u0026gt;1 4绿盟（主机） \u0026lt;ip\u0026gt;.html 多-\u0026gt;1 5安恒新版 (应用) html 1-\u0026gt;1 6Nessus csv(utf-8) 1-\u0026gt;1 7Nessus csv(gb18030) 1-\u0026gt;1 8[h] 文档 9[q] 退出 效果图： 对了这个东西还有个坑的地方，在pycharm运行的时候需要设置一下才能正常使用（要开启模拟终端）： ","date":"2023-02-09","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-09-%E4%BD%BF%E7%94%A8simple_term_menu%E5%88%9B%E5%BB%BA%E6%9B%B4%E5%A5%BD%E7%9A%84python%E8%8F%9C%E5%8D%95/","series":[],"tags":["python","menu"],"title":"用 Simple_term_menu 创建更好的python菜单"},{"categories":[""],"content":"说到数据库设计软件，之前上学的时候用过 powerdesigener 、 navicat设计数据库。\n但是都是付费软件，今天找到了一个免费的数据库设计工具 dbdiagram.io 。\n首先，以防你看完了文章才发现自己不喜欢这个，先来看一下截图：\n一般操作就是左边写语句，右边可以拖拽生成外键，设计好了之后可以生成各种数据库的 sql 语句，也可以PDF导出。\n这里使用的语句叫做 dbml 语句,语法类似sql建表语句，具体语法参考这个链接 ，这个语言是 dbdiagram.io 自己的，可能需要小小的学习一下。\n我这里在 vscode 中安装了一个 dbml 插件，可以在 vscode 中写设计语句，通过 copilot （AI插件），我只要写好备注，就可以自动生成大段的语句。\n关于外键的用法其实也非常的符合直觉：你只需要使用 - \u0026gt; 之类的富豪榜，就能轻松的表示一对一、一对多的关系。\n最后用 datagrip 导入生成的 sql 语句到 mysql，简直不要太爽！导出操作比我之前用过的那些软件方便得多！\n","date":"2023-02-09","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-09-dbdiagram.io%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E7%9A%84%E5%A5%BD%E9%80%89%E6%8B%A9/","series":[],"tags":["database","free"],"title":"Dbdiagram.io,数据库设计的好选择"},{"categories":[""],"content":"Fix dual system time problem fix a dual system bug : windows time not right everytime after using ubuntu.\nrun this in ubuntu\n1sudo timedatectl set-local-rtc 1 --adjust-system-clock why having this problem there a hardware called RTC in your computer:\nif RTC time is 00:00 , and you are in UTC+8:00 time zone ,\nwindows think : ok ,RTC time is just right : now is 00:00\nubuntu think : RTC time is UTC+0:00 so i have to add 8 hours and now is 08:00\ncommand make ubuntu think in windows way.\n","date":"2023-02-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-06fix-dual-system-time-problem-copy/","series":[],"tags":["ubuntu"],"title":"Fix Dual System Time Problem"},{"categories":[""],"content":"turn on grub menu if your grub menu don\u0026rsquo;t show when you boot up your system , you can follow this :\nedit grub config\n1sudo vim /etc/default/grub 1# GRUB_TIMEOUT_STYLE=hidden 2GRUB_TIMEOUT=10 commit\n1sudo update-grub get a theme gnome grub themes store deadsec theme change some grub settings edit grub config\n1sudo vim /etc/default/grub find and change:\n1GRUB_DEFAULT=saved add this line\n1GRUB_SAVEDEFAULT=true this 2 line make grub rember your choice\ncommit\n1sudo update-grub ","date":"2023-02-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-06grub/","series":[],"tags":["ubuntu"],"title":"Grub Settings for Noobies"},{"categories":[""],"content":"install Qv2ray install qv2ray in snap store.\nget core of Qv2ray go to this link on git hub to download \u0026gt;this link\u0026lt; unzip core to whatever floder, set up the core path in Qv2ray - Preferences - Kernel Settings and it\u0026rsquo;s all done!\nuse your phone as a proxy router , speed up download process.\nsettings after you get your servers into Qv2ray , you have to goto ubuntu settings and set upsystem proxy to make it work\ngo to system proxy - Network Proxy set 127.0.0.1:1089 for socks(this is default port), then it will work.\nrember some application doesn\u0026rsquo;t follow this setting.\n","date":"2023-02-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-06qv2ray-on-ubuntu/","series":[],"tags":["ubuntu"],"title":"Install Qv2ray on Ubuntu"},{"categories":[""],"content":"install sougou for ubuntu you can follow this guide download and install download sougou here fix every thing sougou need\n1sudo apt install fcitx 2sudo cp /usr/share/applications/fcitx.desktop /etc/xdg/autostart/ 3sudo apt purge ibus 4sudo apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2 5sudo apt install libgsettings-qt1 install the package again\n1sudo dpkg -i sougou...deb reboot\nsettings and stuff gotoubuntu settings - Region \u0026amp; Language - Manage installed Languages\nchoose fcitx\ngoto fcitx configuration , search for sougoupinyin and add it\n","date":"2023-02-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-02-06sougouforubuntu-copy/","series":[],"tags":["ubuntu"],"title":"Install Sougou for Ubuntu"},{"categories":[""],"content":"使用 python 读写 json，或者使用 json5 处理一些格式“不太正确”的 json string，比如js代码的格式。\n把 python 对象编码成 json string\n1import json 2 3data = { \u0026#39;a\u0026#39; : 1, \u0026#39;b\u0026#39; : 2, \u0026#39;c\u0026#39; : 3, \u0026#39;d\u0026#39; : 4, \u0026#39;e\u0026#39; : 5 } 4data_str = json.dumps(data, indent=4, separators=(\u0026#39;,\u0026#39;, \u0026#39;: \u0026#39;)) 5print(data_str) 解码 json string 到 python 对象\nloads() 和 dumps() 函数 处理字符串\nload() 和 dump() 函数 处理文件\n1import json 2# jsonstr = \u0026#39;{a:1,b:2,\u0026#34;c\u0026#34;:3,\u0026#34;d\u0026#34;:4,\u0026#34;e\u0026#34;:5}\u0026#39; 3jsonstr = \u0026#39;{\u0026#34;a\u0026#34;:1,\u0026#34;b\u0026#34;:2,\u0026#34;c\u0026#34;:3,\u0026#34;d\u0026#34;:4,\u0026#34;e\u0026#34;:5}\u0026#39; 4json_obj = json.loads(jsonstr) 5json_obj[\u0026#39;a\u0026#39;] 1\r第三方库：Demjson 1pip install demjson3 1import demjson3 2data = { \u0026#39;a\u0026#39; : 1, \u0026#39;b\u0026#39; : 2, \u0026#39;c\u0026#39; : 3, \u0026#39;d\u0026#39; : 4, \u0026#39;e\u0026#39; : 5 } 3demjson3.encode(data) '{\u0026quot;a\u0026quot;:1,\u0026quot;b\u0026quot;:2,\u0026quot;c\u0026quot;:3,\u0026quot;d\u0026quot;:4,\u0026quot;e\u0026quot;:5}'\rDemjson 可以处理一些格式“不太正确”的 json string\n1jsonstr = \u0026#39;{a:1,b:2,\u0026#34;c\u0026#34;:3,\u0026#34;d\u0026#34;:4,\u0026#34;e\u0026#34;:5}\u0026#39; 2demjson3.decode(jsonstr) {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\rjson5 1pip install json5 json5也可以处理一些格式“不太正确”的 json string ，并且语法要和 json 标准库一样\n1import json5 2jsonstr = \u0026#39;{a:1,b:2,\u0026#34;c\u0026#34;:3,\u0026#34;d\u0026#34;:4,\u0026#34;e\u0026#34;:5}\u0026#39; 3myobj = json5.loads(jsonstr) json5 保存到文件\n1json5.dump(myobj, open(\u0026#39;test.json5\u0026#39;, \u0026#39;w\u0026#39;), indent=4) ","date":"2023-01-31","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-31python-json/","series":[],"tags":[""],"title":"Json读写（Python）"},{"categories":[""],"content":"标准方法可以兼容不同系统，并且有一定的容错性（比如在目录末尾写不写/）\nos.path.split(path) 分割路径和文件名 os.path.join() 合并路径和文件名 os.path.dirname() 方法可以获取目录名 os.path.basename() 方法可以获取文件名 os.path.splitext() 方法可以分离文件名和扩展名 os.path.split(path) 分割路径和文件名 os.path.join() 合并路径和文件名 1import os 2 3path = \u0026#39;/home/User/Desktop/file.txt\u0026#39; 4os.path.split(path) ('/home/User/Desktop', 'file.txt')\r1path = \u0026#39;/home/User/Desktop\u0026#39; 2file = \u0026#39;file.txt\u0026#39; 3os.path.join(path,file) '/home/User/Desktop/file.txt'\ros.path.normpath() 可以规范化路径，比如把多个/合并成一个，把.和..去掉\n1path = \u0026#39;/home/User/Desktop//..//file.txt\u0026#39; 2os.path.normpath(path) '/home/User/file.txt'\r路径、文件名、扩展名 os.path.dirname() 方法可以获取目录名 os.path.basename() 方法可以获取文件名 os.path.splitext() 方法可以分离文件名和扩展名 1path = \u0026#39;/home/User/Desktop/file.txt\u0026#39; 2os.path.dirname(path) '/home/User/Desktop'\r1path = \u0026#39;/home/User/Desktop/file.txt\u0026#39; 2os.path.basename(path) 'file.txt'\r1path = \u0026#39;/home/User/Desktop/file.txt\u0026#39; 2os.path.splitext(path) 3ext = os.path.splitext(path)[1] ('/home/User/Desktop/file', '.txt')\r","date":"2023-01-31","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-31python-path/","series":[],"tags":["python"],"title":"使用标准的path处理方法 (Python)"},{"categories":[""],"content":"老高與小茉 Mr \u0026amp; Mrs Gao 在我感觉人生无聊的时候给了我新的观点和信念！\n我还记得我第一个看到的是“29号宇宙”，讲述的是一个养老鼠实验模拟人类社会。\n我喜欢看的类型：\n寿命、基因、奇特的地球生物 灵魂、濒死经历、轮回、死后世界、精神分裂、心理学 外星人、地底人、古代高科技人类文明、 圣经、希腊神话、中国古神话、、苏美尔人 极端地理环境、沙漠、金字塔、南北极 特斯拉、图灵、马斯克等超级牛的任务专辑 女科学家的三次濒死体验 濒死体验 南極和北極，地球上最不可思議的兩個地方 南极空洞和外星人 共济会和光明会 古老的石匠组织 曼德拉效应 可能是平行宇宙～ 癌症悖論，鯨魚超長壽命的秘密 鲸鱼竟然不会得癌症！ 類人，黑猩猩為什麼像人卻永遠無法成為人 进化论 “我”其實根本不存在，“被動意識”假說 群体潜意识 人爲什麽一定要死？其實“不死”比“死”更為可怕 基因和寿命 【震撼】瀕死體驗中看到好多人在排隊，領取一樣非常重要的東西 濒死体验 地球上最常見的外星人，蟲 虫子就像是完全另一个星球的物种对不对…… 沒想到居然是上海 轮回和前世记忆 過去可以被改變的真正原因，被討厭的勇氣 阿德勒心理学\u0026ndash;世界上没有心理创伤 世界正在無限循環，你要做的只有這件事 尼彩心理学：永恒轮回：强大的心 二十分鐘講完宇宙的一生，從一切的開始到結束 宇宙的诞生：大爆炸和宇宙背景辐射 雖然被警告不要說】但是我還是決定公開這一期 孟照国事件\u0026ndash;中国的外星人接触（性交）事件 天堂的證明，一個你這輩子都看不到的世界 濒死体验～ 死后世界 千萬不要去！世界十大人類禁地 地球上的特殊地点、极寒、极热、核辐射 引起抑鬱的真正原因 地球上智商最高的九種動物，第一名就快變成人了 猩球崛起 你每天都做這件事，但你真的知道自己在做什麽嗎 睡眠可以修复人的大脑 千萬不要碰，帶來短暫幸福和永恆災難的植物 罂粟、大麻、海洛因 人類不能知道的秘密，人族的故事 外星人外星人！ 夢究竟是什麼？人為什麼要做夢 做梦、鬼压床、清明梦、控制你的梦 世間萬物的壽命，地球上唯一“永生”的生命 各种动物的寿命大集合 太多了，但是也并不是所有的视频都好看就是了……\n","date":"2023-01-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-29mrgaomsmo/","series":[],"tags":[""],"title":"喜欢的老高视频|老高與小茉视频推荐"},{"categories":[""],"content":"关于如何在2023年使用zlibrary，可以下载很多小说、电子书、期刊等等。（我以前以为只能下载学术论文啥的所以从来没有关注过！）\n去 telegram 上搜索 zlib，会找到：@zlibrary2bot 给 bot 发送 /weblink ，他会给你一个最新链接，是 zlib 现在的链接，需要通过tor浏览器访问。 1⚠️ Z-library website is currently available only in Tor network. You can find out more and download Tor browser at https://www.torproject.org 2 3Books link: bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion 4Articles link: articles24t2d47kb6rbabobokvrnymh2smkleosntcu6qxou6sxewyd.onion 下载 tor ： https://www.torproject.org 使用 tor 网络需要全局代理，或者手动设置代理。 使用 onion 浏览器访问链接 Bookslink 注册之后 zlib 会推荐你创建一个自己的 tgbot，和 bot 对话获取图书，不用每次都进入 onion 浏览器下载图书了，对我来说超级方便！如果你跳过了，可以直接进入 这个链接 创建/打开自己的bot 创建一个你私有的机器人，然后把机器人的 token 发给 zlib，zlib 会把你的 token 和你的账号绑定，这样你就可以通过你的机器人来获取图书了。 和你的机器人说你要的书名，然后就可以下载了！ that is all.\n","date":"2023-01-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-29zlib/","series":[],"tags":["books"],"title":"Zlibrary"},{"categories":[""],"content":"Django 是一个 使用python作为后端语言的框架。 学习 Django 源于我想要让我的 jandan 脚本可以提供在线服务…… 没想到这个东东这么复杂， 亏了呀！\n安装Django https://docs.djangoproject.com/zh-hans/4.1/intro/install/ 如果在系统范围安装，安装前需要先装好python3.x。 官方教程还建议使用venv虚拟环境的方式，不过我一直弄不太懂venv，就不尝试了。\n1python -m pip install Django 检查是否安装成功：\n1python -m django --version 新建项目 创建 1django-admin startproject mysite 项目会创建一个如下图的目录，关于这些文件都是干啥的可以参考这个链接： https://docs.djangoproject.com/zh-hans/4.1/intro/tutorial01/ 实际上一般只有 urls、settings 两个文件大概会用到\n启动 启动项目，我们只要运行刚才生成的manage.py\n1python manage.py runserver http://127.0.0.1:8000/ 打开看看吧！\n可以通过下面的命令来自定义端口\n1python manage.py runserver 8080 刚才我们创建了一堆 python 文件，可以在运行时热重载，但如果添加了新文件，就要重新启动 manage.py 了。\n新建APP 创建投票应用 进入 manage.py 目录\n刚才创建的是 django 的基础架构，我们现在添加一个 polls app （投票应用），自己添加 app 的时候可以随便命名。\n1python manage.py startapp polls 创建视图 要在 polls 应用下面创建一个视图，http://127.0.0.1:8000/polls/index\n需要修改两个文件：views.py \u0026amp; urls.py\n在views.py\n1from django.http import HttpResponse 2 3def index(request): 4 return HttpResponse(\u0026#34;Hello, world. You\u0026#39;re at the polls index.\u0026#34;) polls/urls.py还不存在，新建一个urls.py如下：\n1from django.urls import path 2from . import views 3 4urlpatterns = [ 5\tpath(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), 6] 还要去mysite/urls.py ，指向一下这个新建的 polls/urls.py 。\n(可以理解为这个是管根目录的，我们刚才那个是管/polls目录的)\n1from django.contrib import admin 2from django.urls import include, path 3 4urlpatterns = [ 5\tpath(\u0026#39;admin/\u0026#39;, admin.site.urls), 6\tpath(\u0026#39;polls/\u0026#39;, include(\u0026#39;polls.urls\u0026#39;)), 7] 然后访问： http://127.0.0.1:8000/polls/ 就可以了。\n逻辑上，django 先请求 mysite/urls.py ，指向了 polls/urls.py 再指向 views.py 文件返回 respond 。\npath函数 函数 path() 具有四个参数，\n两个必须参数：route 和 view , 路径 / 对应的 py 函数 两个可选参数：kwargs 和 name。传参用 / 全局引用、模板使用。 这部分我觉得官网讲的非常清晰简洁（再页面最下方）： https://docs.djangoproject.com/zh-hans/4.1/intro/tutorial01/ 设置-时区 时区在后面数据库中非常有用(比如数据插入时间)， 推荐先设置成正确的时区。\n在 settings.py 中修改这个\n1TIME_ZONE = \u0026#39;UTC\u0026#39; #美国时间（默认） 2TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; #中国时间 设置参考（这个网站包含所有的 settings.py 的项） https://docs.djangoproject.com/zh-hans/4.1/ref/settings/#std-setting-TIME_ZONE 设置-数据库 生成数据表 这个语句自动创建 INSTALLED_APPS 中的表。\n1python manage.py migrate 基础知识 数据库的配置在 mysite/settings.py 中，如下所示，可以使用各种数据库：\n1\u0026#39;django.db.backends.sqlite3\u0026#39; 2\u0026#39;django.db.backends.postgresql\u0026#39; 3\u0026#39;django.db.backends.mysql\u0026#39; 4\u0026#39;django.db.backends.oracle\u0026#39; 默认使用sqlite，其他的可以看文档： https://docs.djangoproject.com/zh-hans/4.1/ref/settings/#std-setting-DATABASES 下面是默认配置：\n1DATABASES = { 2\t\u0026#39;default\u0026#39;: { 3\t\u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, #换数据库修改这里 4\t\u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, 5\t} 6} django 提供一些自带的 APP，可以在 settings.py 里面看到 ， 迁移时会自动根据已经安装的APP来创建数据表。：\n1INSTALLED_APPS = [ 2 \u0026#39;django.contrib.admin\u0026#39;, 3 \u0026#39;django.contrib.auth\u0026#39;, 4 \u0026#39;django.contrib.contenttypes\u0026#39;, 5 \u0026#39;django.contrib.sessions\u0026#39;, 6 \u0026#39;django.contrib.messages\u0026#39;, 7 \u0026#39;django.contrib.staticfiles\u0026#39;, 8] 创建模型 上面 INSTALLED_APPS 能生成的数据表，不包括我们新创建的 polls APP ，这里开始逐步把它加入\n需要创建两个模型：问题 Question 和选项 Choice。\nQuestion 问题 Choice 选项和当前得票数，连接到Question 修改 polls/models.py，内容如下：\n1from django.db import models 2 3class Question(models.Model): 4 question_text = models.CharField(max_length=200) #问题内容 5 pub_date = models.DateTimeField(\u0026#39;date published\u0026#39;) #问题发布时间 6 7class Choice(models.Model): 8 question = models.ForeignKey(Question, on_delete=models.CASCADE) #外链到问题 9 choice_text = models.CharField(max_length=200) #选项内容 10 votes = models.IntegerField(default=0) #选项票数 主键(IDs)会被自动创建 表名首字母大写 字段小写英文，下划线相连 通过这个polls/models.py，django 可以得到创建数据库的信息。\n我们需要把自己的app也加入mysite/settings.py 的INSTALLED_APPS列表中：\n1INSTALLED_APPS = [ 2 \u0026#39;django.contrib.admin\u0026#39;, 3 \u0026#39;django.contrib.auth\u0026#39;, 4 \u0026#39;django.contrib.contenttypes\u0026#39;, 5 \u0026#39;django.contrib.sessions\u0026#39;, 6 \u0026#39;django.contrib.messages\u0026#39;, 7 \u0026#39;django.contrib.staticfiles\u0026#39;, 8 \u0026#39;polls.apps.PollsConfig\u0026#39;, #这一行 9] 激活模型 这个步骤是下面的创建表的前置步骤\n运行 makemigrations 命令，Django 会检测你对模型文件的修改，在 polls/migrations 生成数据库表的 schema ，Django 通过schema 来创建数据表。我们刚才创建了 polls/models.py ， 用这个语句“激活”它。\n1python manage.py makemigrations polls （迁移用）生成建表语句，会根据你在 mysite/settings.py中选择的数据库种类，输出对应的建表语句：\n1python manage.py sqlmigrate polls 0001 再次生成数据表\n1python manage.py migrate 模型 的 __str__ 函数 给模型增加__str__函数，在后面使用 python shell 添加数据时，可以更轻松的看懂、更易读。\n给polls/models.py新增两个def __str__(self):\n1from django.db import models 2 3class Question (models.Model): 4 question_text = models.CharField(max_length=200) 5 pub_date = models.DateTimeField(\u0026#39;date published\u0026#39;) 6 def __str__(self): 7 return self.question_text 8 9class Choice(models.Model): 10 question = models.ForeignKey(Question,on_delete=models.CASCADE) 11 choice_text = models.CharField(max_length=200) 12 votes = models.IntegerField(default=0) 13 def __str__(self): 14 return self.choice_text 再添加一个was_published_recently(self)函数，可以给Question增加一个“最近发布”的功能：\n1from django.utils import timezone 2 3class Question(models.Model): 4\t... 5 def was_published_recently(self): 6 return self.pub_date \u0026gt;= timezone.now() - datetime.timedelta(days=1) 去 py shell里面看一下，刚刚写的函数有没有效果\n1python manage.py shell 1from polls.models import Choice, Question 2Question.objects.all() 3#\u0026lt;QuerySet [\u0026lt;Question: What\u0026#39;s up?\u0026gt;]\u0026gt; 4 5q = Question.objects.get(pk=1) 6q.was_published_recently() 7## True 尝试数据库API 下面的语句都是在py shell中执行的\n1python manage.py shell manage.py 会设置 DJANGO_SETTINGS_MODULE 环境变量，这个变量会让 Django 根据 mysite/settings.py 文件来设置 Python 包的导入路径,(我发现这个python shell 有补全功能)\n增加条目 通过python 语句 增加条目，首先要引入我们刚才写的models\n1from polls.models import Choice, Question 新建一个 question，并保存到数据库中\n1from django.utils import timezone #需要用到时区获取时间 2q = Question(question_text=\u0026#34;What\u0026#39;s new?\u0026#34;,pub_date=timezone.now()) 3q.save() #把新建的q实例存储到数据库中 查看当前 Question 表所有的内容，看看是否添加成功\n1Question.objects.all() 增加条目关联条目 给 question 增加 choice ，一般来说可以先给 choice 表增加一行，再绑定 question ，但是 django 推荐你使用下面这种方式。\n通过 q.choice_set.create 创建 choice。\n通过问题 id=1 获取 question\n1q = Question.objects.get(pk=1) 查看目前关联的所有 choice\n1q.choice_set.all() 增加一些choice\n1q.choice_set.create(choice_text=\u0026#39;choice 1\u0026#39;, votes=0) 2q.choice_set.create(choice_text=\u0026#39;choice 2\u0026#39;, votes=0) 可以给新增加的 choice 赋值给对象 c\n1c = q.choice_set.create(choice_text=\u0026#39;Just hacking again\u0026#39;, votes=0) 通过 c 可以反向找到 question\n1c.question 2#\u0026lt;Question: What\u0026#39;s up?\u0026gt; 查看所有的 choice 、 查看 choice 个数 的内置函数\n1q.choice_set.all() 2#\u0026lt;QuerySet [\u0026lt;Choice: Not much\u0026gt;, \u0026lt;Choice: The sky\u0026gt;, \u0026lt;Choice: Just hacking again\u0026gt;]\u0026gt; 3q.choice_set.count() 4#3 删除条目 删除内容为 “Just hacking” 开头的 choice 。\n1c = q.choice_set.filter(choice_text__startswith=\u0026#39;Just hacking\u0026#39;) 2c.delete() 查看字段内容 先选取一个问题（id = 1）\n1q = Question.objects.get(pk=1) 使用 python 访问他的字段内容\n1q.id 2q.question_text 3q.pub_date 修改字段内容 1q.question_text = \u0026#34;What\u0026#39;s up?\u0026#34; 2q.save() 更多的查询API all、filter 返回列表、 get 返回一条\nall 查看表中所有项目\n1Question.objects.all() get 查询，使用 get 返回的是单个元素，\n1Question.objects.get(pk=1) #pk会默认匹配表的主键，这里是id filter 获取指定 id\n1Question.objects.filter(id=1) filter 通过前缀过滤 ，使用 filter 会返回 列表\n1Question.objects.filter(question_text__startswith=\u0026#39;What\u0026#39;) filter 查询高级用法（查询最近一年的）\nfilter 支持使用双下划线查询子内容： 比如这里使用 choice.question.pub_date.year 与 current_year 做比较\n1from django.utils import timezone 2current_year = timezone.now().year 3Choice.objects.filter(question__pub_date__year=current_year) Admin 管理页面 django 可以给数据库自动生成管理页面（太棒啦！）\n创建一个用户 ， 用于登陆管理页面\n1python manage.py createsuperuser 启动\n1python manage.py runserver 但是里面没有我们创建的polls 应用！需要修改 polls/admin.py\n1from django.contrib import admin 2from .models import Question,Choice 3admin.site.register(Question) 4admin.site.register(Choice) view 视图 在上面“新建APP”章节已经讲过了 创建视图，但是仅能返回简单的字符串。\nviews.py 在polls/views.py增加三个function，代表三个页面，投票详情、投票结果、投票动作。\n1def detail(request, question_id): 2 return HttpResponse(f\u0026#34;You\u0026#39;re looking at question {question_id}.\u0026#34; ) 3 4def results(request, question_id): 5 return HttpResponse(f\u0026#34;You\u0026#39;re looking at the results of question {question_id}.\u0026#34;) 6 7def vote(request, question_id): 8 return HttpResponse(f\u0026#34;You\u0026#39;re voting on question {question_id}.\u0026#34; ) 函数写法：\n在 urls.py 中会引用其函数名。 至少包括 request 参数， 必须返回 HttpResponse对象 可以加上自定义参数,比如这里的question_id作为输入。 urls.py 修改文件： polls/urls.py\n增加三个路由，/id投票详情、/id/results投票结果、/id/vote投票动作。\n1from django.urls import path 2 3from . import views 4 5urlpatterns = [ 6 #ex: /polls/ 7 path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), 8 #ex: /polls/5/ 9 path(\u0026#39;\u0026lt;int:question_id\u0026gt;/\u0026#39;, views.detail, name=\u0026#39;detail\u0026#39;), 10 #ex: /polls/5/results/ 11 path(\u0026#39;\u0026lt;int:question_id\u0026gt;/results/\u0026#39;, views.results, name=\u0026#39;results\u0026#39;), 12 #ex: /polls/5/vote/ 13 path(\u0026#39;\u0026lt;int:question_id\u0026gt;/vote/\u0026#39;, views.vote, name=\u0026#39;vote\u0026#39;), 14] 参数:\nurl 路径 绑定的函数名称 用于联动模板的 name （可以省略） 如果是有参数的 url 路径，末尾的斜杠不能删 HTML 模板 我们要把 index 修改一下，让他显示最新的五个问题，并且能跳转到问题细节。\n在polls 下创建一个 templates/polls 文件夹，在里面新建一个 index.html\n1{% if latest_question_list %} 2 \u0026lt;ul\u0026gt; 3 {% for question in latest_question_list %} 4 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/polls/{{ question.id }}/\u0026#34;\u0026gt;{{ question.question_text }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 5 {% endfor %} 6 \u0026lt;/ul\u0026gt; 7{% else %} 8 \u0026lt;p\u0026gt;No polls are available.\u0026lt;/p\u0026gt; 9{% endif %} 这里为了代码简短，展示核心代码功能，未为添加完整的 html 结构和 css ，这些都是很好修改和添加的。\n然后更新一下 views.py ， 让他使用这个模板\n1from .models import Question 2 3def index(request): 4 latest_question_list = Question.objects.order_by(\u0026#39;-pub_date\u0026#39;)[:5] 5 template = loader.get_template(\u0026#39;polls/index.html\u0026#39;) 6 context = { 7 \u0026#39;latest_question_list\u0026#39;: latest_question_list, 8 } 9 return HttpResponse(template.render(context, request)) 用 数据库api 来获取 list ，选取最新的 用 context 将 latest_question_list 传递给 HTML 模板 用 render 方法生成 HttpResponse ","date":"2023-01-16","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-05-django-1/","series":[],"tags":["python","django"],"title":"Django-Tutorial 1"},{"categories":[""],"content":"还没写，先留着空位\n","date":"2023-01-16","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-1-0xpython_beautiful_soup/","series":[],"tags":[""],"title":"Python_beautiful_soup"},{"categories":[""],"content":"要想使用docker，需要正确的了解一些基础信息，比如 image 是啥、容器是啥、 docker hub 是啥 、 为什么pull等等，我这里先给出一些简单的解释，但是详细可能还是得亲身体验才能理解：\nimage 镜像，可以pull镜像然后运行它 容器 ，运行中的 image 我们叫它 容器，类似虚拟机，但是更轻量级。 docker hub ， docker的官方 image 仓库，在这里我们可以下载到很多别人做的 image 来使用 总结/常用命令 完成了以上的tutorial，我感觉自己对docker已经有了初步的了解，可以正常使用它了。\n查看一下本地现有的 image\n1docker image ls 启动 getting-started 镜像，后台模式，映射 3000 端口，\n1docker run -dp 3000:3000 getting-started 🌟 查看运行中的容器\n1docker ps 2docker ps -a #包括未运行的 3docker ps -s #显示大小 4docker ps -q #仅显示容器id 🌟 进入容器（选择bash 、 sh 、 zsh、cmd ，看容器内部基于什么操作系统）\n1docker exec -it \u0026lt;container-ID\u0026gt; sh -i 交互模式 -t 终端 启动容器\n1docker start \u0026lt;container-ID\u0026gt; 停止容器\n1docker stop \u0026lt;container-ID\u0026gt; 2docker kill \u0026lt;container-ID\u0026gt; #强行退出 删除容器(删除前需要先停止容器)\n1docker rm \u0026lt;container-ID\u0026gt; 2docker rm -f \u0026lt;container-ID\u0026gt; #强制删除 查看端口映射（正在运行的容器）\n1docker port \u0026lt;container-ID\u0026gt; 查看运行状态（cpu、内存实时使用情况等）\n1docker container stats install windows 安装好wsl（在win商店搜ubuntu） 下载docker ： docker 卡在starting的解决办法： 使用管理员权限的 powershell：\n1net stop com.docker.service 2net start com.docker.service 3 4wsl --unregister docker-desktop 5wsl --unregister docker-desktop-data 1-把应用程序容器化 https://docs.docker.com/get-started/02_our_app/ Docker Hub 是一个官方网站，上面可以下载很多 images。\n运行中 image 的叫做 container （容器），他们运行的时候都是和你的电脑隔离的，就好像开了一堆小号的虚拟机。\n而实际上，在docker hub 下载的 images 是别人打包好的应用程序，比如 dvwa （渗透靶场）、oracle 11g 等，在第一个教程里，我们要自己把本地的示例 Node.js 程序变成一个容器。\n下载程序 1git clone https://github.com/docker/getting-started.git Dockerfile 本教程是 Node js 的构建，其他的也可以参考官方教程写 Dockerfile , 比如 python https://docs.docker.com/language/python/build-images/ 我们关注 getting-started/app 这个目录，在这个目录下创建一个 Dockerfile 文件，并编辑内容如下：\n1## syntax=docker/dockerfile:1 2FROM node:18-alpine 3WORKDIR /app 4COPY . . 5RUN yarn install --production 6CMD [\u0026#34;node\u0026#34;, \u0026#34;src/index.js\u0026#34;] 7EXPOSE 3000 指示构建器从node:18-alpine image 开始。但是，由于机器上没有它，Docker 需要下载 image。 Docker 下载 image 后，根据 Dockerfile 中的说明把整个目录的文件复制到您的应用程序中，并使用yarn安装应用程序的依赖项。CMD 指令指定从此映像启动容器时要运行的默认命令。\nFROM 定义基础 image ，Dockerfile 必须以 FROM 开头。 WORKDIR 是为后续命令提供执行目录，如 COPY、 RUN、 CMD ，如果没有指定，默认工作目录是 /。 COPY 指令从 \u0026lt;src\u0026gt; 复制新文件或目录，并将其添加到路径 \u0026lt;dest\u0026gt; 的容器文件系统中，这里 src 和 dest 都是 . 。 RUN 执行 shell 命令，FROM 是 windows 的话就是执行 cmd。 CMD [\u0026quot;executable\u0026quot;,\u0026quot;param1\u0026quot;,\u0026quot;param2\u0026quot;] EXPOSE 把容器内部的端口开放到外部，也可以指定 tcp 、 udp ， 但无论 EXPOSE 设置如何，您都可以在运行时使用-p 标志覆盖它们，如 docker run -p 80:80 1EXPOSE 80/tcp 2EXPOSE 80/udp 构建容器 image 还是回到 getting-started/app 目录，执行：\n1docker build -t getting-started . -t getting-started 给镜像设置一个昵称。 docker build . 在当前目录下寻找 Dockerfile 。 启动容器 1docker run -dp 3000:3000 getting-started -d 标志在“分离”模式下（在后台）运行新容器 -p 标志在主机的端口3000和容器的端口3000之间创建映射 打开您的网页浏览器到http://localhost:3000 。您应该会看到您的应用。\n修改和更新image 修改和更新这里还是不包含原数据的\n修改文件： app/src/static/js/app.js 修改第 56 行 ，把 No items yet! Add one above! 修改成你的字符串。\n然后重新 build\n1docker build -t getting-started . ps 我在这里失败了好多次，我把原来的 image 删除之后才build 成功\n重新启动一个容器\n1docker run -dp 3000:3000 getting-started 停止和删除容器 docker ps命令获取容器的ID docker stop \u0026lt;the-container-id\u0026gt; 命令停止容器 docker rm \u0026lt;the-container-id\u0026gt; 删除容器 分享 image 经过刚才的操作，我们已经成功的制作了一个自己的 image ， 现在我们看看怎么把它分享到 docker hub。\n首先得登陆一下 https://hub.docker.com 1docker login -u \u0026lt;your-user-name\u0026gt; 查看一下本地现有的 image\n1docker image ls 给 getting-started 增加 tag 方便推送\n1docker tag getting-started \u0026lt;your-user-name\u0026gt;/getting-started 推送 image\n1docker push \u0026lt;your-user-name\u0026gt;/getting-started 最佳实践 关于如何让 docker 文件尽量更小、怎么让数据永久保存等内容，参考： https://docs.docker.com/develop/dev-best-practices/ ","date":"2023-01-16","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-16-docker/","series":[],"tags":["Docker"],"title":"Docker"},{"categories":[""],"content":" 我已经想要把我的小工具打包成单个程序很久了。但是一直不知道怎么操作\n今天看到reddit里面给我推送：how_to_build_my_console_app_as_single_exe_file 但是进去看了一圈都是垃圾回答，所以我自己研究了一下（因为也确实需要）\n最后在youtube视频评论里找到了答案。\n使用了 dotnet 命令行，官方文档在这里： https://learn.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish 打包方法 用vs2019 + 打开你的项目 打开视图 - 终端 输入需要的命令，有两种 打包成单个文件的命令：\n1dotnet publish -r win-x64 -p:PublishSingleFile=True --self-contained false --output \u0026#34;C:\\abc\u0026#34; 打包成单个文件（带.net core环境）的命令：\n包比较大，但是兼容性会好，因为不需要客户端安装环境 我没有测试过.net frame work的打包功能，据说那个不能连同环境一起打包\n1dotnet publish -r win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:PublishTrimmed=true --output \u0026#34;C:\\abc\u0026#34; 打包这里面的 pdb 文件可以删除，他是用来调试的\n可以看出来那个带了环境的的打包文件就大很多。\n我用 windows sandbox 测试了，真的有用，sandbox 里面没有安装过.net环境也可以运行那个带环境的打包版本。\n","date":"2023-01-10","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-10csharp%E7%9A%84%E6%89%93%E5%8C%85%E6%8A%80%E5%B7%A7singlefile/","series":[],"tags":["csharp"],"title":"C# 的打包技巧（打包成singlefile)"},{"categories":[""],"content":"epplus是一个读写xlsx的csharp库。官网教程 https://epplussoftware.com/zh/Developers/ 官方教程中使用和很多using 我不喜欢多层级括号，using不使用多层级括号参考：\nhttps://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-statement basics 新建excel 传入string路径读取excel，如果传入的是空的就新建一个。\n1using var package = new ExcelPackage(@\u0026#34;myWorkbook.xlsx\u0026#34;); 新建sheet 1var sheet = package.Workbook.Worksheets.Add(\u0026#34;My Sheet\u0026#34;); 修改cell内容 修改指定名字的sheet\n1package.Workbook.Worksheets[\u0026#34;Worksheet1\u0026#34;].Cells[\u0026#34;A3\u0026#34;].Formula = \u0026#34;SUM(A1:A2)\u0026#34; 修改上面提到的sheet，支持excel语法，框选范围, 比如单个单元格、长方形范围、A列到B列等\n1sheet.Cells[\u0026#34;A1\u0026#34;].Value = \u0026#34;Hello World!\u0026#34;; 2sheet.Cells[\u0026#34;A2:E8\u0026#34;].Value = \u0026#34;xxx\u0026#34;; 3worksheet.Cells[\u0026#34;A:B\u0026#34;].Value = \u0026#34;xxx\u0026#34;; 修改style 主要包括修改数字格式、修改字体\n1worksheet.Cells[\u0026#34;A1:B3,D1:E57\u0026#34;].Style.NumberFormat.Format = \u0026#34;#,##0\u0026#34;; 2//Sets the numberformat for a range containing two addresses. 3worksheet.Cells[\u0026#34;A:B\u0026#34;].Style.Font.Bold = true; //Sets font-bold to true for column A \u0026amp; B 4worksheet.Cells[\u0026#34;1:1,A:A,C3\u0026#34;].Style.Font.Bold = true; //Sets font-bold to true for row 1,column A and cell C3 5worksheet.Cells[\u0026#34;A:XFD\u0026#34;].Style.Font.Name = \u0026#34;Arial\u0026#34;; //Sets font to Arial for all cells in a worksheet. 6worksheet.Cells.Style.Font.Name = \u0026#34;Arial\u0026#34;; //This is equal to the above. 保存 例如保存到桌面/out/myWorkbook.xlsx\n1var desktopurl = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + \u0026#39;/\u0026#39; + \u0026#34;out\u0026#34; + \u0026#39;/\u0026#39;; 2workbook.SaveAs(@$\u0026#34;{desktopurl}myWorkbook.xlsx\u0026#34;) LoadData 支持从csv（其他的导出数据）、List\u0026lt;T\u0026gt;（内存中的数据）、datatable（数据库中的数据）中获取数据然后变成ExcelPackage\n读取collection （List\u0026lt;T\u0026gt;） 首先创建一个class，并生成一些实例，保存到一个列表中。\n1public class MyClass 2{ 3 public string Id { get; set; } 4 public string Name { get; set; } 5 public int Number { get; set; } 6} 1var items = new List\u0026lt;MyClass\u0026gt;() 2{ 3 new MyClass(){ Id = \u0026#34;123\u0026#34;, Name = \u0026#34;Item 1\u0026#34;, Number = 3}, 4 new MyClass(){ Id = \u0026#34;456\u0026#34;, Name = \u0026#34;Item 2\u0026#34;, Number = 6} 5}; 然后把它变成一个ExcelPackage，这里例如以C1为左上角顶点。\n1using (var pck = new ExcelPackage()) 2{ 3 var sheet = pck.Workbook.Worksheets.Add(\u0026#34;sheet\u0026#34;); 4 var range = sheet.Cells[\u0026#34;C1\u0026#34;].LoadFromCollection(items,c =\u0026gt; {c.PrintHeaders = true;}); 5} 可以打印表头，默认不打印 可以设置主题，比如弄一额黑色主题 可以设置表头，比如只要id、name两列\n1var tableRange = sheet.Cells[\u0026#34;C1\u0026#34;].LoadFromCollection(items, c =\u0026gt; { 2 c.PrintHeaders = true; 3 c.TableStyle = TableStyles.Dark1; 4 c.Members = new MemberInfo[] 5 { 6 t.GetProperty(\u0026#34;Id\u0026#34;), 7 t.GetProperty(\u0026#34;Name\u0026#34;) 8 } 9}); ExportData 支持把ExcelPackage保存成csv、Datatable、json、html格式。\nEncryption 可以给文件加密！\n1//Set a password for the workbookprotection 2workbook.Protection.SetPassword(\u0026#34;EPPlus\u0026#34;); ","date":"2023-01-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-05epplus/","series":[],"tags":["csharp","excel"],"title":"Csharp 使用 Epplus 读写 Excel表格"},{"categories":[""],"content":"最近工作终于闲了下来，可以上班研究代码。遇到一些需要正则表达式的编程问题，无法解决所以决定个学一下。\nRegex 101 - ZH-CN (regexlearn.com) Regex Learn - 练习场 Regex Learn - cheatsheet 练习题 简单 匹配单词\nhe is in black.\n1black . 允许匹配任何字符，包括特殊字符和空格\nA B C D E\n1. 肯定字符集 [abc] 匹配字母可以用[a-z] 匹配数字可以用[0-9] 或者 \\d\nbar ber bir bor bur\n1b[aeiou]r 否定字符集[^abc]\nbar ber bir bor bur\n1b[^ei]r 字母范围[a-z]\n重复? + * ? 加在字母后代表出现0次或1次\ncolor, colour\n1colou?r + 加在字母后代表出现1次或多次\nbr ber beer\n1be+r * 加在字母后代表出现0次或多次\nbr ber beer\n1be*r 大括号 {x}加在字母后代表出现x次\nber beer beeer beeeer\n1be{2}r {n, }加在字母后代表出现n到正无穷次，类似集合，[n，∞）\nber beer beeer beeeer\n1be{3,}r 分组() 分组可以只抓取匹配到的字符中的一部分。（通常也可以全都获取到再replace）\nfile_record_transcript.pdf\n1(.*).pdf$ 在python种可以这样使用\n1import re 2txt = \u0026#34;The rain in Spain.pdf\u0026#34; 3x = re.match(\u0026#34;(^The.*).(pdf)$\u0026#34;, txt) 4print(x.group(1)) #The rain in Spain 5print(x.group(2)) #pdf () 分组可以把上面的重复符号给组用。而不只是一个字母。\n\\1,\\2 分组引用，可以把组像变量一样引用。第一组就是\\1\nha-ha,haa-haa\n1(ha)-\\1,(haa)-\\2 像当于是：\n1(ha)-(ha),(haa)-(haa) (?: ): 非捕获分组 (不能被引用)\nha-ha,haa-haa\n1(?:ha)-ha,(haa)-/1 转义字符 \\ { } [ ] / \\ + * . $^ | ? 如果要这些特殊字符，需要在前面加上反斜杠匹配\n匹配开头 ^ 1. 3 eggs, beaten\n2. 1 tsp sunflower oil\n3. 1 tsp butter\n1^[0-9] 匹配尾巴 $ html.html.html-da-sdfhtml\n1html$ 匹配字符 \\w 字母、数字和下划线 \\w，其他各种不在这范围内的 \\W (匹配中文和中文标点可以使用\\W)\n数字\\d,非数字\\D\n空白符\\s,非空白\\S\nLookarounds 官方中文翻译：零宽断言，我觉得这个翻译真的是误导人，“断言”：极其肯定地说，断言你妈，还零宽，就不说人话是吧。 应该叫：附近匹配/左右匹配。\n其实我觉得如果后缀前缀不变的话，可以吧这段比如3PM一起给match出来，然后再replace PM 就可以了，比这个奇怪的语法看起来要好一些。\n看看后面(指定尾缀)\nDate: 4 Aug 3PM\n1\\d+(?=PM) 后面不要！(指定不要的尾缀)\nDate: 4 Aug 3PM\n1\\d+(?!PM) 看看前面\nProduct Code: 1064 Price: $5\n1(?\u0026lt;=\\$)\\d+ 前面不要！\nProduct Code: 1064 Price: $5\n1(?\u0026lt;!\\$)\\d+ 全局标志/gmi g - 获取全部，不加上只获取第一个\nm - 多行，如果不开启则全部文本视作一行，对于有匹配文本末端$的有影响\ni - 大小写不在意，不加上则大小写敏感\n贪婪匹配 正则表达式默认执行贪婪匹配，能要长的就不要短的\nber beer beeer beeeer\n1.*r 懒惰匹配? 还记得吗，?代表出现0次或1次\nber beer beeer beeeer\n1.*?r ","date":"2023-01-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-06-regex/","series":[],"tags":["regex"],"title":"Regex 101"},{"categories":[""],"content":"csharp 程序不能输入 用vscode运行csharp默认使用的terminal是不支持输入的，输入没反应\n需要修改 launch.json 增加这两行我估计是关闭了什么东西，并且调用系统的terminal，具体就不懂了。\n1\u0026#34;configurations\u0026#34;: [ 2 { 3 // For more information about the \u0026#39;console\u0026#39; field, see https://aka.ms/VSCode-CS-LaunchJson-Console 4 \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, 5 \u0026#34;internalConsoleOptions\u0026#34;: \u0026#34;neverOpen\u0026#34;, 6 }, Inlay hints 这个东西会在你的变量前面提示变量的类型、提示形参名称等，打开的话就代码看起来非常长。 类似图片中这样：\n所以我用这个“快捷键启用”模式，当我按下option + ctrl的时候才会显示这些提示\nsnippets cmd + P 搜索 \u0026gt;snippet 可以新建一个全局的代码片段文件，默认提供了配置示例\n1\u0026#34;console ReadLine\u0026#34;: { //提示中会显示的全名 2 \u0026#34;scope\u0026#34;: \u0026#34;csharp\u0026#34;, //仅在csharp代码中显示 3 \u0026#34;prefix\u0026#34;: \u0026#34;cr\u0026#34;, //输入cr触发 4 \u0026#34;body\u0026#34;: [//要输入的代码本体，支持多行但很麻烦，$1，$2等标注位置可以进行快速修改 5 \u0026#34;Console.ReadLine();\u0026#34; 6 ], 7 \u0026#34;description\u0026#34;: \u0026#34;Log output to console\u0026#34;//提示中会显示的详细解释 8}, 可以用这个网站： https://snippet-generator.app 是某个大佬专门给vscode写snippet开发的，代码粘进去，body部分的多行就会自己转换了，还有引号什么的都会自己转换。\nVibrancy Continued 这是一个vscode插件，会让你的vscode拥有毛玻璃效果。\n默认毛玻璃效果是整个窗体都是半透明，我个人觉得类似mac那种边栏半透明效果比较酷，可以在这里设置：\n注意毛玻璃插件开启后 vscode会觉得自己损坏，不要管他。\n而且这个插件虽然声称自己仅支持 默认的 Dark + 主题，但是实际上商店里面的xcode主题也可以用。\n","date":"2023-01-05","img":"","permalink":"https://cornradio.github.io/hugo/posts/2023-01-05vscode%E6%8A%80%E5%B7%A7/","series":[],"tags":["vscode"],"title":"Vscode技巧"},{"categories":[""],"content":"什么是mixin mixin就是这个按钮，简单说，mixin是一种混合配置的方式，你可以把自己的配置注入到“配置文件”中，这样就可以在一定程度上的自定义配置了，比如加入一些你自己的规则之类的。 为了理解mixin，我们需要先了解什么是“配置文件”，clash的配置文件一般可以通过下面的方法查看 一般来说，从机场下载过来的配置中包含了规则相关内容，你可以通过下面的方式检视机场提供给你的配置。 除了检查配置之外，你还可以做出修改，diff功能：比如原来“漏网之鱼”都是走proxy的，我把这条标记为删除之后，clash在每次下载这个配置之后，都会删除这条。这样我所有的“漏网之鱼”都会走direct了。 使用mixin 我这里举例我自己的使用办法,我比较喜欢让网络默认走直连,如果直连不上的网站再走代理。所以，我在上面的步骤中先删除了“漏网之鱼”全部走proxy的配置。\n这个取决于个人习惯，如果你日常上的网站都是没有办法直连的那么我推荐你直接默认代理，然后加一些直连规则\nmixin的设置位置在这里。 他会默认使用自带的编辑器打开，我不喜欢，可以用外置vscode打开，使用外置编辑器的功能在这里开启： 配置文件的默认格式我建议直接删除，因为我到现在也看不出来它到底是做什么的…… 你可以参考我现在的配置来建立自己的mixin配置。mixin是有JavaScript和yaml两种版本的，我使用的是yaml，yaml要注意缩进，我是用它是因为比js要简单一点，尤其是你有vscode的时候对齐很简单。\n简单解释两条：\n1- \u0026#39;DOMAIN-SUFFIX,redditstatic.com,PROXY\u0026#39; 2 全域名匹配模式，域名，走proxy 3- \u0026#39;DOMAIN-SUFFIX,edu.tw,DIRECT\u0026#39; 4 域名后缀匹配模式，域名，走direct 关于国内是否能够访问 我这里推荐使用站长工具：多地ping，可以看到国内的ping值，如果ping值很高，那么就说明国内访问不了，就得加进代理。 https://ping.chinaz.com/baidu.com 通过chrome网络工具查看需要添加规则的域名 一般来说，很大型的网站往往都有好多不一样的子域名，有的是站点内容，有的是图片存储。对于这种我们需要把所有的子域名都加进去，这个时候就需要用到chrome的网络工具了。\n如果你想要添加一个网站的规则，可以通过chrome的网络工具来查看这个网站的所有建立的连接，有连接不上的域名加入mixin配置中即可。\n我的例子 1rules: 2 # direct: 3 - \u0026#39;DOMAIN,sub.godetia.xyz,DIRECT\u0026#39; 4 - \u0026#39;DOMAIN,vpsgongyi.com,DIRECT\u0026#39; 5 - \u0026#39;DOMAIN-SUFFIX,edu.tw,DIRECT\u0026#39; 6 #steam direct 7 - \u0026#39;DOMAIN,steampowered.com,DIRECT\u0026#39; 8 - \u0026#39;DOMAIN,steamcommunity.com,DIRECT\u0026#39; 9 #derpi 10 - \u0026#39;DOMAIN,derpibooru.org,PROXY\u0026#39; 11 - \u0026#39;DOMAIN,derpicdn.net,DIRECT\u0026#39; 12 # proxy: 13 - \u0026#39;DOMAIN,docs.cfw.lbyczf.com,PROXY\u0026#39; 14 - \u0026#39;DOMAIN,patreon.com,PROXY\u0026#39; 15 - \u0026#39;DOMAIN,outlook.live.com,PROXY\u0026#39; 16 - \u0026#39;DOMAIN,pony.town,PROXY\u0026#39; 17 - \u0026#39;DOMAIN,gamepad-tester.com,PROXY\u0026#39; 18 - \u0026#39;DOMAIN,stackoverflow.com,PROXY\u0026#39; 19 - \u0026#39;DOMAIN,services.gradle.org,PROXY\u0026#39; 20 - \u0026#39;DOMAIN,openuserjs.org,PROXY\u0026#39; 21 - \u0026#39;DOMAIN,stackoverflow.com,PROXY\u0026#39; 22 - \u0026#39;DOMAIN,gamepadviewer.com,PROXY\u0026#39; 23 - \u0026#39;DOMAIN,go.microsoft.com,PROXY\u0026#39; 24 - \u0026#39;DOMAIN,nginx.org,PROXY\u0026#39; 25 - \u0026#39;DOMAIN,marketplace.visualstudio.com,PROXY\u0026#39; 26 - \u0026#39;DOMAIN,musicnotes.com,PROXY\u0026#39; 27 - \u0026#39;DOMAIN,fimfiction.net,PROXY\u0026#39; 28 - \u0026#39;DOMAIN,softonic.com,PROXY\u0026#39; 29 - \u0026#39;DOMAIN,zh.wikipedia.org,PROXY\u0026#39; 30 - \u0026#39;DOMAIN,nordvpn.com,PROXY\u0026#39; 31 - \u0026#39;DOMAIN,w3schools.com,PROXY\u0026#39; 32 - \u0026#39;DOMAIN,cdn.jsdelivr.net,PROXY\u0026#39; 33 - \u0026#39;DOMAIN,www.patreon.com,PROXY\u0026#39; 34 - \u0026#39;DOMAIN,getrolan.com,PROXY\u0026#39; 35 - \u0026#39;DOMAIN,cdnjs.cloudflare.com,PROXY\u0026#39; 36 - \u0026#39;DOMAIN,cdn.jsdelivr.net,PROXY\u0026#39; 37 - \u0026#39;DOMAIN,fonts.googleapis.com,PROXY\u0026#39; 38 - \u0026#39;DOMAIN,hugothemesfree.com,PROXY\u0026#39; 39 - \u0026#39;DOMAIN,ssltd.xyz,PROXY\u0026#39; 40 - \u0026#39;DOMAIN,forums.terraria.org,PROXY\u0026#39; 41 - \u0026#39;DOMAIN,c.biancheng.net,PROXY\u0026#39; 42 - \u0026#39;DOMAIN,alcorart.com,PROXY\u0026#39; 43 - \u0026#39;DOMAIN,uso.kkx.one,PROXY\u0026#39; 44 - \u0026#39;DOMAIN,grabient.com,PROXY\u0026#39; 45 - \u0026#39;DOMAIN,dollarexcel.com,PROXY\u0026#39; 46 - \u0026#39;DOMAIN,vscode.dev,PROXY\u0026#39; 47 - \u0026#39;DOMAIN,userstyles.world,PROXY\u0026#39; 48 - \u0026#39;DOMAIN,npmjs.com,PROXY\u0026#39; 49 - \u0026#39;DOMAIN,hath.network,PROXY\u0026#39; 50 - \u0026#39;DOMAIN,www.emojiall.com,PROXY\u0026#39; 51 - \u0026#39;DOMAIN,go.ezodn.com,PROXY\u0026#39; 52 - \u0026#39;DOMAIN,cd.connatix.com,PROXY\u0026#39; 53 - \u0026#39;DOMAIN,itch.io,PROXY\u0026#39; 54 - \u0026#39;DOMAIN,coub.com,PROXY\u0026#39; 55 - \u0026#39;DOMAIN,chaturbate.com,PROXY\u0026#39; 56 - \u0026#39;DOMAIN,highwebmedia.com,PROXY\u0026#39; 57 - \u0026#39;DOMAIN,diygod.me,PROXY\u0026#39; 58 - \u0026#39;DOMAIN,*.fandom.com,PROXY\u0026#39; 59 - \u0026#39;DOMAIN,www.dogfight360.com,PROXY\u0026#39; 60 - \u0026#39;DOMAIN,www.screentogif.com,PROXY\u0026#39; 61 - \u0026#39;DOMAIN,www.techworld-with-nana.com,PROXY\u0026#39; 62 # 开卡车游戏\\openai 63 - \u0026#39;DOMAIN,slowroads.io,PROXY\u0026#39; 64 - \u0026#39;DOMAIN-SUFFIX,openai.com,PROXY\u0026#39; 65 - \u0026#39;DOMAIN-SUFFIX,sentry.io,PROXY\u0026#39; 66 # reddit 67 - \u0026#39;DOMAIN-SUFFIX,redditstatic.com,PROXY\u0026#39; 68 - \u0026#39;DOMAIN-SUFFIX,redd.it,PROXY\u0026#39; 69 # from rocket 70 - \u0026#39;DOMAIN-SUFFIX,nhentai.to,PROXY\u0026#39; 71 - \u0026#39;DOMAIN-SUFFIX,chaturbate.com,PROXY\u0026#39; 72 - \u0026#39;DOMAIN-SUFFIX,xvideos.com,PROXY\u0026#39; 73 - \u0026#39;DOMAIN-SUFFIX,derpibooru.org,PROXY\u0026#39; 74 - \u0026#39;DOMAIN-SUFFIX,pornhub.com,PROXY\u0026#39; 75 - \u0026#39;DOMAIN-SUFFIX,sex.com,PROXY\u0026#39; 76 - \u0026#39;DOMAIN-SUFFIX,www.sex.com,PROXY\u0026#39; 77 - \u0026#39;DOMAIN-SUFFIX,equestria.social,PROXY\u0026#39; 78 - \u0026#39;DOMAIN-SUFFIX,openai.com,PROXY\u0026#39; 79 - \u0026#39;DOMAIN-SUFFIX,redditmedia.com,PROXY\u0026#39; 80 - \u0026#39;DOMAIN-SUFFIX,chat.openai.com,PROXY\u0026#39; 81 - \u0026#39;DOMAIN-SUFFIX,redd.it,PROXY\u0026#39; 82 - \u0026#39;DOMAIN-SUFFIX,reddit.com,PROXY\u0026#39; 83 - \u0026#39;DOMAIN-SUFFIX,netlify.app,PROXY\u0026#39; 84 - \u0026#39;DOMAIN-SUFFIX,patreon.com,PROXY\u0026#39; 85 - \u0026#39;DOMAIN-SUFFIX,sickipedia.net,PROXY\u0026#39; 86 - \u0026#39;DOMAIN-SUFFIX,naver.com,PROXY\u0026#39; 87 - \u0026#39;DOMAIN-SUFFIX,pstatic.net,PROXY\u0026#39; 88 - \u0026#39;DOMAIN-SUFFIX,tenable.com,PROXY\u0026#39; 89 - \u0026#39;DOMAIN-SUFFIX,e-hentai.org,PROXY\u0026#39; 90 - \u0026#39;DOMAIN-SUFFIX,v2ex.com,PROXY\u0026#39; 91 - \u0026#39;DOMAIN,www.ihezu.cn,PROXY\u0026#39; 92 - \u0026#39;DOMAIN-SUFFIX,www.ihezu.cn,PROXY\u0026#39; 93 - \u0026#39;DOMAIN-SUFFIX,mixkit.co,PROXY\u0026#39; 94 - \u0026#39;DOMAIN-SUFFIX,tunemymusic.com,PROXY\u0026#39; 95 - \u0026#39;DOMAIN-SUFFIX,soundcloud.com,PROXY\u0026#39; 96 - \u0026#39;DOMAIN-SUFFIX,*.github.io,PROXY\u0026#39; 97 - \u0026#39;DOMAIN-SUFFIX,*.github.com,PROXY\u0026#39; 98 - \u0026#39;DOMAIN-SUFFIX,netflix.com,PROXY\u0026#39; 99 - \u0026#39;DOMAIN-SUFFIX,nflximg.net,PROXY\u0026#39; ","date":"2022-12-26","img":"","permalink":"https://cornradio.github.io/hugo/posts/4clash-minxin-howtouse/","series":[],"tags":["clash"],"title":"Clash 中的 Minxin 使用教程"},{"categories":[""],"content":"inturder https://portswigger.net/burp/documentation/desktop/tools/intruder burpsuite的inturder用于自动化攻击web应用，可以更换http请求中指定位置的payload，不停的发送请求。并收集返回的结果。 inturder 的天生特性可用于以下攻击范围：\nFuzz 类型的input漏洞 进行暴力破解攻击 枚举攻击 快速收集有用的信息列表 Fuzz 本意是 “羽毛、细小的毛发、使模糊、变得模糊”，在渗透测试中指的是一种基于黑盒或灰盒的测试技术，通过自动化生成并执行大量的随机测试用例来发现产品或协议的未知漏洞\ntutorial 基础教程会教会你怎么用intruder进行简单的，单个位置的payload攻击。 首先打开实验环境： https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses http请求导入intruder 然后我们进入lab，点击登陆账户，模拟不知道账户和密码的情况： 然后我们找到刚才这条登陆的http请求，发送到intruder： 来到intruder，他会自动标记几个可能是注入点的地方，我们先clear掉。 然后手动选择用户名，添加一个新点位 然后选择模式，我们选择sniper（狙击手）模式。其他模式啥意思我也看不太懂，我感觉就是不同种类的排列组合方法吧。 破解用户名字段 然后我们到第二个页面，需要手动添加payload list，也就是字典，burp不提供字典。 教程可以用这个字典： https://portswigger.net/web-security/authentication/auth-lab-usernames 复制之后点击paste把我们的字典粘贴进来，然后点击右上角按钮，开始攻击 攻击过程中可以点击每一行查看发送的http请求，就是把你的标记位置username，变成了payload中的字符串。 通过Length排序，我们可以发现有一个返回值的长度和其他的不同，大家都是2984，他是2986。 点开respond发现，这里写着：“密码错误”，其他的请求都写着“用户名错误”，所以我们就找到一个可以用的用户名。用户名：alabama 破解密码字段 我们通过上面的方法获取到了一个用户名，接下来就需要破解密码字段，首先回到intruder，修改http请求，把用户名换成刚才得到的值，然后开始破解密码位置： 破解密码位置可以用这个字典，字典由burp教学网站提供： https://portswigger.net/web-security/authentication/auth-lab-passwords 破解过程很奇怪，有三种长度的返回值，2986 3073 170 ，2986和3073都是错误的，然后我就找到了密码：biteme 最后就登陆成功，解决了这个lab。 结尾 虽然破解成功了，不过很明显重要的是字典。首先用户名的字典，然后就是密码字典，我觉得现实中的网站密码绝对不会设置的这么简单。跑字典估计还没跑100个，我的ip就要被封禁了。\n但是这个课程的重点是教你如何使用inturder工具，通过课程我觉得还是看的很清楚的。后续使用的话主要需要关注这几点：\n自己搞一份好用的字典 后续可以研究一下不同的模式都是啥样的有什么特点，现在只用了sniper模式。 ","date":"2022-12-21","img":"","permalink":"https://cornradio.github.io/hugo/posts/3burpsuite_inturder/","series":[],"tags":["burp"],"title":"Burpsuite - 3 - Inturder"},{"categories":[""],"content":"burpsuite（入门教学课程） Intercept and modify HTTP traffic with Burp Proxy. Set the target scope to focus your work on interesting content. Probe for vulnerabilities by reissuing requests with Burp Repeater. Run automated vulnerability scans and generate reports with Burp Scanner. intercept （拦截）流量 https://portswigger.net/burp/documentation/desktop/getting-started/intercepting-http-traffic 拦截请求（intercept）之后，可以慢慢查看、修改请求，弄好了之后再点forward。 如果你需要好多步骤之后才开始用burp，那应该先把intercept关闭，即便是这时http请求也会被记录。\nhack 例子商店 https://portswigger.net/burp/documentation/desktop/getting-started/modifying-http-requests 商店地址：https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls 你需要先注册一个portswigger账号，因为这个东西是人家要给你生成一个实例给你黑，所以你得注册账号让他知道你是真人\u0026hellip;\u0026hellip;\n登录用户名和密码：Username: wiener Password: peter 然后你会发现你的账号里面有100$可以用来买东西。\n开启intercept，购买一个这个1000$ + 的jacket，然后你会收到一个POST /cart 请求。\n在请求的最下面有一个productId=1\u0026amp;redir=PRODUCT\u0026amp;quantity=1\u0026amp;price=133700，最后面是以美分为单位的价格，修改这个数字，改成1，然后我们就能有极低的价格（1美分）把这个商品加入购物车。 在购物车结算（Place order）之后，这个lab就完成了。同时你也学会了intercept, review, manipulate HTTP traffic using Burp Proxy。真棒。\ntarget scope 修改目标范围，有时候网页会加载很多外链或者你不想要了解的目标，这时候需要自定义目标范围。 https://portswigger.net/burp/documentation/desktop/getting-started/setting-target-scope 打开这个实验室： https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-in-error-messages 打开http请求，倒序，然后选择你想要的url，右键加入scope 加入了scope的东西可以在这里修改： scope里面有东西了之后，可以在http请求里面使用filter，只查看scope内的相关url记录 Burp Repeater 首先打开上一课的假的商店，设置好scope，然后我们会看到 每次打开商品详情，会有这样的请求（Get /product?productId=xx）： 我们右键 - 发送到repeater 然后在repeater里面发送和查看respond，就是repeater的主要功能 我们修改一下productid为100试试：结果返回了notfound 然后我们发送了好几次之后，可以通过这个按钮查看历史记录。 然后我们把这个productid改成一个非数字，看看会有什么反应： 结果返回了一堆错误信息，而且是没有做删减的，我们可以看出来Apache的版本号，这对于渗透来说是有意义的，尤其是这个版本的apache有漏洞可以用。 这里最后我们点击页面上的submit，把这个版本号填进去，这个lab就完成了 耶～\nburp scan burp同样耶提供扫描的功能，他的扫描远离如下：\n爬网页crawl（通过模拟用户操作的方式，比如点击链接等） 审计危险项audit（漏洞扫描） 注：burpscan只有专业版能用；非授权扫描别人的网站应用是违法的各位注意。 我们这里扫描他提供的例子站点：https://ginandjuice.shop/ scan的时候可以在target里面看看网站目录啥的 ","date":"2022-12-20","img":"","permalink":"https://cornradio.github.io/hugo/posts/3burpsuite%E5%85%A5%E9%97%A8/","series":[],"tags":["linux"],"title":"Burpsuite（入门教学课程）"},{"categories":[""],"content":" 你下载了一个破解版burpsuite pro，但是你不知道怎么安装，burp又提示一堆诡异的java17+错误，这篇文章就是写给你的。\n文件目录 1-rwx------ 1 kasusa staff 213B 11 19 2021 Readme.txt 2-rwx------@ 1 kasusa staff 262K 5 22 2020 burploader.jar 3-rwx------@ 1 kasusa staff 517M 4 4 2022 burpsuite_pro_v2022.3.2.jar 正常顺序 打开：burploader.jar 通过burploader 打开burp pro 输入license然后手动粘贴到burploader，burploader解密后给你返回一个字符串，你就破解成功了。 实际情况 打开：burploader.jar 通过burploader 打开burp pro 打开失败，报错 解决办法 主要原因是burp不是很兼容java 17+，但是官网给出了解决方法： 通过这条命令即可正常启动(正版）burp：\n1java -jar --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/javax.swing=ALL-UNNAMED burpsuite_pro_v2022.3.2.jar 所以破解的步骤就是：\n打开：burploader.jar 通过手工输入命令，打开burp pro，并指定 burploader 作为-noverify参数 1java -noverify -javaagent:burploader.jar -jar --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/javax.swing=ALL-UNNAMED burpsuite_pro_v2022.3.2.jar 正常流程激活(因为我激活过了不能再来一遍所以没有截图了) 制作一个脚本（.bat / .sh）用于方便后面启动burp mac快速启动脚本 在～目录制作一个sh文件，用于快速启动burp*\nburp.sh\n1cd /Users/kasusa/bin/burp/BurpSuiteProfessional2022.3.2 2java -noverify -javaagent:burploader.jar -jar --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/javax.swing=ALL-UNNAMED burpsuite_pro_v2022.3.2.jar ","date":"2022-12-19","img":"","permalink":"https://cornradio.github.io/hugo/posts/2burponmac_cracked/","series":[],"tags":["git"],"title":"在macos上面安装burpsuite（crackverison）"},{"categories":[""],"content":"参考链接： https://www.youtube.com/watch?v=nXLnx8ncZyE sed命令 sed据我了解是linux中用于替换的一个命令。\n使用方法 1# 把a.txt中的 abc 换成 def 并打印出来。 2sed \u0026#39;s/abc/def/\u0026#39; a.txt 3 4# 把a.txt中的 abc 换成 def ，替换到源文件内 5sed -i \u0026#39;s/abc/def/\u0026#39; a.txt 6 7# 使用/之外的分隔符也可以搜索,只要你把分隔符放在s后面，sed就认 8sed -i \u0026#39;s.abc.def.\u0026#39; a.txt ","date":"2022-12-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/2sed-linux%E5%91%BD%E4%BB%A4/","series":[],"tags":["linux"],"title":"Sed Linux命令"},{"categories":[""],"content":"需要工具 gitbash 用于快速操作 githubDesktop 用于查看文件历史等 注意 此操作不可撤销，如果你的历史记录中有着不想要被删除的重要数据，请务必提前备份。\n适用情况：清理git文件夹，让git每次clone下来更轻松。有可能项目中留存着一些没有用的垃圾，比如很大的图片、视频等。虽然目前已经删除。但这些内容实际上仍然保留在隐藏的.git文件夹中。\n操作 从git平台下拉目前的全部代码，删除原repo。\n删除在repo - settings - dangerzone最下面\n进入本地repo，打开gitbash，执行下列指令\n1rm -rf .git 2git init 3git add . 4git commit -m \u0026#34;init\u0026#34; 5git status 使用github desktop检查是否有残留 重新push repo到git平台\n网上有一些很乱七八糟的方法，又要head，又要forcepush，又要orphan branch之类的，说实话我有些看不懂，我这个方式绝对简单又高效（粗暴rm -rf） 嘿嘿。\n其他提示 insights - traffic 可以查看到public项目的所有访问记录。数据为0的话不会展示；对于github博客来说，这里还是很有用的。 ","date":"2022-12-03","img":"","permalink":"https://cornradio.github.io/hugo/posts/1%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4git%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E6%96%87%E4%BB%B6/","series":[],"tags":["git"],"title":"如何删除git中的所有历史文件"},{"categories":[],"content":" 本教程包含：开启ubuntu ssh server 功能（可以被远程）\\修改ubuntu 的 网卡mac地址\n安装ssh服务器 1sudo apt update 2sudo apt install openssh-server 查看ssh服务器启动状态 1sudo systemctl status ssh 使用内置的防火墙软件允许ssh通过 1sudo ufw allow ssh 查看你的ubuntu ip地址（这条命令会显示所有网卡的ip，选择你觉得最像的那个） 1ip -f inet address 笔记本关闭盒盖休眠功能 ubuntu2204默认开启了笔记本盒盖，系统自动休眠功能，这显然不是我们想要的，因为需要让他在盒盖状态下当一个家庭服务器，所以需要关闭他的[盒盖休眠]功能 下面是关闭[盒盖休眠]功能的指南,可以使用/关键词 在vi中搜索\n1sudo vi /etc/systemd/logind.conf 将其中的 #HandleLidSwitch=suspend 改成 HandleLidSwitch=ignore\n修改ubuntu MAC地址 单位的内网wifi开启了MAC地址认证功能，只有在清单中的MAC地址可以连接到内网WiFi，我有一个可用的内网mac地址，正好给他上上，然后自己搭建一个私人vpn\n安装macchanger 1apt install macchanger -y 查看需要更改的王开名称 1ip addr sh 设定网卡指定ip地址 1sudo macchanger -m e0:d4:e8:f8:e0:c6 wlp0s20f3 查看网卡地址(是否修改成功) 1macchanger --show wlp0s20f3 optional：恢复网卡mac地址（恢复成固件地址） 1macchanger -p wlp0s20f3 ","date":"2022-11-22","img":"","permalink":"https://cornradio.github.io/hugo/posts/ubuntu%E8%AE%BE%E7%BD%AEssh/","series":[],"tags":["ubuntu","ssh","macaddress"],"title":"Ubuntu设置ssh、修改mac地址(home Pc)"},{"categories":[""],"content":" 如果你更喜欢看视频：https://www.youtube.com/watch?v=Jfvg3CS1X3A\u0026amp;t=1s\n有些命令需要使用到管理员权限。推荐直接打开一个拥有管理员权限的cmd窗口！\n\u0026ndash;网络方面的命令比较多\n检查一下网卡情况\n1ipconfig /all 清除网络\n1ipconfig /release 刷新获取ip\n1ipconfig /renew 展示所有已知dns(并复制到剪切板)\n1ipconfig /displaydns | clip 刷新dns（从dns服务器重新拉）\n1ipconfig /flushdns 查dns字典（域名获取ip）\n1nslookup networkchuck.com 你还可以指定dns服务器\n1nslookup baidu.com 8.8.8.8 不知道干啥的\n1nslookup -type=ptr baidu.com ❤ 获取mac地址\n1getmac /v 一些系统报告\n1powercfg /energy 1powercfg /batteryreport 检查一下文件默认启动关联\n1assoc ❤ 检查一下电脑的系统文件问题\n1sfc /SCANNOW 查看正在运行的程序 类似ps\n1tasklist |findstr QQ kill （强制、指定pid）\n1taskkill /f /pid 40232l ❤ 更高级的网络报告\n1netsh wlan show wlanreport 关闭、打开防火墙\n1netsh advfirewall set allprofiles state off 1netsh advfirewall set allprofiles state on ping 和 不停的ping\n1ping baidu.com 1ping -t baidu.com 路由追踪\n1tracert -d baidu.com ❤ 查看当前端口开放情况\n1 netstat -af 135的作用就是进行远程，可以在被远程的电脑中写入恶意代码，危险极大 139、445文件和打印机共享，可以用于开启空会话 3389端口是Windows远程桌面的服务端口 1024端口一般不固定分配给某个服务，在英文中的解释是“Reserved”（保留）。之前，我们曾经提到过动态端口的范围是从1024～65535，而1024正是动态端口的开始\n展示电脑内路由表,可以修改\n1route print 1route add x.x.x.x mask 255.255.255.0 x.x.x.x 1route delete x.x.x.x ❤ 关机(完全重启 重启到bios 强制 时间0)\n1shutdown /r /fw /f /t 0 ","date":"2022-10-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/windows%E9%85%B7%E5%91%BD%E4%BB%A4--%E7%BD%91%E7%BB%9C%E6%96%B9%E9%9D%A2/","series":[],"tags":["cmd"],"title":"Windows酷命令"},{"categories":["bash"],"content":"zshrc zsh是macos目前默认的交互终端，如果要修改默认标识符有2中办法：\n在～/.zshrc文件中加入行来设置：\n你可以通过设置PS1这个变量，或者设置PROMPT（提示符）、RPROMPT（右侧提示符）来进行自定义。\n可视化例子 苹果推荐：\n1export PS1=\u0026#34;%10F%m%f:%11F%1~%f \\$ \u0026#34; 所以%10Fxxx%f 就是绿色的xxx，%11Fxxx%f就是黄色，其他的颜色我也没有实验所以不清楚， \\$ 就是输入$的意思（这个符号是转义符所以增加了 \\)，%m代表主机名称，%～则是你相对于你的home的位置。\n我喜欢用%B - %b、%T、%~这几个，非常干净简洁的组合。\n转义变量 描述 %T 系统时间（时：分） %* 系统时间（时：分：秒） %D 系统日期（年-月-日） %n 你的用户名 %B - %b 开始到结束使用粗体打印 %~ 你目前的工作目录相对于～的相对路径（可能在某些zsh版本可能造成乱码） %M 计算机的主机名 更完整详细的表格可以看这里，是zsh官方的：https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html\n简洁样式1:\n1export PS1=\u0026#34;%T %B%~%b \\$ \u0026#34; 自定义样式1:\n1#开启颜色 2autoload -U colors \u0026amp;\u0026amp; colors 3#配置提示符模式 4PROMPT=\u0026#34;%T %{$fg_bold[green]%}%1|%~ %{$reset_color%}\\$ \u0026#34; 5#在行末显示 6RPROMPT=\u0026#34;[%{$fg[green]%}%?%{$reset_color%}]\u0026#34; 自定义样式中用到了不一样的颜色语法，更容易看懂（虽然超级乱），而且需要用到autoload，不顾你可以变得简单点，直接用上面学到的一行都配置在ps1里面。\n不过总的来说效果很棒！\n如果有意向高一些更自定义的可以看看这个文档，也许你会想开始用ohmyzsh，我是觉得那个有点花了…… \u0026raquo; Zsh (简体中文) - ArchWiki (archlinux.org) ","date":"2022-09-15","img":"","permalink":"https://cornradio.github.io/hugo/posts/zshrc%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/","series":[],"tags":["个性化"],"title":"自定义终端标识符"},{"categories":[""],"content":"传入参数 在使用linux命令的时候，很多命令都能传入参数比如 ls -l。\n这次使用的例子是我之前写过的me_in_jandan.py，他的功能是通过爬虫爬去取jandan的某一个用户的所有发帖，并返回相关的链接。\n但是这个用户名是写死在py脚本里面的，如果想要修改的话还要修改代码，不太方便，所以需要通过穿参数的方法可以直接临时更换要查询的用户名。\n这里介绍py脚本、shell脚本、bat脚本的参数，非常简单但是是一个小知识点！\npython 命令行参数 1if len(sys.argv) == 2: 2\tTARGET_USER_NAME = sys.argv[1] #传入的第一个参数，设置为用户名 对于python来说，一号是脚本文件名称（很合理），二号开始参数字符串，更好的例子可以看看下面的简单脚本和执行结果：\n1import sys 2print(sys.argv) 1kasusadeMBP:me_in_jandan $ python3 args.py v1 v2 2[\u0026#39;args.py\u0026#39;, \u0026#39;v1\u0026#39;, \u0026#39;v2\u0026#39;] shell参数(.sh文件) 1echo $1 2echo $2 1kasusadeMBP:me_in_jandan $ ./a.sh v1 v2 2v1 3v2 bat参数 1echo %1 2echo %2 ","date":"2022-09-10","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0argv/","series":[],"tags":[""],"title":"传入参数ARGV"},{"categories":null,"content":"官方培训课程 控制台常用快捷键 按键 作用 Ctrl+d 键盘输入结束或退出终端 Ctrl+s 暂停当前程序，暂停后按下任意键恢复运行 Ctrl+z 将当前程序放到后台运行，恢复到前台为命令fg Ctrl+a 将光标移至输入行头，相当于Home键 Ctrl+e 将光标移至输入行末，相当于End键 Ctrl+k 删除从光标所在位置到行末 Alt+Backspace 向前删除一个单词 Shift+PgUp 将终端显示向上滚动 Shift+PgDn 将终端显示向下滚动 一次性创建多个文件 1#实际上是一个简单的shell loop 2$ touch love_{1..10}_shiyanlou.txt 常用通配符 字符 含义 |匹配 0 或多个字符 ? |\t匹配任意一个字符 [list] |\t匹配 list 中的任意单一字符 [^list] |\t匹配 除 list 中的任意单一字符以外的字符 [c1-c2] |\t匹配 c1-c2 中的任意单一字符 如：[0-9][a-z] {string1,string2,\u0026hellip;} |\t匹配 string1 或 string2 (或更多)其一字符串 {c1..c2} |\t匹配 c1-c2 中全部字符 如{1..10} 用户管理 创建用户(默认会让输入密码)\n1sudo adduser \u0026lt;USERNAME\u0026gt; 修改密码\n1sudo passwd \u0026lt;USERNAME\u0026gt; 切换用户\n1su \u0026lt;USERNAME\u0026gt; 查看当前用户是谁\n1whoami 查看用户组\n1cat /etc/group | grep -E \u0026#34;\u0026lt;USERNAME\u0026gt;\u0026#34; 给新建的用户sudo权限(第二条是centos里面的情况。)\n1usermod -G sudo \u0026lt;USERNAME\u0026gt; 2usermod -aG wheel \u0026lt;USERNAME\u0026gt; 删除用户(把它创建时自动创建的用户目录一并删除)\n1sudo deluser lilei --remove-home adduser 和 useradd 的区别是什么\n答：useradd 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 passwd 去设置新用户的密码。adduser 在创建用户的同时，会创建工作目录和密码（提示你设置），做这一系列的操作。其实 useradd、userdel 这类操作更像是一种命令，执行完了就返回。而 adduser 更像是一种程序，需要你输入、确定等一系列操作 查看所有登录的用户（都有谁，都在哪里登录）\n1who 常用东西 配置主机名称 4.1.2 配置主机名称\n使用 Vim 编辑器修改“/etc/hostname”主机名称文件。 把原始主机名称删除后追加你想要起的名字。注意，使用 Vim 编辑器修改主机名称文件后，要在末行模式下执行:wq!命令才能保存并退出文档。 保存并退出文档，然后使用 hostname 命令检查是否修改成功。 不好用的时候试着重新启动\n文件管理 这个图是在使用ls -l时候前部的意义。\nchmod 修改权限。每一个数字代表对应权限\n1rwx|r-x|r-x 2111|101|101 = 755 chown 修改所有者\n1chown \u0026lt;usrname\u0026gt; \u0026lt;filename\u0026gt; 在目录间移动 1#去tmp目录 2cd /tmp 3#去上一层目录 4cd .. 5#去当前用户的home（无参数cd） 6cd 创建文件和目录 touch 可以创建文件/更新文件时间戳。 mkdir 可以创建目录 mkdir -p 可以创建多级目录\n1 mkdir -p father/son/grandson 复制文件/目录 复制文件\n1cp \u0026lt;文件\u0026gt; \u0026lt;目的地\u0026gt; 复制目录\n1cp \u0026lt;要复制的目录\u0026gt; \u0026lt;目的地\u0026gt; 删除文件 1rm \u0026lt;文件\u0026gt; 2rm -r \u0026lt;目录\u0026gt; 3rm -f \u0026lt;文件\u0026gt; (包括有写保护的文件) 4rm -rf \u0026lt;任何东西\u0026gt; 移动和重命名 1mv \u0026lt;原文件\u0026gt; \u0026lt;新位置\u0026gt; 2mv \u0026lt;原文件名\u0026gt; \u0026lt;新文件名字\u0026gt; 批量重命名\n1rename \u0026lt;\u0026#39;正则\u0026#39;\u0026gt; \u0026lt;通配符\u0026gt; linux文件目录结构 shell script 变量 声明变量\n1declare tmp 直接用=赋值同时也可以新建变量,注意不要在等号左右使用空格\n1tmp=helloyou 拿出变量tmp\n1echo $tmp 删除变量tmp\n1unset tmp 环境变量 暂时设置一个环境变量\n1tmp=helloyuoman 2export tmp 永久设置一个环境变量\n1/etc/bashrc shell变量（有的 Linux 没有这个文件） 2/etc/profile 环境变量 3/home/usr/.profile 用户变量 shiyanlou的环境用的是zsh命令行，在根目录有一个.zshrc文件是初始化配置文件。 可以使用这句来把 /home/shiyanlou/mybin 添加到path中\n注意,这里是用的 \u0026raquo; 它意味\u0026quot;追加\u0026quot; , \u0026gt; 是覆盖的意思\n1$ echo \u0026#34;PATH=$PATH:/home/shiyanlou/mybin\u0026#34; \u0026gt;\u0026gt; .zshrc 直接刷新环境变量(无需开新的zsh)两种等效\n1source .zshrc 2. .zshrc 修改已有变量 变量设置方式 说明 ${变量名#匹配字串} 从头向后开始匹配，删除符合匹配字串的最短数据 ${变量名##匹配字串} 从头向后开始匹配，删除符合匹配字串的最长数据 ${变量名%匹配字串} 从尾向前开始匹配，删除符合匹配字串的最短数据 ${变量名%%匹配字串} 从尾向前开始匹配，删除符合匹配字串的最长数据 ${变量名/旧的字串/新的字串} 将符合旧字串的第一个字串替换为新的字串 ${变量名//旧的字串/新的字串} 将符合旧字串的全部字串替换为新的字串 搜索文件 whereis 简单快速\nwhereis 只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。如果想要获得更全面的搜索结果可以使用 locate 命令。\nlocate快而全 使用要先安装,并且更新索引数据库\n1sudo apt-get update 2sudo apt-get install locate 3sudo updatedb find 超强大\n寻找/etc中(包括子目录)名为的 sources.list文件\n1find /etc -name sources.list man 命令中常用按键以及用途 按键 用途 空格键 向下翻一页 / 从上至下搜索某个关键词，如“/linux” ? 从下至上搜索某个关键词，如“?linux” n 定位到下一个搜索到的关键词 N 定位到上一个搜索到的关键词 系统状态 ps aux命令 状态值 意义 R（运行） 进程正在运行或在运行队列中等待。 S（中断） 进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该状态。 D（不可中断） 进程不响应系统异步信号，即便用 kill 命令也不能将其中断。 Z（僵死） 进程已经终止，但进程描述符依然存在, 直到父进程调用 wait4()系统函数后将进程释放。 T（停止） 进程收到停止信号后停止运行。 如果我们在系统终端中执行一个命令后想立即停止它，可以同时按下 Ctrl + C 组合 键（生产环境中比较常用的一个快捷键），这样将立即终止该命令的进程。或者，如果 有些命令在执行时不断地在屏幕上输出信息，影响到后续命令的输入，则可以在执 行命令时在末尾添加上一个 \u0026amp; 符号，这样命令将进入系统后台来执行。\nifconfig 命令 ifconfig 命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]”。使用 ifconfig 命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址）\nuptime 命令 uptime 用于查看系统的负载信息，格式为 uptime。\nuptime 命令真的很棒，它可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息。平均负载值指的是系统在最近 1 分钟、5 分钟、15 分钟内的压力情况（下面加粗的信息部分）；负载值越低越好，尽量不要长期超过 1，在生产环境中不要 超过 5。\nuname -a 查看计算机的系统类型\nfree -h 查看内存\nlast 命令 last 命令用于查看所有系统的登录记录，格式为“last [参数]”。\nhistory 查看历史命令记录。 history -c 清空记录\n切换目录 pwd 命令 pwd 命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。\ncd 命令 cd 命令用于切换工作路径，格式为“cd [目录名称]”。 cd - 命令返回到上一次所处的目录 cd .. 命令进入上级目录 cd 命令切换到当前用户的家目录 cd ~username 切换到其他用户的家目录。 ls 命令 ~ ls -a 查看隐藏文件 ls -l 查看文件详细信息 ls -la 查看隐藏文件以及显示详细 查看文件 cat 命令 用来查看比较小的文本文件\ncat -n 查看文本内容时还想顺便显示行号 tac 可以倒序输出文件.\nmore 命令 1more \u0026lt;文件名\u0026gt; more更加适合阅读长文件\n可以使用\nenter 向下一行 space 向下一屏 Less 比more强多了\nhead 和 tail 默认查看文件头部/尾部的10行。参数 -n 可以控制行数。\ntail可以使用 -f 查看最新一行.\n1head -n 1 \u0026lt;文件名\u0026gt; 2tail -f \u0026lt;文件名\u0026gt; wc 命令 wc 命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。\nfile 命令来查看文件类型\n压缩 tar -czvf 压缩包名称.tar.gz 要打包的目录\n打包-压缩-显示废话-选择目录 x：解包\nc：打包\n搜索 grep 命令用于在文本中执行关键词搜索，并显示匹配的结果，通常和别的命令结合使用，如cat、ps等\n~ ~ -b 将可执行文件（binary）当作文本文件（text）来搜索 -c 仅显示找到的行数 -i 忽略大小写 -n 显示行号 -v 反向选择 — 仅列出没有“关键词”的行 1root@iZ2ze1hf17j9hv44rdpmaaZ:~# grep -n Jan you 22:-rw-r--r-- 1 root root 17 Jan 12 2000 kasusa 33:drwxr-xr-x 2 root root 4096 Jan 30 10:15 mydir 44:drwxr-xr-x 2 root root 4096 Jan 30 10:16 mydir2 55:drwxr-xr-x 2 root root 4096 Jan 30 11:47 ooo 66:-rw-r--r-- 1 root root 0 Jan 30 11:51 you 7 8# you是一个文件。用显示行号的模式在you里面寻找 Jan 关键字 。在控制台里面会有高亮显示 别名 可以用 alias 命令来创建一个属于自己的命令别名，格式为“alias 别名=命令”。\n若要取消一个命令别名，则是用 unalias 命令，格式为“unalias 别名”。\n可以写入.bashrc文件，或者是.zshrc文件，取决于你用的是啥shell，然后就可以永久用这些别名了。\n下面是一个我在macos上面使用的例子：\n1#显示有颜色的用户（不适合白色背景） 2export PS1=\u0026#34;%10F%m%f:%11F%1~%f \\$ \u0026#34; 3#online 4alias f=\u0026#34;top -l 1 | head -n 10 | grep PhysMem\u0026#34; # 查看可用内存 5alias p=\u0026#34;sudo purge\u0026#34; # 整理释放内存 6alias v=\u0026#34;export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890\u0026#34; # 终端设置翻墙 7alias nv=\u0026#34;unset http_proxy; unset https_proxy;\u0026#34; # 终端设置不翻墙 8alias ip=\u0026#34;curl cip.cc\u0026#34; # 查看ip和是否翻墙 9alias py=python3 变量和全局 一般来说，变量都是用大写的。\n有一些 常用的全局变量： HOME 用户的主目录（即家目录） SHELL 用户在使用的 Shell 解释器名称 HISTSIZE 输出的历史命令记录条数 HISTFILESIZE 保存的历史命令记录条数 MAIL 邮件保存路径 LANG 系统语言、语系名称 RANDOM 生成一个随机数字 PS1 Bash 解释器的提示符 PATH 定义解释器搜索用户执行命令的路径 EDITOR 用户默认的文本编辑器 自己创建一个变量/读取它：\n1root@iZ2ze1hf17j9hv44rdpmaaZ:~# MYVAR=\u0026#34;hello\u0026#34; 2root@iZ2ze1hf17j9hv44rdpmaaZ:~# echo \u0026#34;$MYVAR\u0026#34; 3hello 提升位全局变量：\n1root@iZ2ze1hf17j9hv44rdpmaaZ:~# export MYVAR VIM Vim 中常用的命令 命令 作用 dd 删除（剪切）光标所在整行 5dd 删除（剪切）从光标处开始的 5 行 yy 复制光标所在整行 5yy 复制从光标处开始的 5 行 n 显示搜索命令定位到的下一个字符串 N 显示搜索命令定位到的上一个字符串 u 撤销上一步的操作 p 将之前删除（dd）或复制（yy）过的数据粘贴到光标后面 末行模式中可用的命令 要想切换到末行模式，在命令模式中输入一个冒号就可以了。 末行模式主要用于保存或退出文件，以及设置 Vim 编辑器的工作环境，还可以让用户执 行外部的 Linux 命令或跳转到所编写文档的特定行数。\n命令 作用 :w 保存 :q 退出 :q! 强制退出（放弃对文档的修改内容） :wq! 强制保存退出 :set nu 显示行号 :set nonu 不显示行号 :命令 执行该命令 :整数 跳转到该行 :s/one/two 将当前光标所在行的第一个 one 替换成 two :s/one/two/g 将当前光标所在行的所有 one 替换成 two :%s/one/two/g 将全文中的所有 one 替换成 two ?字符串 在文本中从下至上搜索该字符串 /字符串 在文本中从上至下搜索该字符串 append 查看命令的来源：type\n1kasusadeMacBook-Pro:~ $ type who 2who is /usr/bin/who 3kasusadeMacBook-Pro:~ $ type cd 4cd is a shell builtin 输入输出导向：\n其中输出分成 普通输出、错误输出\n1any command \u0026lt; infile 2any command \u0026gt; outfile #Create/overwrite outfile 3any command \u0026gt;\u0026gt; outfile #Append to outfile 4any command 2\u0026gt; errorfile 5#普通输出、错误输出 同时输出到两个文件 6any command \u0026gt; outfile 2\u0026gt; errorfile 7#普通输出、错误输出合并输出到1个文件 8any command \u0026gt;\u0026amp; outfile 9any command \u0026amp;\u0026gt; outfile 一行执行多个命令\n1# 直接按顺序执行 2command1 ; command2 ; command3 3# 按顺序执行但是如果遇到错误会停止 4command1 \u0026amp;\u0026amp; command2 \u0026amp;\u0026amp; command3 5# 按顺序执行但是如果遇到成功的直接退出 6command1 || command2 || command3 引号\n一般来说空格作为分隔符，如果输入中要带空格需要用单or双引号把它扩起来\n单引号：原样输出 双引号：可以在其中加入变量等 反引号（tilda）：反引号之中的字符串会作为变量来执行 1→ echo \u0026#39;The variable HOME has value $HOME\u0026#39; 2The variable HOME has value $HOME 3→ echo \u0026#34;The variable HOME has value $HOME\u0026#34; 4The variable HOME has value /home/smith 5→ echo This year is `date +%Y` 6This year is 2021 7→ echo hello `expr $(date +%Y) + 1` # expr可以用来做运算，但是要在运算符号之间加空格 8This year is 2023 ","date":"2022-08-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E8%87%AA%E5%AD%A6-linux-%E5%91%BD%E4%BB%A4/","series":null,"tags":["ubuntu","命令行"],"title":"自学 Linux 命令"},{"categories":[""],"content":"最近我接到了一个工作，就是把一份很长很长的漏洞扫描报告导入到单位的“测评能手”工具中，但是这个工具不支持导入这个excel表格，所以我要艰难的手动录入。\n表格的长度有16000行，是对主机和数据库的漏扫内容，每一行有用的信息如下：\n主机 漏洞名称 危险等级 漏洞简述 详细描述 xx.xx.xx.xx xx版本过旧 低 \u0026ndash; \u0026ndash; 主机有几百台，包括8个项目所有的主机，每个项目又有一些自己的服务器和DB，他们提供了服务器和DB的ip列表，我的任务就是先把不同的项目的漏洞条目分好，然后通过手工的方式一条一条的导入漏洞\n把excel数据导入python 安装PANDAS 通过pandas可以读取表格的sheet页了：\n首先安装pandas、以及读取需要表格依赖openpyxl库：\n1pip install pandas -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 2pip install openpyxl -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 读取sheet(s) excel读取的时候需要选定sheet页，所以我们需要先获取sheet名称，\n可以通过for x in sheet_names来loop整个excel文件。\n1xpath = input(\u0026#34;输入excel文件地址：\u0026#34;) 2# get all sheet names 3sheep_name = pd.ExcelFile(xpath) 4sheet_names = sheep_name.sheet_names 读取XLSX表格 导入pandas库、读取xlsx文件\n1import pandas as pd 2data = pd.read_excel(\u0026#39;1.xlsx\u0026#39;, sheet_name=\u0026#39;Sheet1\u0026#39;) #选取文件、要读取的sheet名 3print(data) 为了能操作到指定元素，我们需要先了解一下pandas的数据存储格式是什么：\n1data = { 2 \u0026#39;列头1\u0026#39;: [\u0026#39;Akey1\u0026#39;, \u0026#39;Akey2\u0026#39;,\u0026#39;Akey3\u0026#39;], 3 \u0026#39;列头2\u0026#39;: [\u0026#39;Bkey1\u0026#39;,\u0026#39;Bkey2\u0026#39;,\u0026#39;Bkey3\u0026#39;], 4 \u0026#39;列头3\u0026#39;: [np.nan, np.nan, np.nan] 5 } 所以，pandas读取进来的我这个表就是这样的：\n1print(data) 2--- 3 列头1 列头2 列头3 40 Akey1 Bkey1 NaN 51 Akey2 Bkey2 NaN 62 Akey3 Bkey3 NaN 获取第一列的值（通过列头名称选择）：\n1print(data[\u0026#39;列头1\u0026#39;]) 2print(data.列头1) 3--- 40 Akey1 51 Akey2 62 Akey3 获取第一行的值（通过列序号选择）：\n1print(data.iloc[0]) 2--- 3列头1 Akey1 4列头2 Bkey1 5列头3 NaN 获取第一行的、第一列的值：\n1print(data.iloc[0].列头1) 2print(data.iloc[0][0]) 3--- 4Akey1 获取指定列、第一行的值:\n1print(data[\u0026#39;列头1\u0026#39;][0]) 2print(data.列头1[0]) 3--- 4Akey1 获取列头2为指定值的列头1内容：\n这里比较绕，不过无脑复制就好啦！而且这个取数据方式还是比较有用的。\n1datarow = data.loc[data[\u0026#39;列头2\u0026#39;] == \u0026#39;Bkey1\u0026#39;] 2print(datarow.列头1) 3--- 4Akey1 因为我的excel是数据源，我没有对修改excel和保存做深入研究，只有一句保存语句：\n参考 1data.to_excel(excel_writer=\u0026#39;demo.xlsx\u0026#39;, sheet_name=\u0026#39;sheet_1\u0026#39;) 了解pandas 其实仅仅为了处理excel还是没必要了解pandas了，不过网上写的教学不是很清楚都，所以我还是搜索并了解了pandas才弄明白怎么用。\npandas c语言中文网 1# 单维度的资料： 2import pandas as pd 3 4data = pd.Series([20, 10, 15]) 5print(data) 6print(\u0026#39;最大值\u0026#39;, data.max()) 7print(\u0026#39;中位数\u0026#39;, data.median()) 8 9# 所有data*2 10data = data * 2 11print(data) 12 13# 判定所有的data和20相等 14data = data == 20 15print(data) 1# 双维度的资料（表格读取后的效果）： 2------------------- 3 name salary 40 amy 3000 51 jhon 5000 62 bob 4000 7 8# 双维度的资料（自定义字典输入pandas） 9data2 = pd.DataFrame( 10 { 11 \u0026#34;name\u0026#34;: [\u0026#39;amy\u0026#39;, \u0026#39;jhon\u0026#39;, \u0026#39;bob\u0026#39;], 12 \u0026#34;salary\u0026#34;: [3000, 5000, 4000] 13 } 14) 15print(data2) 16# 取得name列内容 17print(data2[\u0026#39;name\u0026#39;]) 18print(\u0026#34;=========\u0026#34;) 19# 取得特定的横向 20print(data2.iloc[0]) 21 22# data = pd.read_excel(\u0026#39;www2.xlsx\u0026#39;, sheet_name=\u0026#39;Sheet1\u0026#39;) 23data[\u0026#34;name\u0026#34;] # 竖着来的 24data.iloc[0] # 横着来的(ilocation - 0,1,2,3,4……) 过滤 但是有时候我们不知道自己想要的是第几行，比如想要知道amy的工资，要怎么办呢？\ndata.loc可以解决这个问题，比方说你可以提取1,2行让表格变成一个更小的表，所以我就可以组合语句，比方说这个地方有10个amy，你接可以拉一个amy表，看看谁的工资比较高。\n1data2.loc[[1,2]] #返回第2,3行变成的小的表格 2data2[\u0026#34;name\u0026#34;]==\u0026#34;amy\u0026#34; #返回amy所在行 3data_amy = data2.loc[ data2[\u0026#34;name\u0026#34;]==\u0026#34;amy\u0026#34; ] #返回amy所在行变成的小的表格 遍历 1#dataInip是我通过想要的ip过滤的漏洞集合， 2#获取了data之后我要导入到自己的数据结构中，vul是我的数据结构的一部分，我会作为log进行打印 3vulcount = len(list(dataInip[\u0026#39;级别\u0026#39;])) 4 5for i in range(vulcount): 6 vul = [dataInip.iloc[i][\u0026#39;漏洞名称\u0026#39;], dataInip.iloc[i][\u0026#39;简述\u0026#39;], mydict[dataInip.iloc[i][\u0026#39;级别\u0026#39;]], dataInip.iloc[i][\u0026#39;描述\u0026#39;], dataInip.iloc[i][\u0026#39;解决方案\u0026#39;]] 7 print(vul) 缓存数据 好久没有用python了我就忘记了怎么存储数据了，只会用最简单的变量了，上网简单的查了一下，可以通过这种方式来新建一个自己需要的数据结构:\n1class ip_and_vuls: 2 ip = \u0026#34;123.456.789.456\u0026#34; 3 vuls = [] 4 5#访问 6p1 = ip_and_vuls 7p1.ip #123.456.789.456 8#唯一的缺点就是用的时候得手动初始化， 用完了最好传出去copy 为什么我不用\tinit`初始化函数呢，因为我懒得学，而且这个操作更灵活（也更容易出现自己发现不了的bug）\n其实如果写代码逻辑够好的话，这种也没问题，但是逻辑如果糟糕一点就是一坨屎了。\nXML 为什么又说到这里呢，因为我最终的目的就是要把表格的内容转换成有效的xml，就可以直接导入而不用手动粘贴了。\npython的各种操作文件是我感觉异常简单的地方，c语言、java开个文件要好几行好复杂，python一行开了，一行输入完成了，一行又关好了。\nxml这里我学的不精，能用为主嘛。\n1import xml.etree.ElementTree as ET 2 3# 获取xml（从外部文件读取） 4tree = ET.parse(\u0026#34;xmlLearn.xml\u0026#34;) 5# 获取xml根元素 6root = tree.getroot() 7# 打印xml（人不可读） 8print(ET.tostring(root)) 9# 为根节点添加值 10root.set(\u0026#34;launched\u0026#34;,\u0026#34;2021-11-18 10:23:15\u0026#34;) 11 12# 为所有的investor节点添加一个属性 id 13id = 1 14for investor in tree.findall(\u0026#39;investor\u0026#39;): 15 investor.set(\u0026#39;id\u0026#39;,str(id)) 16 id += 1 17 18# 删除所有investor节点下的id 19for investor in tree.findall(\u0026#39;investor\u0026#39;): 20 del(investor.attrib[\u0026#39;id\u0026#39;]) 21 id += 1 22 23#添加一个节点investor（！重点！） 24investor2 = ET.Element(\u0026#39;investor\u0026#39;) 25investor2.text = \u0026#39;Karl Amber\u0026#39; 26root.append(investor2) 27 28# 选择特定investor(xpath看不懂) 29investor = root.find(\u0026#34;.//investor[@id=\u0026#39;4\u0026#39;]\u0026#34;) 30print(investor.text) 31 32# 输出到文件（没有缩进） 33tree.write(\u0026#34;xmlLearn.xml\u0026#34;) 这里我放一个图片希望大家看了可以懂，xml是一个嵌套树的结构，investor是root下面的，然而investor可以自己再有一个子节点（只要append就行了），xml是层级分明的文件结构\n不过默认输出有很大的问题啊（我感觉）一是没有缩进，二是不支持中文，我很困扰所以我找到了下面的解决办法，虽然解决了但是要多加两个import了。这两个import都是python自带的，不用安装。\n1import codecs 2from xml.dom import minidom 3 4# 美丽输出xml 5f = open(\u0026#34;money.xml\u0026#34;) 6xmlstr = minidom.parseString(ET.tostring(root)).toprettyxml(indent=\u0026#34; \u0026#34;) 7with codecs.open(\u0026#34;money.xml\u0026#34;, \u0026#34;w\u0026#34;, \u0026#34;utf-8\u0026#34;) as f: 8 f.write(xmlstr) 对于我来说，我就只要增加节点，给节点加内容、最后按照等保标准导入格式输出一个xml就好了\n附件 我的成品（私人库主要是有点敏感信息所以就暂时不公开了）kasusa/exceltodata: \u0026ndash; (github.com) 等级保护漏洞导入用xml格式：\n1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; 2\u0026lt;REPORT\u0026gt; 3\u0026lt;SCANINFO TOOLNAME=\u0026#34;XXXX\u0026#34; MAKERS=\u0026#34;XXXX\u0026#34; POLICY=\u0026#34;XXXX\u0026#34; SCANTASK=\u0026#34;\u0026#34; SCANTIME=\u0026#34;\u0026#34; FILE_ID=\u0026#34;\u0026#34; /\u0026gt; 4\u0026lt;!-- TOOLNAME=\u0026#34;扫描工具名称\u0026#34; MAKERS=\u0026#34;工具厂商名称\u0026#34; POLICY=\u0026#34;策略版本\u0026#34; SCANTASK=\u0026#34;任务名称\u0026#34; SCANTIME=\u0026#34;扫描时间\u0026#34; FILE_ID=\u0026#34;文件ID(没啥大用处其实)\u0026#34; --\u0026gt; 5 6\u0026lt;SCANDATA TYPE=\u0026#34;OS\u0026#34;\u0026gt; 7\t\u0026lt;HOST IP=\u0026#34;192.168.0.100\u0026#34;\u0026gt; \u0026lt;!-- *IP地址： --\u0026gt; 8\t\u0026lt;OSTYPE\u0026gt;WINDOWS\u0026lt;/OSTYPE\u0026gt; \u0026lt;!-- 操作系统类型：Windows、Linux、.... --\u0026gt; 9\t\u0026lt;OSVERSION\u0026gt;Windows Server 2008\u0026lt;/OSVERSION\u0026gt;\u0026lt;!-- 操作系统版本：Windows 2008、RedHat 9、.... --\u0026gt; 10\t\u0026lt;DATA\u0026gt; 11\t\u0026lt;VULNERABLITY\u0026gt; 12\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Microsoft Windows Remote Desktop Protocol Server Man-in-the-Middle Weakness]]\u0026gt;\u0026lt;/NAME\u0026gt;\u0026lt;!-- *漏洞名称： --\u0026gt; 13\t\u0026lt;NO CVE=\u0026#34;CVE-2005-1794\u0026#34; CNVD=\u0026#34;CNVD-2005-1794\u0026#34; MS=\u0026#34;MS07-111\u0026#34; OTHER=\u0026#34;xxxx\u0026#34; /\u0026gt; 14\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34;,没有编号可用NONE标识 --\u0026gt; 15\t\u0026lt;VULTYPE\u0026gt;缓存区溢出\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、中间件漏洞、其他等等 --\u0026gt; 16\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 17\t\u0026lt;PORT\u0026gt;3389\u0026lt;/PORT\u0026gt;\u0026lt;!-- 端口： --\u0026gt; 18\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt;\u0026lt;!-- *风险情况：高、中、低、信息 --\u0026gt; 19\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt;\u0026lt;!-- 漏洞简述： --\u0026gt; 20\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt;\u0026lt;!-- *漏洞描述 --\u0026gt; 21\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt;\u0026lt;!-- *解决方案/整改意见 --\u0026gt; 22\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 23\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t\u0026lt;!-- 参考信息 --\u0026gt; 24\t\u0026lt;/VULNERABLITY\u0026gt; 25\t\u0026lt;VULNERABLITY\u0026gt; 26\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Terminal Services Encryption Level is Medium or Low]]\u0026gt;\u0026lt;/NAME\u0026gt;\u0026lt;!-- *漏洞名称： --\u0026gt; 27\t\u0026lt;NO CVE=\u0026#34;CVE-2005-1794\u0026#34; CNVD=\u0026#34;CNVD-2005-1794\u0026#34; MS=\u0026#34;MS07-111\u0026#34; OTHER=\u0026#34;xxxx\u0026#34; /\u0026gt; 28\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 29\t\u0026lt;VULTYPE\u0026gt;设置不当\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、中间件漏洞、其他等等 --\u0026gt; 30\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 31\t\u0026lt;PORT\u0026gt;3389\u0026lt;/PORT\u0026gt; 32\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt;\u0026gt; 33\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[The remote host is using weak cryptography.]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt; 34\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote Terminal Services service is not configured to use strong cryptography.xxxxxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt; 35\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Change RDP encryption level to one of :xxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/SOLUTION\u0026gt; 36\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt; 37\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[The terminal services encryption level is set to :]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t38\t\u0026lt;/VULNERABLITY\u0026gt; 39\t\u0026lt;/DATA\u0026gt; 40\t\u0026lt;/HOST\u0026gt; 41\t42\t\u0026lt;HOST IP=\u0026#34;102.168.20.20\u0026#34;\u0026gt; 43\t\u0026lt;OSTYPE\u0026gt;LINUX\u0026lt;/OSTYPE\u0026gt; 44\t\u0026lt;OSVERSION\u0026gt;RED HAT 9\u0026lt;/OSVERSION\u0026gt; 45\t\u0026lt;DATA\u0026gt; 46\t\u0026lt;VULNERABLITY\u0026gt; 47\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Microsoft Windows Remote Desktop Protocol Server Man-in-the-Middle Weakness]]\u0026gt;\u0026lt;/NAME\u0026gt; 48\t\u0026lt;NO CVE=\u0026#34;CVE-2005-1794\u0026#34; CNVD=\u0026#34;CNVD-2005-1794\u0026#34; MS=\u0026#34;MS07-111\u0026#34; OTHER=\u0026#34;xxxx\u0026#34; /\u0026gt; 49\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 50\t\u0026lt;VULTYPE\u0026gt;缓存区溢出\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、中间件漏洞、其他等等 --\u0026gt; 51\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 52\t\u0026lt;PORT\u0026gt;3389\u0026lt;/PORT\u0026gt; 53\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt; 54\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt; 55\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt; 56\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt; 57\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt; 58\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t59\t\u0026lt;/VULNERABLITY\u0026gt; 60\t\u0026lt;VULNERABLITY\u0026gt; 61\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Terminal Services Encryption Level is Medium or Low]]\u0026gt;\u0026lt;/NAME\u0026gt; 62\t\u0026lt;NO CVE=\u0026#34;CVE-2005-1794\u0026#34; CNVD=\u0026#34;CNVD-2005-1794\u0026#34; MS=\u0026#34;MS07-111\u0026#34; OTHER=\u0026#34;xxxx\u0026#34; /\u0026gt; 63\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 64\t\u0026lt;VULTYPE\u0026gt;设置不当\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、中间件漏洞、其他等等 --\u0026gt; 65\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 66\t\u0026lt;PORT\u0026gt;3389\u0026lt;/PORT\u0026gt; 67\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt; 68\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[The remote host is using weak cryptography.]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt; 69\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote Terminal Services service is not configured to use strong cryptography.xxxxxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt; 70\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Change RDP encryption level to one of :xxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/SOLUTION\u0026gt; 71\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt; 72\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[The terminal services encryption level is set to :]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t73\t\u0026lt;/VULNERABLITY\u0026gt; 74\t\u0026lt;/DATA\u0026gt; 75\t\u0026lt;/HOST\u0026gt; 76\u0026lt;/SCANDATA\u0026gt; 77 78\u0026lt;SCANDATA TYPE=\u0026#34;DB\u0026#34;\u0026gt; 79\t\u0026lt;HOST IP=\u0026#34;102.168.20.20\u0026#34;\u0026gt; 80\t\u0026lt;PORT\u0026gt;1433\u0026lt;/PORT\u0026gt; 81\t\u0026lt;DBTYPE\u0026gt;Microsoft SQL Server\u0026lt;/DBTYPE\u0026gt; 82\t\u0026lt;DBVERSION\u0026gt;Microsoft SQL Server 2008 R2\u0026lt;/DBVERSION\u0026gt; 83\t\u0026lt;DATA\u0026gt; 84\t\u0026lt;VULNERABLITY\u0026gt; 85\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Easily-guessed password]]\u0026gt;\u0026lt;/NAME\u0026gt;\u0026lt;!-- *漏洞名称： --\u0026gt; 86\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;NONE\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 87\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 88\t\u0026lt;VULTYPE\u0026gt;弱口令\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、弱口令、其他等等 --\u0026gt; 89\t\u0026lt;RISK\u0026gt;高\u0026lt;/RISK\u0026gt;\u0026lt;!-- *风险情况：高、中、低、信息 --\u0026gt; 90\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt;\u0026lt;!-- 漏洞简述： --\u0026gt; 91\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt;\u0026lt;!-- *漏洞描述 --\u0026gt; 92\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt;\u0026lt;!-- *解决方案/整改意见 --\u0026gt; 93\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 94\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t\u0026lt;!-- 参考信息 --\u0026gt; 95\t\u0026lt;/VULNERABLITY\u0026gt; 96\t\u0026lt;VULNERABLITY\u0026gt; 97\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Terminal Services Encryption Level is Medium or Low]]\u0026gt;\u0026lt;/NAME\u0026gt;\u0026lt;!-- *漏洞名称： --\u0026gt; 98\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;MS13-112\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 99\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 100\t\u0026lt;VULTYPE\u0026gt;设置不当\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、弱口令、其他等等 --\u0026gt; 101\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt; 102\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[The remote host is using weak cryptography.]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt; 103\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote Terminal Services service is not configured to use strong cryptography.xxxxxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt; 104\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Change RDP encryption level to one of :xxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/SOLUTION\u0026gt; 105\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 106\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[The terminal services encryption level is set to :]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t107\t\u0026lt;/VULNERABLITY\u0026gt; 108\t\u0026lt;/DATA\u0026gt; 109\t\u0026lt;/HOST\u0026gt; 110\t111\t\u0026lt;HOST IP=\u0026#34;102.168.100.11\u0026#34;\u0026gt; 112\t\u0026lt;PORT\u0026gt;1433\u0026lt;/PORT\u0026gt; 113\t\u0026lt;DBTYPE\u0026gt;Microsoft SQL Server\u0026lt;/DBTYPE\u0026gt; 114\t\u0026lt;DBVERSION\u0026gt;Microsoft SQL Server 2008 R2\u0026lt;/DBVERSION\u0026gt; 115\t\u0026lt;DATA\u0026gt; 116\t\u0026lt;VULNERABLITY\u0026gt; 117\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Easily-guessed password]]\u0026gt;\u0026lt;/NAME\u0026gt; \u0026lt;!-- *漏洞名称： --\u0026gt; 118\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;NONE\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 119\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 120\t\u0026lt;VULTYPE\u0026gt;弱口令\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、弱口令、其他等等 --\u0026gt; 121\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 122\t\u0026lt;RISK\u0026gt;高\u0026lt;/RISK\u0026gt;\u0026lt;!-- *风险情况：高、中、低、信息 --\u0026gt; 123\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt;\u0026lt;!-- 漏洞简述： --\u0026gt; 124\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt;\u0026lt;!-- *漏洞描述 --\u0026gt; 125\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt;\u0026lt;!-- *解决方案/整改意见 --\u0026gt; 126\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 127\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t\u0026lt;!-- 参考信息 --\u0026gt; 128\t\u0026lt;/VULNERABLITY\u0026gt; 129\t\u0026lt;VULNERABLITY\u0026gt; 130\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[Terminal Services Encryption Level is Medium or Low]]\u0026gt;\u0026lt;/NAME\u0026gt; 131\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;MS13-112\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 132\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 133\t\u0026lt;VULTYPE\u0026gt;弱口令\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如缓冲区溢出、设置不当、弱口令、其他等等 --\u0026gt; 134\t\u0026lt;CVSS\u0026gt;6.4\u0026lt;/CVSS\u0026gt;\u0026lt;!-- 通用漏洞评分： --\u0026gt; 135\t\u0026lt;RISK\u0026gt;中\u0026lt;/RISK\u0026gt; 136\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[The remote host is using weak cryptography.]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt; 137\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote Terminal Services service is not configured to use strong cryptography.xxxxxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt; 138\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Change RDP encryption level to one of :xxxxxxxxxxxxxxxxxx]]\u0026gt;\u0026lt;/SOLUTION\u0026gt; 139\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 140\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[The terminal services encryption level is set to :]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t141\t\u0026lt;/VULNERABLITY\u0026gt; 142\t\u0026lt;/DATA\u0026gt; 143\t\u0026lt;/HOST\u0026gt; 144\u0026lt;/SCANDATA\u0026gt; 145 146\u0026lt;SCANDATA TYPE=\u0026#34;WEB\u0026#34;\u0026gt; 147\t\u0026lt;HOST WEB=\u0026#34;HTTP:\\\\WWW.TEST.COM\u0026#34;\u0026gt; 148\t\u0026lt;WEBSERVERBANNER\u0026gt;Apache tomcat\u0026lt;/WEBSERVERBANNER\u0026gt;\u0026lt;!-- Web Server Banner信息， --\u0026gt; 149\t\u0026lt;SERVERVERSION\u0026gt;Microsoft Windows 2008 R2\u0026lt;/SERVERVERSION\u0026gt;\u0026lt;!-- 服务器信息 --\u0026gt; 150\t\u0026lt;TECHNOLOGIES\u0026gt;JSP\u0026lt;/TECHNOLOGIES\u0026gt;\u0026lt;!-- 使用语言 --\u0026gt; 151\t\u0026lt;DATA\u0026gt;\t152\t\u0026lt;VULNERABLITY\u0026gt; 153\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[SQL注入漏洞]]\u0026gt;\u0026lt;/NAME\u0026gt; \u0026lt;!-- *漏洞名称： --\u0026gt; 154\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;NONE\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 155\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 156\t\u0026lt;VULTYPE\u0026gt;注入类\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如注入类、跨站脚本类、信息泄露类、弱口令/默认口令类、系统/服务漏洞类、权限/配置设置不当类、产品漏洞类、其他类 --\u0026gt; 157\t\u0026lt;RISK\u0026gt;高\u0026lt;/RISK\u0026gt;\u0026lt;!-- *风险情况：高、中、低、信息 --\u0026gt; 158\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt;\u0026lt;!-- 漏洞简述： --\u0026gt; 159\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt;\u0026lt;!-- *漏洞描述 --\u0026gt; 160\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt;\u0026lt;!-- *解决方案/整改意见 --\u0026gt; 161\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 162\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t\u0026lt;!-- 参考信息 --\u0026gt; 163\t\u0026lt;DETAILS\u0026gt; 164\t\u0026lt;URL URL=\u0026#34;HTTP:\\\\WWW.TEST.COM?DETAILS=100\u0026#34;\u0026gt;\u0026lt;!-- *存在漏洞的url --\u0026gt; 165\t\u0026lt;TYPE\u0026gt;STRING\u0026lt;/TYPE\u0026gt;\u0026lt;!-- 类型（string类型、int类型、search类型、反射性、存储型等等） --\u0026gt; 166\t\u0026lt;PARAMETER\u0026gt;\u0026lt;![CDATA[DETAILS=100\u0026#39; AND \u0026#39;1\u0026#39;=\u0026#39;1]]\u0026gt;\u0026lt;/PARAMETER\u0026gt;\u0026lt;!-- 存在漏洞的参数（可带测试脚本） --\u0026gt; 167\t\u0026lt;REQUEST\u0026gt;\u0026lt;![CDATA[GET /preSysApp/global/js/validate/depends/prototype.js HTTP/1.1 168\tPragma: no-cache 169\tCache-Control: no-cache]]\u0026gt; 170\t\u0026lt;/REQUEST\u0026gt;\u0026lt;!-- 测试发送的request --\u0026gt; 171\t\u0026lt;RESPONSE\u0026gt;\u0026lt;!-- 接收的request --\u0026gt; 172\t\u0026lt;![CDATA[ 173\txxxxxxxxxxxxxxxxxx 174\t]]\u0026gt; 175\t\u0026lt;/RESPONSE\u0026gt; 176\t\u0026lt;/URL\u0026gt; 177\t\u0026lt;URL URL=\u0026#34;HTTP:\\\\WWW.TEST.COM?id=120\u0026#34;\u0026gt;\u0026lt;!-- *存在漏洞的url --\u0026gt; 178\t\u0026lt;TYPE\u0026gt;INT\u0026lt;/TYPE\u0026gt;\u0026lt;!-- 类型（string类型、int类型、search类型、反射性、存储型等等） --\u0026gt; 179\t\u0026lt;PARAMETER\u0026gt;\u0026lt;![CDATA[ID=100 AND 1=1]]\u0026gt;\u0026lt;/PARAMETER\u0026gt;\u0026lt;!-- 存在漏洞的参数（可带测试脚本） --\u0026gt; 180\t\u0026lt;REQUEST\u0026gt;\u0026lt;![CDATA[GET /preSysApp/global/js/validate/depends/prototype.js HTTP/1.1 181\tPragma: no-cache 182\tCache-Control: no-cache]]\u0026gt; 183\t\u0026lt;/REQUEST\u0026gt;\u0026lt;!-- 测试发送的request --\u0026gt; 184\t\u0026lt;RESPONSE\u0026gt; 185\t\u0026lt;![CDATA[xxxxxxxxxxxxxxxxxx]]\u0026gt; 186\t\u0026lt;/RESPONSE\u0026gt;\u0026lt;!-- 接收的request --\u0026gt; 187\t\u0026lt;/URL\u0026gt; 188\t\u0026lt;/DETAILS\u0026gt; 189\t\u0026lt;/VULNERABLITY\u0026gt;\t190\t\u0026lt;VULNERABLITY\u0026gt; 191\t\u0026lt;NAME\u0026gt;\u0026lt;![CDATA[跨站脚本]]\u0026gt;\u0026lt;/NAME\u0026gt; \u0026lt;!-- *漏洞名称： --\u0026gt; 192\t\u0026lt;NO CVE=\u0026#34;NONE\u0026#34; CNVD=\u0026#34;NONE\u0026#34; MS=\u0026#34;NONE\u0026#34; OTHER=\u0026#34;NONE\u0026#34; /\u0026gt; 193\t\u0026lt;!-- CVE=\u0026#34;CVE编号\u0026#34; CNVD=\u0026#34;CNVD编号\u0026#34; MS=\u0026#34;微软编号\u0026#34; OTHER=\u0026#34;其他编号\u0026#34; --\u0026gt; 194\t\u0026lt;VULTYPE\u0026gt;跨站脚本类\u0026lt;/VULTYPE\u0026gt;\u0026lt;!-- 漏洞类型：如注入类、跨站脚本类、信息泄露类、弱口令/默认口令类、系统/服务漏洞类、权限/配置设置不当类、产品漏洞类、其他类 --\u0026gt; 195\t\u0026lt;RISK\u0026gt;高\u0026lt;/RISK\u0026gt;\u0026lt;!-- *风险情况：高、中、低、信息 --\u0026gt; 196\t\u0026lt;SYNOPSIS\u0026gt;\u0026lt;![CDATA[It may be possible to get access to the remote host]]\u0026gt;\u0026lt;/SYNOPSIS\u0026gt;\u0026lt;!-- 漏洞简述： --\u0026gt; 197\t\u0026lt;DESCRIPTION\u0026gt;\u0026lt;![CDATA[The remote version of the Remote Desktop Protocol Server (TerminalService) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP]]\u0026gt;\u0026lt;/DESCRIPTION\u0026gt;\u0026lt;!-- *漏洞描述 --\u0026gt; 198\t\u0026lt;SOLUTION\u0026gt;\u0026lt;![CDATA[- Force the use of SSL as a transport layer for this service if supported, or/and]]\u0026gt;\u0026lt;/SOLUTION\u0026gt;\u0026lt;!-- *解决方案/整改意见 --\u0026gt; 199\t\u0026lt;VALIDATE\u0026gt;\u0026lt;![CDATA[XXXXX]]\u0026gt;\u0026lt;/VALIDATE\u0026gt;\u0026lt;!-- 证据 --\u0026gt; 200\t\u0026lt;REFERENCE\u0026gt;\u0026lt;![CDATA[http://www.oxid.it/downloads/rdp-gbu.pdf]]\u0026gt;\u0026lt;/REFERENCE\u0026gt;\t\u0026lt;!-- 参考信息 --\u0026gt; 201\t\u0026lt;DETAILS\u0026gt; 202\t\u0026lt;URL URL=\u0026#34;HTTP:\\\\WWW.TEST.COM?DETAILS=100\u0026#34;\u0026gt;\u0026lt;!-- *存在漏洞的url --\u0026gt; 203\t\u0026lt;TYPE\u0026gt;反射性\u0026lt;/TYPE\u0026gt;\u0026lt;!-- 类型（string类型、int类型、search类型、反射性、存储型等等） --\u0026gt; 204\t\u0026lt;PARAMETER\u0026gt;\u0026lt;![CDATA[DETAILS=100%20%3C%73%63%72%69%70%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E]]\u0026gt;\u0026lt;/PARAMETER\u0026gt;\u0026lt;!-- 存在漏洞的参数（可带测试脚本） --\u0026gt; 205\t\u0026lt;REQUEST\u0026gt;\u0026lt;![CDATA[GET /preSysApp/global/js/validate/depends/prototype.js HTTP/1.1 206\tPragma: no-cache 207\tCache-Control: no-cache]]\u0026gt; 208\t\u0026lt;/REQUEST\u0026gt;\u0026lt;!-- 测试发送的request --\u0026gt; 209\t\u0026lt;RESPONSE\u0026gt;\u0026lt;!-- 接收的request --\u0026gt; 210\t\u0026lt;![CDATA[xxxxxxxxxxxxxxxxxx]]\u0026gt; 211\t\u0026lt;/RESPONSE\u0026gt; 212\t\u0026lt;/URL\u0026gt; 213\t\u0026lt;/DETAILS\u0026gt; 214\t\u0026lt;/VULNERABLITY\u0026gt; 215\t\u0026lt;/DATA\u0026gt; 216\t\u0026lt;/HOST\u0026gt; 217\u0026lt;/SCANDATA\u0026gt; 218\u0026lt;/REPORT\u0026gt; python能提取excel还能处理，我就很开心了，还学到了xml相关的内容。\n今天花了5小时把上面所有东东从0学完，到直接把工具做好我感觉也够神的了我）\n","date":"2022-08-08","img":"","permalink":"https://cornradio.github.io/hugo/posts/python-xml%E5%92%8C%E8%AF%BB%E5%8F%96excel/","series":[],"tags":["python"],"title":"Python Xml和读取excel"},{"categories":[""],"content":"参考：\nhttps://wpguru.co.uk/2014/02/how-to-ssh-into-a-virtual-machine-in-parallels-desktop/ https://blog.csdn.net/m0_46982383/article/details/125863742 使用ssh链接parallels虚拟机的kali linux系统 本教程基于PD17，m1 MacBook。\n首先你也直接在pd虚拟机中直接下载和安装kali，而不用自己下载镜像来安装。\n修改sshd配置 默认情况下kali的sshd配置是无法被ssh的，我们需要首先修改sshd配置然后重新加载。\n1sudo vim /etc/ssh/sshd_config 2# 搜索以下关键词然后取消备注/改成yes 3PermitRootLogin yes 4PasswordAuthentication yes 修改后需要重启服务，加载刚更新配置：\n1/etc/init.d/ssh restart 查看虚拟机的ip 1ifconfig 使用ssh工具链接虚拟机 1ssh parallels@10.221.55.4 parallels 是通过pd安装虚拟机自己创建的用户名，有root权限 接下来你就可以正常远程进入虚拟机了，这样可以使用macOS的cmd+v粘贴之类的快捷键。\n","date":"2022-08-06","img":"","permalink":"https://cornradio.github.io/hugo/posts/sshtoparallels/","series":[],"tags":["Mac"],"title":"Ssh to Parallels （Kali）"},{"categories":[""],"content":" 链接: https://pan.baidu.com/s/1MAu0cTODwGCIXydUK9zt5Q?pwd=t8q4 提取码: t8q4\n也许存在会导致spotlight不能用的问题，可以尝试使用文中提到的下载链接，那个版本好像不会导致spotlight问题。\nmac词典 首先我可能需要简单介绍一下mac系统的大杀器：原生词典！ 图标是这样的：\n你还需要开启这个功能（三指触摸或者重按触控板查询）\n这个功能可以直接打开terminal中的链接、查询生词。\n使用体验差不多是这样：\n增加字典 打开词典应用，然后通过快捷键 command + ， 开启偏好设置：\n在这里你可以选择一些Apple提供的词典，比较推荐把列表底部的New Oxford、Thesaurus等都选择上。\n但是有时候会遇到这种问题：词典不说人话\n我在这里推荐用柯林斯词典的扩充包，我觉得这个词典说话很人性，很容易理解，比如下面就是通过Collins字典的解释，有例句，并且说人话！\n安装Collions 不过这个字典Apple不提供安装，网上的教程多是一些语言专业人士弄的教程，还要自己转换词典，我也不需要那么多词典，我只要我的柯林斯！于是我在互联网上面找到了这个！（选择mac版然后立即下载，下载后是一个压缩包。\n柯林斯词典mac版 下载完毕后，首先打开词典-文件-打开词典文件夹\n然后把整个压缩包解压后丢进去\n最后在词典中勾选上新出现的柯林斯！（勾选前你可能想要先看一下下一章节）\n更改字典的内置样式和字典名称 你可以下载我现成的打包，下载位置在文章的顶部\n虽然你通过上面的步骤已经可以用Collins了但是他默认的样式真的很丑。\n首先字典名称很长，在小号查词窗口上面看着很占地方，然后就是字典的上古配色让人感觉非常难受，不过好在可以修改。\n在我们刚刚解压出来的文件夹中有这两个文件\nplist中可以修改柯林斯字典的名称，比如我把Bundle display name改成Collins就不会显得太长了 在css中我吧所有的background-color都改成了没有，这样就没有丑陋色块了！ ","date":"2022-07-27","img":"","permalink":"https://cornradio.github.io/hugo/posts/collionsdictformac/","series":[],"tags":[""],"title":"柯林斯词典 on MAC"},{"categories":[""],"content":" 本篇内容全程推荐使用chrome而不是safari，safari还是没有办法进入的。\nnessus 是一款漏洞扫描软件，在我开始使用mac之后，我尝试安装并使用它，但是出现了一些问题，下面来记录下：\n正常开启关闭的方法 最下面有一个nessus按钮，进去，解锁，然后就可以开启/停止nessus了。 nessus在不扫描的时候几乎没有负载，所以开机启动我也留着了。\n开启后，nessus会在此处运行：https://localhost:8834/#/ 问题描述 在使用一小段时间之后，你会发现，自己无法通过任何浏览器进入nessus界面了，chrome提示如下：\n您的连接不是私密连接 localhost 通常会使用加密技术来保护您的信息。Chrome 此次尝试连接到 localhost 时，该网站发回了异常的错误凭据。这可能是因为有攻击者在试图冒充 localhost，或者 Wi-Fi 登录屏幕中断了此次连接。请放心，您的信息仍然是安全的，因为 Chrome 尚未进行任何数据交换便停止了连接。\n您目前无法访问localhost，因为此网站发送了Chrome无法处理的杂乱凭据。网络错误和攻击通常是暂时的，因此，此网页稍后可能会恢复正常。\n解决办法 在chrome这个错误界面直接输入： thisisunsafe ，然后chrome就明确你知道自己在做什么，然后放行你。\n你要打开这个链接(可能需要先登陆):https://localhost:8834/getcert ， 会下载一个证书文件，接下来我们要手动信任这个证书\n先打开“钥匙串访问”程序，然后双击这个证书文件，证书会自动安装，但是此时是不信任的状态（有个叉叉）\n接下来我们需要双击这个证书，然后点开信任菜单栏，并且勾选始终信任，修改后系统会要求sudo权限\n结束 这样应该就能正常访问了，以后也不会有问题了。\n主要学到了一招就是 thisisunsafe 大概能用在任何chrome信任失效界面上，可以去强制访问。\n不过我还是不理解，为啥电脑要不信任localhost……\nfor win （hsts错误） 前段时间还在win机器上遇到了hsts问题，操作也在这里讲一下吧：\n首先打开chrome这个设置界面 chrome://net-internals/#hsts 然后滚动到最下方，输入localhost，点击delete。\n再次开启nessus，点击高级，应该就可以进入nessus了。\n","date":"2022-07-05","img":"","permalink":"https://cornradio.github.io/hugo/posts/nessus-%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-for-mac/","series":[],"tags":[""],"title":"Nessus 无法访问的解决办法 for Mac"},{"categories":[""],"content":"mac必装软件 粘贴版历史记录软件（AppleStore） 快捷键设置软件（可以设置快捷键打开任何安装的应用）（AppleStore） 解压软件（如果碰到了rar之类的，就需要第三方软件了）（AppleStore） 滚轮优化软件\n在macos中，你的触摸板和鼠标滚轮的方向只能是一样的，这让我非常不习惯，我比较喜欢触摸板反转，但是滚轮是正常方向。\nScroll Reverser Mos ⬅️ 我更喜欢这个，还能让鼠标滚动更平滑 clashX 微软远程桌面（RDP） microsoft-remote-desktop （预览版免费，还支持m1） VLC mac的Quicktime支持格式不全，所以我有装这个。(视频软件我其实更想要mpv但是mpv还么有原生支持m1的版本\u0026ndash;要自己编译啥的，坑挺多的) Snipaste 截图软件\u0026ndash;平常我都用自带的，但是有的时候需要钉住图片或者需要从剪切板预览的时候他还是很好用的。 mac常备脚本 Mac 的网络硬件地址更换：\n1sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z 2sudo ifconfig en0 ether 2d:d4:e8:f8:e0:c6 在重启之后，mac会恢复成硬件默认值，不过我还是推荐备份一下\n～/.zshrc\n1# path加入ptyhon pip 2export PATH=~/bin:/Users/kasusa/Library/Python/3.8/bin:$PATH 3# 增加ll功能 4alias ll=\u0026#39;ls -lG\u0026#39; 5#显示有颜色的用户（不适合白色背景） 6export PS1=\u0026#34;%10F%m%f:%11F%1~%f \\$ \u0026#34; 包管理器 https://brew.sh/ 这是homebrew，可以像是apt一样用，但是可能需要先给shell挂代理。\n","date":"2022-07-02","img":"","permalink":"https://cornradio.github.io/hugo/posts/macos_essencials/","series":[],"tags":[""],"title":"Mac Essencials"},{"categories":[""],"content":"mac自带了python，但是竟然不带pip，这篇文章将会教你如何在mac上面安装pip包管理器。\n这个文章是在mac上面写的哦，因为环境很难搞所以也蛮折腾的，不过这也是乐趣～ 本文章用mac（m1）编写，环境可能与intel版mac不同，请提前注意这一点。\npip安装脚本获取 https://bootstrap.pypa.io/pip 使用浏览器访问这个地址，应该有一个 get-pip.py 脚本，由于我不熟悉crul之类的工具，我选择手动复制下来。\ncmd + A ， cmd + C ， 复制全文，存到一边一会儿要用。 pip脚本的安装 使用vim新建一个pip.py脚本文件，内容就是上面网页中的内容，你可以选择任何位置，不知道的话就放到家目录吧（因为很好找）,然后，使用python3运行这个脚本文件\n图片右上角是我新创建的文件 pip.py，他的内容是从网页复制的\n配置环境变量 脚本用黄色高量字体提醒了我们：\nWARNING: The scripts pip, pip3, pip3.10 and pip3.8 are installed in \u0026lsquo;/Users/kasusa/Library/Python/3.8/bin\u0026rsquo; which is not on PATH.\npip安装的位置不在path中，所以我们要手动的加个环境变量。\n首先打开用户根目录，然后新建个.zshrc文件，zsh是mac的terminal的默认shell，.zshrc是zsh的配置文件，但是默认情况并不存在！\n新建之后在添加这一行即可:\n1export PATH=~/bin:/Users/kasusa/Library/Python/3.8/bin:$PATH 这个例子中包含了三个path(使用冒号分割）：\n~/bin ~/Library/Python/3.8/bin $PATH 他们分别是：\n我的自设path目录 python pip目录 从系统继承的path 注：~是/Users/kasusa的缩写\n使配置生效 有两种方式使配置生效：\n重新开启一个terminal 执行命令 1source ~/.zshrc 成功结果展示 ","date":"2022-06-25","img":"","permalink":"https://cornradio.github.io/hugo/posts/postspiponmac/","series":[],"tags":[""],"title":"Pip on Mac"},{"categories":[""],"content":"OFFICE系列在最近增加了黑色模式支持，对于word来说非常好，他有做颜色映射，可以让一个本来是白色的文档变成黑色之后颜色也不显得奇怪。（word是一个“所见即所得”软件，为了保证打印效果和视觉效果一致，一直都不愿意加入黑色模式…\n但是Excel就没有那么走运了，他的黑色模式只做了一半… 看看下图你就懂了，后面我用一种比较基础的方式教你怎么把他变成真正的“黑色模式”！ 原理 本质上我们就是吧单元格颜色、文字颜色、线框颜色都修改掉。 缺点是影响打印，并且不是很自动化。 但是优点是你可以有非常高度的自定义效果！\n选中全文 背景颜色 文本颜色 线框颜色 操作步骤 选中全文\n背景颜色\n文本颜色\n线框颜色\n用宏来操作 当然每个表格这么改一下,命都没了。\n所以我还是推荐用宏来修改，一个表格点一下按钮就修改好了！\n宏的话，自己录制比较好（更加安全也更加方便），但是你也可以用我的宏(是录制转换的，所以有很多没用的代码)：\n1Sub darkmode() 2 Cells.Select 3 With Selection.Interior 4 .Pattern = xlSolid 5 .PatternColorIndex = xlAutomatic 6 .ThemeColor = xlThemeColorLight1 7 .TintAndShade = 0.149998474074526 8 .PatternTintAndShade = 0 9 End With 10 With Selection.Font 11 .ThemeColor = xlThemeColorAccent1 12 .TintAndShade = 0.799981688894314 13 End With 14 Cells.Select 15 Selection.Borders(xlDiagonalDown).LineStyle = xlNone 16 Selection.Borders(xlDiagonalUp).LineStyle = xlNone 17 With Selection.Borders(xlEdgeLeft) 18 .LineStyle = xlContinuous 19 .ThemeColor = 2 20 .TintAndShade = 0.349986266670736 21 .Weight = xlThin 22 End With 23 With Selection.Borders(xlEdgeTop) 24 .LineStyle = xlContinuous 25 .ThemeColor = 2 26 .TintAndShade = 0.349986266670736 27 .Weight = xlThin 28 End With 29 With Selection.Borders(xlEdgeBottom) 30 .LineStyle = xlContinuous 31 .ThemeColor = 2 32 .TintAndShade = 0.349986266670736 33 .Weight = xlThin 34 End With 35 With Selection.Borders(xlEdgeRight) 36 .LineStyle = xlContinuous 37 .ThemeColor = 2 38 .TintAndShade = 0.349986266670736 39 .Weight = xlThin 40 End With 41 With Selection.Borders(xlInsideVertical) 42 .LineStyle = xlContinuous 43 .ThemeColor = 2 44 .TintAndShade = 0.349986266670736 45 .Weight = xlThin 46 End With 47 With Selection.Borders(xlInsideHorizontal) 48 .LineStyle = xlContinuous 49 .ThemeColor = 2 50 .TintAndShade = 0.349986266670736 51 .Weight = xlThin 52 End With 53End Sub 我的宏为什么不能运行？ 微软最近的更新对宏进行了许多的限制（基于安全性原因和微软认为没啥人用这个东西），所以如果你想要运行宏，需要开一些设置：\n文件-选项-自定义功能区，勾选开启“开发工具功能区” 文件 - 选项 - 信任中心 - 信任中心设置，然后勾选这样，然后重启软件。 顺便玩了一会儿VisualBasic的开发界面，感觉上就像是一个上古时代的VisualStudio！ 尾声 其实我当时想要编程的最主要原因就是感觉各种编辑器好酷啊，颜色花花的好看，黑色背景好酷！ 虽然到目前位置也没去当一名全职开发，但是我对编辑器主题的爱永远不变！\n","date":"2022-06-22","img":"","permalink":"https://cornradio.github.io/hugo/posts/excel%E9%BB%91%E8%89%B2%E6%A8%A1%E5%BC%8F/","series":[],"tags":[""],"title":"Excel黑色模式"},{"categories":[""],"content":"战地5键盘不灵的解决办法 最近在玩战地5，游戏是origin出的，但是有个bug，一边前进一边开镜，就会站着不动，总之是输入冲突的问题，在网上找到了一个解决办法：\nigo64.dll 在Origin目录下C:\\Program Files (x86)\\Origin，只要随便改个名字，就不会出现按键冲突的问题了。\n","date":"2022-06-20","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E6%88%98%E5%9C%B05%E9%94%AE%E7%9B%98%E4%B8%8D%E7%81%B5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","series":[],"tags":[""],"title":"战地5键盘不灵的解决办法"},{"categories":[""],"content":" 批量ping是我的工作中常常需要用到的功能了，但是手动好麻烦！我在网上找到了一个脚本，经过了一些改进现在非常好用了，为了方便自己以后复制和互联网精神，我把它放在这里！\n特点 多个IP并行扫描，速度很快 扫描py代码所在目录下所有.txt文件，对每个txt文件内的所有IP进行扫描（会自动判断行内容是不是ip哦！目前只支持ipv4） 输出上色，更容易看清 输出使用tab分割，可以轻松复制到excel进行排序筛选之类的操作 代码 1import subprocess 2import multiprocessing 3import time 4 5def check_alive(ip): 6 result = subprocess.call(f\u0026#39;ping -w 1000 -n 2 {ip}\u0026#39;, stdout=subprocess.PIPE, shell=True) 7 # 等待超时时间1000ms ， 测试次数 2次 8 if result == 0: 9 h = subprocess.getoutput(\u0026#39;ping \u0026#39; + ip) 10 returnnum = h.split(\u0026#39;平均 = \u0026#39;)[1] 11 print(f\u0026#39;{ip}\\t\\033[32m[ok]\\033[0m\\t{returnnum}\\t\u0026#39;.replace(\u0026#34;\\n\u0026#34;,\u0026#34;\u0026#34;) ) 12 else: 13 print(f\u0026#39;{ip}\\t\\033[31m[bad]\\033[0m\u0026#39;.replace(\u0026#34;\\n\u0026#34;,\u0026#34;\u0026#34;)) 14 15 16if __name__ == \u0026#39;__main__\u0026#39;: 17 print(\u0026#39;结果使用tab分隔，可以拷贝到excel中，通过数据透视进行ip排序等\u0026#39;) 18 # 获取所有当前目录下的txt文件并存入 txtfile_list 19 import os 20 path = \u0026#34;.\u0026#34; 21 file_name_list = os.listdir(path) 22 txtfile_list = [] 23 for x in file_name_list: 24 if x.__contains__(\u0026#39;.\u0026#39;): 25 if x.split(\u0026#39;.\u0026#39;)[1] == \u0026#34;txt\u0026#34;: 26 txtfile_list.append(x) 27 print(txtfile_list) 28 29 MUTIPROCESS = True 30 31 for x in txtfile_list: 32 print(f\u0026#34;scaning {x} :\u0026#34;) 33 # input(\u0026#34;enter 开始ping\u0026#34;) 34 with open(x, \u0026#39;r\u0026#39;) as f: # xxx.txt 内容应该包含ip地址，每行一个，可以写备注因为下面会 35 print(f\u0026#39;ipaddress\\t[ok]\\tlatency\\t\u0026#39;.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026#34;)) 36 for line in f: 37 # 识别ip地址 38 if len(line.split(\u0026#39;.\u0026#39;)) == 4: 39 if MUTIPROCESS: # 多线程模式 40 p = multiprocessing.Process(target=check_alive, args=(line,)) 41 p.start() 42 else: #单线程模式 43 check_alive(line) 44 # 展示非ip行内容 45 # else: print(line) 46 47 # 等待多线程数量为0（ping均结束）后开启下一个txt的扫描 48 while True: 49 if len(multiprocessing.active_children()) == 0: 50 # print(\u0026#39;thread count: \u0026#39;+ str(len(multiprocessing.active_children())) +\u0026#39; ,scan complete\\n\\n\u0026#39;) 51 print(\u0026#34;------------\u0026#34;) 52 break 53 time.sleep(3) 使用效果 为了避免信息泄露，我这里放的都是一些网络上的服务器，很少…… 不过我正常使用这个工具的时候都是搞几十个ip来扫\n尾巴 其实我是周末弄得啦，之前就是直接用的网上搜到的版本，但是总是感觉不好用，今天正好有空，就修改了一下。\n无论是输出的排版、还是多个txt的支持之类的，我的版本都是比较好的啦！\n如果说你有超级多个ip进行测试的话，你可能会发现有的时候一行输出了2个ip，然后下面还有个空行，那也是我很想解决（但是也不会弄）的东西，因为他们是并行开始ping的，没有办法知道他们测试结束的时间，如果他们的结束后print的时间正好卡在一起那就一行两个了。\n不过目前也可以通过复制到excel里面然后把很明显串行的结果剪切过去来解决……但是 一点也不优雅！\n","date":"2022-06-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E4%BD%BF%E7%94%A8python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%B9%E9%87%8Fping/","series":[],"tags":["python","Network"],"title":"使用python多线程批量ping"},{"categories":[""],"content":" 前段时间我没有续费我的uu加速器了，因为这个老鬼东西实在是价格太贵，并且也不是多好用。\n上次我为了和同学一些玩游戏又在网上买了个uu加速器（登录器），反正就类似卡uu加速器的bug加速游戏，但是uu很明显不想让他一直薅羊毛，所以我这边也加速不了了，找了店家，店家好像一个脑瘫问题不解决就阿巴阿巴的。\n一直都听说能用什么软件让节点给游戏加速，我今天就仔细研究了下，hey你别说人家这个开源的Netch真的做的不错，我加速了Apex并且玩起来和用uu加速没啥区别！\n垃圾uu要的太黑！黑心商人！\n参考链接 下载Netch：https://github.com/NetchX/Netch 比SStap更优秀的Netch怎么用 - YouTube Netch使用指南(190627) | 冰灵的博客 | BingLing\u0026rsquo;s Blog (binglinggroup.github.io) 它与v2rayN、Clash的不同 我希望你可以先看一下这里，你如果了解了它的原理，后边就很明白它到底是为什么这样操作了，对于折腾来说，可以减少你浪费的时间\n一般我们用v2rayN、Clash来对浏览器、系统全局进行代理，达到访问Google的目的\n但是即使开了全局，他们也不能连接上 PUBG 或者 APEX 这些游戏\n至于原因？\n因为他们的“全局”只是修改了windows这里的设置而已，很多游戏之类的程序并不会检查和使用系统的代理来建立网络链接。\n那么从原理上来说的话这个Netch又有什么不同呢？\nNetch是对进程进行代理\n它是发现你的电脑开启了某个名称的进程后，就会从外部给它加上一个代理，并不需要程序本身兼容\n就能达到给一些不支持代理的程序进行加速的效果。\nNetch的使用 添加订阅 因为我一般都是使用的订阅，所以我就不讲单条节点如何导入了。\n这里的界面样式非常像V2rayN，第一个按钮可以添加删除订阅（支持同时有好几个），第二个是更新订阅列表。加入成功之后你就可以在服务器下拉列表中选择自己的服务器节点了。\n主界面功能简要介绍 服务器\n选择你的节点用的，右边四个按钮分别是 编辑（查看）、删除、测速、复制（复制之后可以贴到别的软件里） 模式\n模式可以理解成，预设的加速进程列表，预设提供的还是挺多的有steam、steam游戏、git、GTAv、Unity hub等，包括了很多工作、学习软件 模式是按照A-Z a-z 的顺序排序的，到时候你自己建立了模式需要起名字，然后就能在这里找到了。 配置名\n老版本没有这个，这个配置名就是给你当前选择好的服务器、模式的组合起名字，然后可以保存到下面的快速按钮里，下次开软件，点击按钮直接启动（加速） 新建一个APEX模式 模式可以理解成，预设的加速进程列表，进程是靠进程名称来识别的，所以即使他不知道程序本体的具体路径，只要知道名字就ok了。\n去steam里面找到游戏的目录，然后复制一下路径 来到Netch，模式-创建进程模式，然后再打开的窗体中按“扫描“ 扫描会让你选择一个文件夹，我们选择游戏的整个目录，可以参考我的截图 然后你会发现出现了一堆xxx.exe,他们就是程序再你制定好的目录下面找的程序列表，在程序启动之后，Netch可以根据这些东西找到相应的”进程“然后加速他们。 起名字保存（我起名为Apex-test） 保存之后，在模式的下拉框里面，你就可以找到自己新建的模式了！ 加速、保存快速配置 这里我选择了建立了两个快速配置，你可以自己随便建立自己的快速配置（本质上就是模式和服务器的组合）\n同时加速steam和Apex（高级） 我这边steam好友总是不好使，还有steam社区也打不开，在等待过程中看看社区好玩的图和吐槽也是乐趣呀。\n那么，如何建立这种模式呢？\n找到它预设的steam模式，点击右边的编辑按钮，然后把他的规则都复制出来（其实就是一个大textbox，可以打字的还能选择退格之类的） 打开你的模式（Apex-test），然后把steam的模式规则都贴后面 保存你的修改后的模式（可以重命名再保存） 结语 希望这个文章能帮到其他折腾的人，毕竟uu蛮贵的，而每个月都买的节点如果能用在游戏加速上面那当然很开心呀！谁不想省点钱呢？\n不过我仍然不知道怎么让Netch给主机加速，后面用得上再想吧…\n有啥问题请再评论区告诉我，错别字就算了…\n","date":"2022-05-28","img":"https://tvax3.sinaimg.cn/large/006rgJELly1h2o5hxdsk2j305303ajrd.jpg","permalink":"https://cornradio.github.io/hugo/posts/%E4%BD%BF%E7%94%A8netch%E5%8A%A0%E9%80%9Fapex/","series":[],"tags":["game","加速器","windwos","Netch"],"title":"使用Netch加速apex"},{"categories":[""],"content":" 很多人都用搜狗输入法，但是在win11上面他显然不是一个最好的选择。\n在windows11上面，微软对中文输入发进行了全新的设计，支持了黑色模式，并且真的非常的好看，在使用过程中我还发现他有几个特别的优点：\n它可以在各种游戏中打字，且不会出现不适配的情况 他所在的层级是比任何窗体都高的，甚至在全屏的游戏中，他都可以显示在其上方。 响应快，即便是在电脑开启了低能耗模式的时候也不会出现卡顿(搜狗就卡。 那么这么好的输入法，为什么大家有不用呢，因为它真的太“傻“了，他的默认词库就像是一个智障的日常词典，你基本无法直接打出来任何你想要的字。这篇文章的接下来就教你如何配置这个输入法，让他有快速输入常用人名、并且词库更加智能！\n词库 词库转换（搜狗→微软） 我们需要借助一个第三方软件来把自己的常用词库转换给微软输入法使用：Release imewlconverter-v2.9.0 · studyzy/imewlconverter (github.com) 首先需要在搜狗中导出自己磨合已久的词库，然后通过深蓝词库转换器，把它转换成微软能用的词库。\n下拉选框可以参照我的例图：\n转换成功后会自动把新生成的词库保存到这里转换器.exe的目录下\n打开”词库和自学习“ 然后我们需要去找到词库设置位置，快速的办法是右键单击输入法区域-设置：\n在设置中我们需要进入”词库和自学习“菜单\n导入词库、建立自定义短语 在这里有很多的按钮，可以看看说明根据自己的需要来打开，我主要讲两个\n自学习（导入搜狗的词库） 导入刚刚我们转换出来的 Win10微软拼音自学习词库0.dat 用户自定义短语（用于输入人名等） 点击 添加或编辑自定义短语 添加并且逐个输入，常用的比如人名啊、邮箱啊、都可以变成快捷短语（我这边人名是通过钉钉复制的还是挺快的，之前那个wcs的名字我一次都没打对过，这些终于可以打出来了…）。 全部弄好之后，你的输入法应该已经不再是”小弱智“了\n导出 记得你的词库、短语都是可以导出的！应该可以轻松的导入到其他的PC上。\n（我存到了我的坚果云里面）\n外观 在win11下的黑色主题微软输入法真的蛮好看的，一点也不输给macOS的默认输入法！\n字体大小 当然升级win11之后第一时间我就使用了下新的输入法，虽然很好看但是有一个巨大的缺点，就是字真的太小了……（才不是我老花眼），但是在后续乱研究的时候我发现他的字体大小是有挡位可以选择的！\n输入法工具栏 它还有一个输入法工具栏，可以快速的在输入法位置开关，非常非常的简洁小巧。在编程时候，需要切换标点符号、查看自己是否在英文输入法、符号是中文符合还是英语符合都是很方便的。\n并且它还有一个很厉害的特点，就是我一开始说的，他能在独占全屏的游戏上悬浮！不知道微软用了什么办法做到的…… 我也想让我的程序有这个功能，感觉就好像是独立的一层，悬浮在整个界面之上一样。\n对了他右边那个设置按钮也有很多功能哦，能把这个烂变成数直的还可以自定义上面显示哪些图标。\n更多强大功能 快捷键 我换成微软输入法的很大原因之一就是快捷键占用。搜狗默认占用了ctrl + ./,/空格 还有好多快捷键。在编程软件中真的非常常用。\n在微软里面你可以看到所有的快捷键配置，要比搜狗的清晰的多。\nU V 输入模式 U\n快速的打出自己不会念的字，比如 u huo niao 䲴 V\nv1234565 壹拾贰万叁仟肆佰伍拾陆 v2022-5-24 2022年5月24日 v6*12+1 6*12+1=73 还有一个人名输入模式我不太会用。\n输入法我都讲了这么多了，windows对于输入的附带功能我也讲讲算了，下面有几个我很喜欢的：\n快速emoji win + 分号\n历史剪贴板 win + v 甚至还能看到图片喔！\n（突然发现上面有一个可以点击的栏，原来emoji和剪贴板可以通过点击上面的按钮切换！）\n最后我在附赠一个搜狗词库吧，就是我的默认词库用深蓝转换来的，应该没有啥个人敏感信息，给超级懒人们用啦~\nRelease 搜狗词库 · kasusa/English-words (github.com) ","date":"2022-05-24","img":"https://tva1.sinaimg.cn/large/006rgJELgy1h2jsguw43aj306j037js3.jpg","permalink":"https://cornradio.github.io/hugo/posts/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95/","series":[],"tags":["win","输入法"],"title":"如何打造最好用的微软输入法"},{"categories":[""],"content":" 每次在网上搜tar都一堆低质量回答，看的头大，自己写一个\ntar的用法 打包 打包（多个文件）：\n1tar -cf my.tar 1.txt 2.txt 3.txt 打包（文件夹）：\n1tar -cf dir1.tar dir1 看包 看包/预览包内容：\n1tar -tvf dir1.tar 解包 解包：会自动解压到当前目录的同名文件夹下面\n1tar -xf dir1.tar 解包（到指定的位置）：解压后会在dir2里面看到一个dir1\n1tar -xf dir1.tar -C dir2/ tar与文件类型 一般来说 .tar 就是我们说的打包的包了，用上述命令就可以操作。\n常见 .tar.gz 格式，它是打包后又进行了压缩。可以使用 -zxf 来解压。\n需要根据自己需要来决定要不要开-v ，不开的话，解压或者打包的时候系统看起来就像卡住了一样。\n常用参数解释 c create 创建 x extract 解包 v verbose 显示更多废话 f file=ARCHIVE 要操作的对象放在f后面 z zip 压缩功能 官方的话 GNU \u0026rsquo;tar\u0026rsquo; saves many files together into a single tape or disk archive, and can restore individual files from the archive.\n1Examples: 2 tar -cf archive.tar foo bar # Create archive.tar from files foo and bar. 3 tar -tvf archive.tar # List all files in archive.tar verbosely. 4 tar -xf archive.tar # Extract all files from archive.tar. ","date":"2022-05-22","img":"","permalink":"https://cornradio.github.io/hugo/posts/tar%E7%9A%84%E7%94%A8%E6%B3%95/","series":[],"tags":["linux","tar"],"title":"Tar的用法"},{"categories":[""],"content":"今天用WLS打开windows目录，一片亮瞎眼的绿色，再加上这个复古特效，真的字都看不清了：\n在网上搜了一圈修改办法，终于找到一个有用的文章：在WSL环境下修改文件夹的颜色 操作步骤 回到主目录然后导出（新建）一个.dircolors文件\n1cd ~/ 2dircolors -p \u0026gt; .dircolors 使用vim打开这个新文件（vim可以看见设置的颜色效果，搜索OTHER_WRITABLE\n1vim ~/.dircolors 把颜色修改成你想要的，有前景色、背景色、字体三种东西可以修改，具体的样式数字 修改好了之后 :wq 保存退出\n最后用 source ~/.bashrc 重加载一下bash配置文件即可完成修改了\n颜色列表 这个颜色列表应该在很多程序中都用得到，比如各种输出，他们的颜色应该都是用的同一种映射\n你可以修改成任何你要字体、前景色、背景色搭配，用;分开即可\n例如 加粗 黑色字 Cyan背景 = 01;30;46\n1# 字体 200 //默认 301 //加粗 404 //下划线 505 //闪烁 607 //反显 708 //隐藏 8# 文字颜色 930 — Black //黑色 1031 — Red //红色 1132 — Green //绿色 1233 — Yellow //黄色 1334 — Blue //蓝色 1435 — Magenta //洋红色 1536 — Cyan //蓝绿色 1637 — White //白色 17# 背景颜色 1840 — Black 1941 — Red 2042 — Green 2143 — Yellow 2244 — Blue 2345 — Magenta 2446 — Cyan 2547 – White ","date":"2022-05-22","img":"https://tva2.sinaimg.cn/large/006rgJELgy1h2h9h5nahuj30qt0ewgwe.jpg","permalink":"https://cornradio.github.io/hugo/posts/%E8%87%AA%E5%AE%9A%E4%B9%89ls%E5%90%8E%E5%90%84%E7%A7%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E9%A2%9C%E8%89%B2/","series":[],"tags":["linux"],"title":"自定义ls后各种文件夹的颜色"},{"categories":[""],"content":" 最近我想看一拳超人漫画，我需要看高质量（清晰度）的并且不要bilibili漫画←它要钱而且差不多一章一块钱！最终我找到了下载版的，是汉化组的微信公众号里面提供的，（团子汉化组）感谢他们！\n但是接下来我就需要面对一个问题，我已经好久没有看离线漫画了，我不知道什么软件看漫画最好~经过了一天的搜索和寻找我发现了下面这些好软件让我来一一说明：\nIOS 平台 这个阅读器有着非常简介的界面（几乎像是一个原生APP），通过IOS文件App对漫画进行导入，支持快速的批量导入，记录阅读历史之类的都是必备技能啦。\n他还有一个亮点功能（虽然对我这种原图是2页的不太好用），就是自动放大阅读，他对一个漫画页进行只能切分，从上往下每一个个格子放大看，就像翻页一样。\nWindows 平台 win平台我推荐这个软件：NeeView 我还给这个软件做了一个视频：PC 电脑端看漫画软件 NeeView （windows） 可以说它是win平台唯一的选择了，windows上面的看漫画软件可以说基本没有了，只有它一个…\n同时我这里推荐一个开源的看图软件qimgv （支持linux和win），这个看图软件不能打开压缩包，但是看文件夹里面的图却是很厉害，非常适合阅读大量图片，但是用这个软件你可能想要修改一下快捷键。\n","date":"2022-05-20","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E6%BC%AB%E7%94%BB%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/","series":[],"tags":[""],"title":"漫画软件推荐"},{"categories":[""],"content":"国内对于开发人员真的极不友好，\n任何东东都要配置下代理或者源才能正常使用\n这里教大家如何给pip配置代理；\n将pip加入环境变量 在安装了python之后，这里举例子用的是py官方的3.10安装包，安装后一定要选择上disable path length limit,否则windows默认是不能把太长路径加入path的。\n可以通过下面的指令来查看自己的python安装在什么位置：\n1\u0026gt;\u0026gt;\u0026gt; import os 2\u0026gt;\u0026gt;\u0026gt; os.path 应该会存在这样一个目录：...\\Python310\\Scripts，里面会有好多pip相关的exe，我们要把这script加到环境变量里面去就好了！\npip 配置源 你需要进入用户目录，然后建立一个pip文件夹，例如这样：C:\\Users\\kasusa\\pip\n这个目录下，需要新建一个pip.ini文件，ini文件的内容可以照抄我的，在中国大陆区域用着应该都没有问题，感谢豆瓣）\n1[global] 2index-url = http://pypi.douban.com/simple 3[install] 4trusted-host=pypi.douban.com 速度测试 好快呀！\n","date":"2022-05-19","img":"","permalink":"https://cornradio.github.io/hugo/posts/pip%E9%85%8D%E7%BD%AE%E6%BA%90/","series":[],"tags":["python"],"title":"Pip配置源"},{"categories":[""],"content":"因为我之前写了一些docx搜索的工具，但是客户发过来的文件还是doc格式的，导致我的搜索工具不能用，所以我在网上找到了这个！\n在word中开启开发者模式，新建一个宏，使用下面的代码，然后双击运行宏。\n会让你选择多个文件，然后系统会把他们都转换成docx文件！\n如果你只是单纯吧doc后缀改成docx的话，会出现打不开、文件损坏的问题哦。\n1Sub doc2docx() \u0026#39;doc文件转docx文件 2Dim myDialog As FileDialog, oFile As Variant 3Set myDialog = Application.FileDialog(msoFileDialogFilePicker) 4With myDialog 5 .Filters.Clear \u0026#39;清除所有文件筛选器中的项目 6 .Filters.Add \u0026#34;所有 WORD97-2003 文件\u0026#34;, \u0026#34;*.doc\u0026#34;, 1 \u0026#39;增加筛选器的项目为所有WORD97-2003文件 7 .AllowMultiSelect = True \u0026#39;允许多项选择 8 If .Show = -1 Then \u0026#39;确定 9 For Each oFile In .SelectedItems \u0026#39;在所有选取项目中循环 10 With Documents.Open(oFile) 11 .SaveAs FileName:=Replace(oFile, \u0026#34;doc\u0026#34;, \u0026#34;docx\u0026#34;), FileFormat:=12 12 .Close 13 End With 14 Next 15 End If 16End With 17End Sub 附我开发的工具：archiver （可以对多个word文档搜索）\n","date":"2022-05-12","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E6%8A%8Adoc%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90docx/","series":[],"tags":["docx"],"title":"把doc文件转换成docx"},{"categories":[""],"content":"chmod的用法 今天我们有一节技术分享，讲的是linux的文件和权限，学到了点有用的。\n然后由于我自己的一些思考，我就觉得比如我把自己写文件的权限去掉了，这个时候我为什么还能够通过chmod来修改这个文件的权限呢？搞了一会儿chmod搞懂了，分享一下：\nls -l：看权限 这个权限一般是这样的 rwx rwx rwx 写了三遍是因为它对应着三个家伙的权限，分别是用户（文件拥有者）、组（文件拥有者的朋友们）、还有其他人。\nlinux系统是由文件组成的，文件就像一个物品，他是有归属的，图中me.txt这个文件就是属于k的用户的。\n属于k的意思就是，k可以对这个文件使用chmod指令来改变文件的权限，就像你可以决定你的东西是否让别人使用一样。\n对于文件 r（read）、w（write）、x（Excute）都很好理解，但是目录呢？什么叫执行目录？下面这个表可以参考一下：\n- r w x 文件 读到文件内容 修改文件内容 执行文件 目录 读目录下的文件名 修改目录下的文件名 进入该目录的权限 注意：要开放目录给任何人浏览时，应该至少也要给予 r-x的权限，w 权限不可随便给\n看了这个表你就能感觉到，目录的权限指的是你能不能看到、修改目录里面的文件名，文件的权限是管文件里的东西（文件的具体内容啥的），懂了这个道理你上面的表也就没有必要记了。\n修改文件所属 修改文件所属就像物品的转让，但是只能由root强制执行……hhh\n1chgrp：修改文件所属用户组 2chown：修改文件拥有者() 3 4chgrp [-R] \u0026lt;用户组名称\u0026gt; \u0026lt;文件或目录\u0026gt; 5\tchown [-R] \u0026lt;账号名称:用户组名称\u0026gt; \u0026lt;文件或目录\u0026gt; 6\tchown [-R] \u0026lt;账号名称\u0026gt; \u0026lt;文件或目录\u0026gt; chmod chmod：修改文件的权限\n1chmod [-R] xyz 文件或目录 2(r:4 w:2 x:1) 3chmod 777 file1 但是这种操作多不直观！整几个数字看起来虽然非常极客，但是真的很不人性化。我还是更喜欢这种方式：\n1chmod a=rwx hi.txt 2 3a=rwx 意为：all（所有人）=（权限变成）rwx（读写执行） 4a/u/g/o (all/user/group/others) 5=/+/-\t(设置权限、增加某些权限、减少某些权限) 1k@VM-12-6-ubuntu:~$ ls -l 2----rwx--- 1 k k 0 Apr 22 15:24 hi.txt 3 4k@VM-12-6-ubuntu:~$ chmod a=rwx hi.txt 5 6k@VM-12-6-ubuntu:~$ ls -l 7-rwxrwxrwx 1 k k 0 Apr 22 15:24 hi.txt 如果用这个方式，看起来直观又容易记忆。\n附加： SUID：4 SGID：2 SBIT：1\n比如你要给一个目录的权限本来是774，但是你要给他加上SGID的特殊模式，你就直接赋权限 chmod 2774 dir1\n高级：SUID、SGID、SBIT 有时候在ls -l的时候，你还会看到s、t这种奇葩的字母，不知为何意，下面就为你解惑。\n不废话版：\n符号：s（set xxx ID）\nSUID - 执行二进制文件的时候短暂获取文件所有者的权限 SGID - 执行二进制文件的时候短暂获取文件所属组的权限 SGID - 在某目录下时候短暂获取目录所属组的权限 符号：t （sticky）\nSUID 当 s 这个标志出现在文件拥有者的 x 权限上时，例如刚刚提到的 /usr/bin/passwd 这个文件的权限状态:【-rwsr-xr-x】，此时就被称为 Set UID，简称为 SUID 的特殊权限。\n基本上 SUID 有这样的限制与功能：\nSUID 权限仅对二进制程序 ( binary program ) 有效，不能用在 shell 脚本上； 执行者对于该程序需要具有 x 的可执行权限； 本权限仅在执行该程序的过程中有效； 执行者将具有该程序拥有者 ( owner ) 的权限。 举个例子：\n​ Linux 系统中，所有账号的密码都记录在 /etc/shadow 这个文件里面，这个文件的权限为:【\u0026mdash;\u0026mdash;\u0026mdash;- 1 root root】，意思是这个文件仅有 root 可读且仅有 root 可以强制写入而已。既然这个文件仅有 root 可以修改，那么我们一般账号用户能否自行修改自己的密码？一般用户当然可以修改自己的密码。\n​ 可是明明 /etc/shadow 就不能让一般用户去读写的，为什么一般用户还能够修改这个文件内的密码？这就是 SUID 的功能。\n借由前面提到的功能说明，我们可以知道：\n1.一般用户对于 /usr/bin/passwd 这个程序来说是具有 x 的权限，表示一般用户能执行 passwd；\n2.passwd 的拥有者是 root 这个账号；\n3.一般用户执行 passwd 的过程中，会【暂时】获得 root 的权限；\n4./etc/shadow 就可以被一般用户所执行的 passwd 所修改。\n​ 但如果一般用户使用 cat 去读取 /etc/shadow 时，它能够读取吗？因为 cat 不具有 SUID 的权限，所以一般用户执行【cat /etc/shadow】时，是不能读取 /etc/shadow 的。\nSGID 与 SUID 不同的是，SGID 可以针对文件或目录来设置。\n除了二进制程序之外，事实上 SGID 也能够用在目录中，这也是非常常见的一种用途。当一个目录设置了 SGID 的权限后，它将具有如下的功能：\n用户若对于此目录具有 r 与 x 的权限时，该用户能够进入此目录； 用户在此目录下的有效用户组 (effective group) 将会变成该目录的用户组； 用途：若用户在此目录下具有 w 的权限(可以新建文件)，则用户所建立的新文件，该新文件的用户组与此目录的用户组相同。 SBIT Sticky Bit ( SBIT ) 只针对目录有效\nSBIT 对于目录的作用是：\n当用户对于此目录具有 w、x 权限，即具有写入的权限； 当用户在该目录下建立文件或目录时，仅有自己与 root 才有权力删除该文件。 举例:\n我们的 /tmp 本身的权限是【drwxrwxrwt】，在这样的权限内容下，任何人都可以在 /tmp 内新增、修改文件，但仅有该文件或目录建立者与 root 能够删除自己的目录或文件。\n","date":"2022-04-22","img":"","permalink":"https://cornradio.github.io/hugo/posts/chmod%E7%9A%84%E7%94%A8%E6%B3%95/","series":[],"tags":["linux"],"title":"Chmod的用法"},{"categories":[""],"content":"e-h是一个广为人知的网站，但是他的阅读界面可以说做的很不人性化了。\n这边有一个插件（油猴脚本），名字叫做eHunter，可以让你的阅读体验究极升级！\n直接安装ehunter插件 参观github仓库 安装油猴 ","date":"2022-04-10","img":"","permalink":"https://cornradio.github.io/hugo/posts/e-h%E6%8F%92%E4%BB%B6/","series":[],"tags":[""],"title":"E-H阅读插件"},{"categories":[""],"content":" 本期是发到公众号上的技术分享，分享的内容就是之前我的Docx相关东东，但是本篇除了介绍代码方便、会更加全面的讲解程序搭建的思路、以及myutil（我写的关于Docx的库）的使用。\nword小工具开发 前情提要 自从去年9月份至今，我已经做过很多的小工具了，从最开始的完全不涉及文档操作，到丰富的docx查询编辑，积累了不少的经验，如果你也有一些点子、想开发一些小程序简化自己的工作（特别是和word操作相关的），那么本文会对你有些许帮助！\n信心 首先我们不要对开发这件事情抱有很大的抵触心理，不要认为这是一件很难的事情。\n如果是一个学习过C语言课程的人，那么他上手会是很简单的。\n如果是一个学过桌面程序开发的人，那么他应该可以秒上手！\n本文主要使用的编程语言是C#，相对于python他有如下优点：\n拖拽式的界面设计非常简便 少量信息的存储甚至不需要学习操作文件 C#操作Docx的库相对于python来说更加好用，且有丰富的官方例子（python-docx库会存在有无法读取到某些表或者段落、无法正常修改页眉内容等问题） 一般来说在思路清晰清晰的，根据功能复制程度、实现难度区别，开发时间应该是 1天~2天，相对于后续他为你提供的便利来说，真的是“磨刀不误砍柴工”。\n主要原子功能 多个文件的选择和排除 word文件的读取 word文件的段落内容搜索 word文件的表格内容搜索 word内容的批量替换 少量数据的存储 字符串操作 例子“生成《出报告申请》”介绍 ​\t首先我会讲解一下这个程序的使用方法，通过这个真实的例子来分解程序的制作过程和开发思路\n使用方法：\n报告拖放到textbox内（自动获取路径） 通过自动模式/手动模式进行出报告申请的生成 手动输入项目经理、成员 检查输出是否有误 —— 完成 如上图所示，本程序有两种信息输入方式\n从报告中读取 手工录入 上图则是从报告中提取到的数据展示，展示后还需要手动输入“我方人员”，因为这些内容无法从源文件中读取到。\n最后生成的成品文件则会保存到桌面指定的文件夹中（由于有敏感信息不做展示）。\n界面设计 对于不同功能的应用，要活用radiobutton、listbox等控件简化开发流程和用户的操作门槛，虽然界面可能看起来有些许“过时”，但是诸如treeview、checkbox、radiobutton、listbox等都是微软默认提供且非常强大且易用的控件。\n同时在界面展示也要做的合理，如锚点的设置、按钮的摆放等\n对于有大量内容的中心控件（如上图中的文件选取栏），推荐设置就是上下左右都配置锚点，这样用户在使用的时候可以通过手工把窗口拉大的方式来让选取栏变大，从而方便操作； 对于底部的按钮则应该选择向下锚点，否则用户将窗体放大的时候就会变成这个样子 程序思路 一个程序的开发可以简单的分成这三个步骤：\n需求的分析和程序开发可行性判断 程序开发 进行一些测试确保程序的可用性和稳定性 需求的分析和程序开发可行性判断 首先想让机器帮自己做某件麻烦事、或者是某些事情让机器做更好更快，这些想到的电子就是所谓的需求了。\n如果产生了一个点子，作为程序的开发人员首先就要大致的思考一下怎么样把这个点子变成现实——用什么方式、用什么现在自己会的技术来做这件事。\n从上面这个小程序的角度来看，脑内出现的过程是：\n1从报告中提取出信息 → 把信息存储到字典中 → 将字典中的对应字符串替换到新文件中 → 完成！ 作为个人开发者，如果某些功能要实现可能需要耗费非常多的时间、精力，或者根本想不到实现的办法，那么可以认为开发可行性是不佳的，可以考虑放弃这个点子。\n程序开发 明确思路，制定操作LIST如：xxx → xxx (较小的项目可以略过这步) 通过搜索、表格定位等方式用程序获取所需数据 根据需要替换的位置制作模板 逐一实现 通过实际使用等方式进行测试 写一个大号的程序经常会有无从下手的感觉，所以第一个任务是把任务分成最小的“分子”。\n如下图是另一个程序的操作LIST，它确实很有用，可以清晰的看到是否有遗漏，以及完成了哪些部分，可以对自己的进度有一个大概的掌握，后期还可以用于程序的功能描述。\n这里使用的是markdown语法，对于每一个操作，如果实现了就在左边打一个x，如果没有则是空白的。\n语言和调用库文件 读取文件方面，我采用了Docx开源库，可以在xceedsoftware/DocX:(github.com) 上下载。他速度很快，仅支持C#语言，同时官方提供了详细的文档，可以在/Xceed.Words.NET.Examples (github.com) 下载实验。\n在 kasusa/archiver (github.com) 有我编写一个实用库，注释较全，本文中会大量使用库中实现的函数。\n至于支持python的docx库，我使用过他们一段时间，提供的支持不好，如页眉页脚无法轻易修改、部分存在的段落无法读取、多个相连的表格无法读取到后面的表格等问题，如果有人想要用python开发一个操作word的程序可以适度参考和避坑。\n文件读入、结构理解 文件读入是指把整个docx文件读到内存中，变成一个可以操作的对象：\n1//使用工具类“myuitl”一句话读取文件 2//path为docx文件的目录 3doc = new myutil(path); 1public myutil(string str_path) 2{ 3 … 4 var document = DocX.Load(path);//读取document 5 this.document = document;//document本体获取 6 this.tables = document.Tables;//主要元素之一：表格 7 this.Paragraphs = document.Paragraphs;//主要元素之一：段落 8 … 9} 一个word文件被读取之后，主要可以操作的部分分为三块：\n段落（paragraph）\n段落在文档中是以类似链表的方式存储。\n获取的结果是paragraph对象，它存储段落内容字符串、段落的样式（如字体、对其格式、字号等）。\n1//获取段落的文字内容 2string a = document.Paragraphs[0].Text; 3//调整段落为两端对齐 4document.Paragraphs[0].Alignment = Alignment.both; 5//调整颜色 6document.Paragraphs[0].Color(Color.Red); 表格（tables）\n表格在文档中是以类似链表的方式存储。\n表格的访问按照行、列进行，如果要访问指定表格，需要知道表格的索引、单元格相对于表格所在的行、列。\n每个单元格中可以包含多个段落，对于单元格的内容提取其中包含的段落内容。\n1//文章中 第一个表格 第一行 第二个单元格（第二列）的内容 2document.Tables[0].Rows[0].Cells[1].Paragraphs; 3//获取总列数 4document.Tables[0].ColumnCount; 5//还有更多如多个单元格融合、增加行/列等 图片（images）\n图片分为Pictures、Images Images是真正的图片，如果你用zip打开word文件，可以发现存在一个文件夹放置所有图片的源文件 Pictures是图片在word文档中的一种“引用”，他引用了Images中的图片，并显示在word文档的指定位置上 段落搜索 段落的搜索是很必要的，我们毕竟不能直接根据段落的序号来获取数据，因为很多时候中间的段落数量是不确定的，所以绝对索引有很大的概率拿到错误的段落。\n搜索可以：\n直接搜索段落必然包含的内容来找到段落 搜索段落附近的章节标题，通过段落相对序号来获取附近位置的段落 对于会有多个搜索结果的，返回list，或者指定要求获得第几个搜索结果 1//列举一些实搜索现的例子 2public string Find_Paragraph_for_text(string v,int count = 1) 3public List\u0026lt;Paragraph\u0026gt; Find_Paragraph_for_plist( string v) 4public List\u0026lt;int\u0026gt; Find_Paragraph_for_ilist( string v) 5 6//用搜索的方式获取段落 7 tmpstr = doc.Find_Paragraph_for_text(\u0026#34;本报告记录编号：\u0026#34;); 8//用搜索的方式获取段落,附加找到的个数,下方例子为第二个 9tmpstr = doc.Find_Paragraph_for_text(\u0026#34;记录编号：\u0026#34;,2); 1foreach (var p in document.Paragraphs) 2{ 3 if (p.Text.Contains(v)) 4 { 5 //Console.WriteLine(\u0026#34;【找到:】\u0026#34; + p.Text + Environment.NewLine); 6 return p; 7 } 8} 9return null; 表格搜索 表格搜索功能是独创的，原理如下：\n将表格第一行的内容字符串化，如“被测对象”、“序号机房名称物理位置重要程度备注”。\n1//搜索表头为“被测对象” 2var table = findTableList(\u0026#34;被测对象\u0026#34;)[0]; 3//提供表格、行索引（row）、行内的单元格索引（cell),获取指定单元格内容 4string text = table_Get_cell_text(table, 0, 1); 表格搜索的实现如下\n1public List\u0026lt;Table\u0026gt; findTableList(string v1) 2{ 3 v1 = v1.Replace(\u0026#34; \u0026#34;, \u0026#34;\u0026#34;).Replace(\u0026#34;\\t\u0026#34;, \u0026#34;\u0026#34;); 4 List\u0026lt;Table\u0026gt; tlist = new List\u0026lt;Table\u0026gt;(); 5 //Console.WriteLine(\u0026#34;开始寻找表头是 :\u0026#34;+v1+ \u0026#34;的表格\u0026#34;); 6 for (int i = 0; i \u0026lt; tables.Count; i++) 7 { 8 string rowstring = \u0026#34;\u0026#34;; 9 for (int j = 0; j \u0026lt; tables[i].ColumnCount; j++) 10 { 11 rowstring += cell_get_text(table_Get_cell(tables[i], 0, j)); 12 } 13 if (rowstring== v1) 14 { 15 //Console.WriteLine(\u0026#34;找到了table\u0026#34;+i); 16 tlist.Add(tables[i]); 17 } 18 } 19 ConsoleWriter.Writehiddeninfo(\u0026#34;找到table个数：\u0026#34; + tlist.Count); 20 return tlist; 21} 内容处理 能获取到的内容均以段落为最小单位，获取到了段落之后，由于段落的内容可能很多，不能直接使用，我们需要对其进行修改、删减、或者提取。\n直接摘取整段 截取部分内容 （substring） 提取有用的固定格式内容（regex） 1//获取的内容 本报告记录编号：P2022XXXXX-GB01 ， 需要的部分是P2022XXXXX 2 string a = doc.Find_Paragraph_for_text(\u0026#34;本报告记录编号\u0026#34;); 3//本报告记录编号：P2022XXXXX-GB01 4//从序号8开始，取长度为10的字符串 5a = a.Substring(8,10); 6textBoxlog.Text = a; 如提取“测评准备过程的最后一天”时，因为存在多种书写格式、日期长短不一，需要使用正则表达式来提取内容、并且进行处理。\n1//多种情况例子 21、2021年12月28日～2021年12月29日，测评准备过程。 31、2021年12月28日～12月29日，测评准备过程。 41、2021年1月9日，测评准备过程。 1private string date_process(string a) 2{ 3 //提取日期（结束日期） 4 ConsoleWriter.WriteCyan(\u0026#34;在字符串中寻找日期：\u0026#34; + a); 5 6 string patternA = @\u0026#34;\\d\\d\\d\\d年(\\d)*月(\\d)*日\u0026#34;; 7 string patternB = @\u0026#34;(\\d)*月(\\d)*日\u0026#34;; 8 //如果获取的短日期个数为2，但是长日期仅有1个，那么就是如2021年12月1日～12月1日这种写法 9 //如果长短日期都只有一个，那么就是2021年12月1日这种写法（只有一天之类的） 10 11 int shortDcount = 0; 12 int LongDcount = 0; 13 14 Regex rg = new Regex(patternB); 15 MatchCollection matchedShortDate = rg.Matches(a); 16 shortDcount = matchedShortDate.Count; 17 //Console.WriteLine(\u0026#34;shortDcount\u0026#34; + shortDcount); 18 rg = new Regex(patternA); 19 MatchCollection matchedLongDate = rg.Matches(a); 20 LongDcount = matchedLongDate.Count; 21 //Console.WriteLine(\u0026#34;LongDcount\u0026#34;+ LongDcount); 22 23 if (shortDcount \u0026gt; LongDcount) 24 { 25 string year = matchedLongDate[LongDcount - 1].Value.Substring(0, 5); 26 string MandD = matchedShortDate[shortDcount - 1].Value; 27 a = year + MandD; 28 } 29 else if (shortDcount == LongDcount) 30 { 31 a = matchedLongDate[LongDcount - 1].Value; 32 } 33 Console.WriteLine(a); 34 return a; 35} 模板的制作和关键词替换 一般来说应用场景分为两种\n修改源文件 从源文件中提取信息，制作其他文件 本次介绍的属于第二种，对于制作其他文件，首先需要制作一个模板。\n然后我们只需要把【xxx公司】、【xxx系统】等内容替换为提取到的信息即可。\n1//a是提取到的内容字符串，tempo是读进来的模板文档 2a = doc.table_Get_cell_text(doc.tables[2], 1, 1); 3str_公司 = a; 4tempo.write_dictionary(\u0026#34;xxx公司\u0026#34;, a); 5 6a = doc.table_Get_cell_text(doc.tables[1], 1, 1); 7str_系统 = a; 8tempo.write_dictionary(\u0026#34;xxx系统\u0026#34;, a); 9... 10 //写入 11 tempo.ReplaceTextWithText_all(); 12//保存（myutil会默认保存到桌面 - out文件夹中） 13tempo.save($\u0026#34;出报告申请_{str_公司}_{str_系统}.docx\u0026#34;); 程序测试 程序编写完成后，需要进行测试，一般前几次的测试会发现很多的问题，大部分都很容易修复。\n同时经过了自己的测试后，还可以吧自己的程序分享给他人使用、测试，因为不同人使用的习惯不同，让他人使用更容易发现一些自己发现不了的bug。\n总结 如果你也想开发操作Docx相关的桌面程序，经过阅读上面的文章，应该已经可以了解其大概开发方法。同时也欢迎参考我的源码、使用我的库文件：github/kasusa/archiver ","date":"2022-03-31","img":"","permalink":"https://cornradio.github.io/hugo/posts/docx%E7%9B%B8%E5%85%B3%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/","series":[],"tags":["c#","word","开发"],"title":"Word小工具开发"},{"categories":[""],"content":" 这是官方的教程： IOS下载-PicAcg-哔咔漫画下载 (picacn.xyz) ，这里是他们下载的官网：PicAcg-哔咔漫画下载 (picacn.xyz) 目前看来主要有两种办法：\n自签名，用电脑安装 看网页版：https://ios.bikaa.xyz/ 我讲一下怎么用PC安装吧\n下载itunes 下载了这个软件你的ipad才能被电脑识别。\n可以在微软商店直接搜索itunes\n然后你可能要多插拔几次ipad，点击信任输入密码，直到它连上了为止。\n签名工具和下载 sideloadly安裝ios 嗶咔IPA – PICA Wiki 这个网站里面是签名的教程，里面也有个工具下载链接，123MB\n安装程序 确保设备已经识别 输入自己的apple账号 点击start 输入自己的appleid 密码（推荐用没开启两部验证的） 信任自签证书 来到ipad上面，进入 通用 - VPN与设备管理\n里面应该有一个没有信任的开发者证书，信任他。\n然后你的哔咔就能打开啦！\n注：签时效只有 7 天，但只有第一次比较麻烦，之后刷新需要重複一遍這個步驟……\n不过哔咔都不支持横屏，还不如去看e-h , e-h 可以用一个叫做Yealico的软件看……\n","date":"2022-03-30","img":"https://tva2.sinaimg.cn/large/006rgJELly1h0s4l1spjvj30ff0am0ww.jpg","permalink":"https://cornradio.github.io/hugo/posts/ipad%E7%9C%8B%E5%93%94%E5%92%94%E5%93%94%E5%92%94/","series":[],"tags":["ipad"],"title":"Ipad看哔咔哔咔"},{"categories":[""],"content":"https://www.youtube.com/watch?v=5tqzLUTLW-A 这个频道主人做了好多期怎么在苹果上面用tiktok的影片，虽然他宣传机场，但是他讲的很清楚。\n目前来说，需要到设置-地区，把地区切换成美国就可以了。\n享受你的tiktok!\n","date":"2022-03-30","img":"https://tva3.sinaimg.cn/large/006rgJELly1h0s3vougp5j307w04xq3c.jpg","permalink":"https://cornradio.github.io/hugo/posts/ipad%E7%9C%8Btiktok/","series":[],"tags":["tiktok"],"title":"Ipad看TikTok"},{"categories":[""],"content":"下载和安装 在官网下overwolf （他是一个软件商店）Overwolf Appstore 按照这个目录找，然后下载medal.tv\n下载安装好之后你就可以看到这个：\n文件的保存位置 文件都保存在电脑的“视频”文件夹。\n可以直接copy出来用。\n","date":"2022-03-13","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E6%B8%B8%E6%88%8F%E8%87%AA%E5%8A%A8%E5%BD%95%E5%B1%8F%E5%88%A9%E5%99%A8-overwolf+medaltv/","series":[],"tags":["游戏"],"title":"游戏自动录屏利器 Overwolf + Medaltv"},{"categories":[""],"content":"FRP是一个开源的内网穿透软件，本文将会介绍如何使用frp。\nfrp - github 原理解释 背景\n我们有一台能访问公网，但是没有公网ip（不能为外部提供服务的server） 我们有一台阿里云之类的云服务器，有公网ip 目的\n让不能为外部提供服务的server 借用云服务器转发，从而为公网提供服务 下载和安装 从github下载之后我们会得到这些文件：\n1frpc\t放在本地server上 2frpc.ini\tfrpc的配置文件 3frpc_full.ini\tfrpc的配置文件（有完整的注释和例子） 1frps\t放在云服务器上 2frps.ini\tfrps的配置文件 3frps_full.ini\tfrps的配置文件（有完整的注释和例子） 配置文件怎么写 以防我写的不对，首先推荐看这里：github官方例子 frps.ini 1[common] 2#开一个端口，用于转发信息的接收 3bind_port = 7000 4#开一个监控台，可以在web上面直观的看到frp运行情况 5dashboard_addr = 0.0.0.0 6dashboard_port = 7500 然后把frps、frps.ini 放到服务器上，赋予执行权限（我就无脑chomd777)\n记得把云服务器的安全组策略（在云服务商的控制台界面里面）打开，然后就可以去编辑frpc了\nfrpc.ini 1[common] 2#输入你服务器的ip、服务器的接收端口，进行frp链接 3server_addr = x.x.x.x 4server_port = 7000 5 6[ssh] 7#开启一些其他的转发，比如ssh，按照下面配置相当于把 127.0.0.1:22 转发到 x.x.x.x:6000 8type = tcp 9local_ip = 127.0.0.1 10local_port = 22 11remote_port = 6000 12 13# tcp和udp端口转发等 14[range:tcp_port] 15type = tcp 16local_ip = 127.0.0.1 17local_port = 6010-6020,6022,6024-6028 18remote_port = 6010-6020,6022,6024-6028 19use_encryption = false 20use_compression = false 21 22[range:udp_port] 23type = udp 24local_ip = 127.0.0.1 25local_port = 6010-6020 26remote_port = 6010-6020 27use_encryption = false 28use_compression = false 服务启动 1# 在云上启动服务端（接受和转发）（推荐用screen） 2./frps -c ./frps.ini 3 4# 在本地启动客户端（发送） 5./frpc -c ./frpc.ini 本地成功的输出：\n12022/03/12 08:54:09 [I] [service.go:178] [356c08cc36fd0fc1] try to reconnect to server... 22022/03/12 08:54:09 [I] [service.go:325] [356c08cc36fd0fc1] login to server success, get run id [356c08cc36fd0fc1], server udp port [0] 32022/03/12 08:54:09 [I] [proxy_manager.go:144] [356c08cc36fd0fc1] proxy added: [ssh] 42022/03/12 08:54:09 [I] [control.go:181] [356c08cc36fd0fc1] [ssh] start proxy success 云端成功的输出：\n1root@VM-12-6-ubuntu:/home/frp# sudo ./frps -c ./frps.ini 22022/03/12 08:53:51 [I] [root.go:200] frps uses config file: ./frps.ini 32022/03/12 08:53:51 [I] [service.go:193] frps tcp listen on 0.0.0.0:7000 42022/03/12 08:53:51 [I] [service.go:292] Dashboard listen on 0.0.0.0:7500 52022/03/12 08:53:51 [I] [root.go:209] frps started successfully 62022/03/12 08:54:06 [I] [dashboard_api.go:70] Http request: [/api/serverinfo] 72022/03/12 08:54:06 [I] [dashboard_api.go:63] Http response [/api/serverinfo]: code [200] 82022/03/12 08:54:09 [I] [service.go:449] [356c08cc36fd0fc1] client login info: ip [211.161.248.81:2910] version [0.40.0] hostname [] os [linux] arch [amd64] 92022/03/12 08:54:09 [I] [tcp.go:64] [356c08cc36fd0fc1] [ssh] tcp proxy listen port [6000] 102022/03/12 08:54:09 [I] [control.go:465] [356c08cc36fd0fc1] new proxy [ssh] success 检查frp控制台 ","date":"2022-03-12","img":"","permalink":"https://cornradio.github.io/hugo/posts/howtousefrp/","series":[],"tags":["frp"],"title":"如何使用FRP"},{"categories":[""],"content":"我从clash切换到使用v2rayN了，\n这件事情是因为steam，但是也因为clash是一个坏软件。\n起因 我昨天晚上登录steam，借用朋友的账号要使用家庭共享来共享他的游戏“老头环”。\n但是我登录非常有问题，总是发生登录失败或者类似的事情\n在之前steam也是有问题的，有的时候他就会蹦出来“好友无法连接”之类的鬼东西。还会把我从游戏中弹出来。\n归根结底，这是steam的问题。也是代理软件的问题，代理软件虽然想要“智能”但是我只能说它太他吗傻逼了，让我的网易云走国外代理，让我的steam也走代理，我无法体验到喷薄如蒸汽般的下载速度，我还要付出好多好多的流量钱！\n我决定换一个软件，clash肯定是有问题！\nsteam一直在用我的流量下载东西\n代理的原理 一般情况下，翻墙就是这样，借助一个没有被强。\n实际情况更像是这样，两个庞大的网络，里面都有好多的应用，而且他们基本上“不互通”\n你就是左边小小的电脑，连接到了右边蓝色的服务器上，然后可以愉快地上网！\n但是你的代理软件也不是很智能，他手里拿着一个列表（Geoip.dat），但是他实际上也不是很清楚那些流量该怎么走，有时候就会弄错，对我来说经常有steam下载用代理、网易云听歌被代理、一些外网的名气小的网站却不被代理的情况发生。\n对我来说我经常需要代理的地方有\n谷歌搜索 github下载 youtube看视频 soundcloud听音乐 Pornhub 看视频…… 但是soundcloud好像并不是很出名，在很多机场的配置文件都没有配置，结果代理软件Clash就选择直连，后果就是我听不了歌。\nclash是由节点提供商可以同时提供一份规则文件，根据规则文件对流量进行代理\n为什么用v2rayN 其实我是一个clash老用户了，很喜欢他的外观；但是他的log和调试功能让人完全看不懂，如果是某些网站被错误代理，我也无法发现，只能感受到满速的链接和无尽的等待。\n但是v2rayN可以显示log他会会在后面用**[proxy]、[direct]**来表示是否有把这个链接或者数据包通过代理发送。\n配合上域名，很轻松就能看出来这个ip是不是转发的了。\n对我来说，调试起来就很方便了\n而且使用规则也方便多了（表示一致没弄明白过规则集要怎么用）。\n系统代理 对于代理软件来说，默认是不会开启系统代理的。\n开启系统代理之后，对于系统中产生的所有流量都要过滤一遍，也就是每个链接都要拿过去对着list算一遍在不在里面\n如果开启了系统代理，我的steam就会被代理，所有很不喜欢\n好处是github desktop也可以被代理了……\n路由规则设置 这个东西我一致没有仔细研究过，说实话对我使用带来了很多不便，现在我下定决心研究一下并且把结果都写出来。\n我们可以看到路由规则有三种，\n别名 意义 全局 所有流量都代理 适合完全不用国内网站、服务的人 绕过大陆 只有名单内的国内ip、域名直连，如果有不在list里面的就代理， 适合上很多国外网站，但是国内只上很出名的网站的人 黑名单 仅代理list中的外国网站、被封的网站 适合上很多国内网站，国外小网站基本不去的人 没有最理想的方式，只有不断切换模式才能符合各种使用场景。\n未完待续…… 后面还会讲 v2rayN使用技巧 、 SocksCap64的使用、NoLsp等\n","date":"2022-03-10","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%8Eclash%E5%88%87%E6%8D%A2%E5%88%B0v2rayn%E8%BF%99%E4%BB%B6%E4%BA%8B/","series":[],"tags":["代理"],"title":"关于我从CLASH切换到v2rayN这件事"},{"categories":[""],"content":" 在这个网站五角钱的程序员/IT_book (gitee.com) 转载的一些书籍下载链接，如果书挂了可能要去看一下。\n自己找还挺麻烦的，不如就copy一份出来（顺便删除了广告）\n顺便删掉一些自己不喜欢的书。\n数据结构与算法相关书籍 漫画算法：小灰的算法之旅 百度云下载链接 密码:s9sb 算法（第4版） 百度云下载链接 密码:1a4z 剑指offer 百度云下载链接 密码:ttfn Java数据结构和算法 百度云下载链接 密码:a5am 数据结构与算法分析——Java语言描述 百度云下载链接 密码:iqi8 数据结构与算法 Python语言描述_裘宗燕 百度云下载链接 密码:qr8j 挑战程序设计竞赛 百度云下载链接 密码:byx1 大话数据结构 百度云下载链接 密码:lpdq 数据结构与算法分析\u0026ndash;C语言描述 百度云下载链接 密码:u0an 啊哈算法 百度云下载链接 密码:swxv 计算机基础 计算机网络 HTTP权威指南 百度云下载链接 密码:koaj 计算机网络 百度云下载链接 密码:4519 图解HTTP 百度云下载链接 密码:u3qi UNIX网络编程 百度云下载链接 密码:dil7 图解TCP-IP 百度云下载链接 密码:no3g 网络是怎样连接的 百度云下载链接 密码:l7iq 计算机组成原理 计算机是怎样跑起来的 百度云下载链接 密码:z8vz 隐匿在计算机软硬件背后的语言 百度云下载链接 密码:9284 大话计算机 百度云下载链接 密码:6iuh 隐匿在计算机软硬件背后的语言英文版 百度云下载链接 密码:jrvw 汇编语言 汇编语言【王爽，非常棒的一本书，通俗易懂】 百度云下载链接 密码:urea 操作系统 深入理解计算机操作系统 百度云下载链接 密码:pbvr 30天填自制操作系统 百度云下载链接 密码:z0zr 操作系统之哲学原理 百度云下载链接 密码:lfkd 程序是怎样跑起来的 百度云下载链接 密码:i9go 操作系统设计与实现 百度云下载链接 密码:nut5 python系列 python操作word,excel,pdf 百度云下载链接 密码:7w6s python基础 Python编程：从入门到实践 百度云下载链接 密码:dv8z Python数据分析基础教程：NumPy学习指南 百度云下载链接 密码:78u3 Python知识手册 百度云下载链接 密码:zgrv 机器学习numpy和pandas基础 百度云下载链接 密码:qb9a Pandas Basics卡片 百度云下载链接 密码:l5e2 NumPy Basics卡片 百度云下载链接 密码:zr3p Python开发技术详解 百度云下载链接 密码:b5ye Python开发实战 百度云下载链接 密码:awp5 Python学习手册 百度云下载链接 密码:c0j9 Python编程初学者指南 百度云下载链接 密码:09xw Python高级编程 百度云下载链接 密码:xq05 Python编程入门经典 百度云下载链接 密码:67yk Python灰帽子 百度云下载链接 密码:3dhw Python网络编程基础 百度云下载链接 密码:nhr6 编程小白的第一本Python入门书 百度云下载链接 密码:wetd 数据分析与爬虫 《Python For Data Analysis》 百度云下载链接 密码:i3qf 《Python3网络爬虫数据采集》 百度云下载链接 密码:twas Data Structures and Algorithms in Python 百度云下载链接 密码:qxfn Python for Data Analysis 百度云下载链接 密码:9g28 《Python数据分析基础》 百度云下载链接 密码:6q61 利用python进行数据分析-第二版 百度云下载链接 密码:2ekn 利用Python进行数据分析 百度云下载链接 密码:p4o3 Python数据分析实战 百度云下载链接 密码:rxaw 精通Scrapy网络爬虫 百度云下载链接 密码:faxj Python数据可视化编程实战 百度云下载链接 密码:qtfp Python数据处理 百度云下载链接 密码:d1cl 数据科学入门 百度云下载链接 密码:gfvc Python数据科学手册 百度云下载链接 密码:m4q4 用Python写网络爬虫 百度云下载链接 密码:ni0k 人工智能AI系列 计算机视觉 Computer vision 百度云下载链接 密码:8z7n 图像处理分析与机器视觉(第二版)中译本 百度云下载链接 密码:u6i6 python计算机视觉 百度云下载链接 密码:6gx2 OpenCv OpenCV-Python-Tutorial-中文版 百度云下载链接 密码:b3pn 学习OpenCV 3 中文版 百度云下载链接 密码:3s4s 深度学习框架-tensorflow TensorFlow 实战_黄文坚（完整） 百度云下载链接 密码:j199 TensorFlow 面向机器智能的TensorFlow实践 (智能系统与技术丛书) 百度云下载链接 密码:t3z9 TensorFlow 斯坦福大学-深度学习基础教程 百度云下载链接 密码:rmsj TensorFlow 官方文档中文版 百度云下载链接 密码:ni0k Tensorflow 实战Google深度学习框架（完整版pdf) 百度云下载链接 密码:oivb 深度学习框架-pytorch Programming-PyTorch-for-Deep-Learning 百度云下载链接 密码:2v1c 深度学习框架-keras Python For Data Science Cheat Sheet Keras 百度云下载链接 密码:b8ll Keras中文手册 百度云下载链接 密码:w5df 深度学习 deeplearning深度学习笔记 百度云下载链接 密码:aaxv 深度学习_中文版 百度云下载链接 密码:nq4w 深度学习入门：基于Python的理论与实现 百度云下载链接 密码:lvj7 常用推荐算法（50页干货） 百度云下载链接 密码:wiqd 动手学深度学习-李沐 百度云下载链接 密码:f33l 深度学习(最全的中文版) 百度云下载链接 密码:cxxi 机器学习实战 机器学习实战（附所有代码） 百度云下载链接 密码:6o5p PYTHON机器学习及实践－从零开始通往KAGGLE竞赛之路 百度云下载链接 密码:z87v 贝叶斯思维统计建模的Python学习法 百度云下载链接 密码:6qby 理论-周志华（机器学习）李航（统计学原理）等 机器学习_周志华 百度云下载链接 密码:oug5 统计学习方法-李航 百度云下载链接 密码:yu0u 自然语言处理(NLP) 斯坦福CS224n_自然语言处理与深度学习 百度云下载链接 密码:n7rx Writing Code for NLP Research 百度云下载链接 密码:am91 语音与语言处理Speech+and+Language+Processing 百度云下载链接 密码:4ysu deep_learning_for_nlp 百度云下载链接 密码:r2ma Embedding Methods for NLP emnlp tutorial 百度云下载链接 密码:g1oy PYTHON自然语言处理中文翻译 NLTK 中文版 百度云下载链接 密码:112z AI面试系列 机器学习 百度云下载链接 密码:ikee 机器学习常见面试题 百度云下载链接 密码:8w3r 百面_机器学习 算法工程师带你去面试。高清版带书签 百度云下载链接 密码:nzqr 大数据系列 Hadoop Hadoop The Definitive Guide 百度云下载链接 密码:fz20 Spark Spark大数据处理：技术、应用与性能优化(全) 百度云下载链接 密码:t4cn Spark最佳实践 百度云下载链接 密码:963f 图解Spark++核心技术与案例实战 百度云下载链接 密码:ju28 Spark快速大数据分析 百度云下载链接 密码:9ai8 深入理解Spark：核心思想与源码分析 百度云下载链接 密码:mopd Spark机器学习 百度云下载链接 密码:jmib Scala Scala编程中文版(33章全) 百度云下载链接 密码:wkmi 其他 大数据架构师指南 百度云下载链接 密码:3dtd 大数据之路：阿里巴巴大数据实践 百度云下载链接 密码:5123 Apache+Kylin权威指南 百度云下载链接 密码:0ypz Kafka \u0026amp; Mafka技术分享及讨论 百度云下载链接 密码:w7qs 【高扬】白话深度学习姊妹篇\u0026ndash;白话大数据与ML 百度云下载链接 密码:d9yp C语言 C Primer Plus 百度云下载链接 密码:njif C和指针 百度云下载链接 密码:22lz C专家编程 百度云下载链接 密码:eik1 C语言解析教程 百度云下载链接 密码:o9ej C程序设计语言-各种版本的C程序设计语言及其课后题答案 百度云下载链接 密码:5zl9 经典C程序100例 百度云下载链接 密码:ww8k C语言编程精粹 百度云下载链接 密码:22df C语言参考手册 百度云下载链接 密码:db3g C语言函数大全 百度云下载链接 密码:14cm C语言深度剖析 百度云下载链接 密码:2lvj C++ C++大学教程 百度云下载链接 密码:cuvn STL源码剖析 百度云下载链接 密码:o9rv C++编程思想 百度云下载链接 密码:q97e C++沉思录中文第2版 百度云下载链接 密码:xrxv C++ Primer 百度云下载链接 密码:aeao 深入探索C++对象模型 百度云下载链接 密码:qltd C++对象模型 百度云下载链接 密码:6zpm C++ Templates 百度云下载链接 密码:rmt1 C++编程规范-101条规则准则与最佳实践 百度云下载链接 密码:7f7s C++设计新思维-泛型编程与设计之应用 百度云下载链接 密码:nail Effective STL 中文版 百度云下载链接 密码:86q5 More Effective C++中文版 百度云下载链接 密码:c7av Java Java基础 码出高效 百度云下载链接 密码:nedl Head First Java 百度云下载链接 密码:f39y Java并发编程实践 百度云下载链接 密码:fwhs Java从小白到大牛 百度云下载链接 密码:tolg 深入理解Java虚拟机 百度云下载链接 密码:vfzi Java8实战 百度云下载链接 密码:57bv Java编程思想 百度云下载链接 密码:8xli Java并发编程的艺术 百度云下载链接 密码:tauv 阿里巴巴Java开发手册 百度云下载链接 密码:98zo Java进阶 代码大全 百度云下载链接 密码:o3zq Java性能优化权威指南 百度云下载链接 密码:4tfv 敏捷软件开发 百度云下载链接 密码:8uqr Effective Java 百度云下载链接 密码:74ba 代码整洁之道 百度云下载链接 密码:0jco Effective Java（英文版） 百度云下载链接 密码:jk2z JavaWeb 轻量级JavaEE企业应用实战 百度云下载链接 密码:uwge Head First Servlet and JSP 百度云下载链接 密码:xlpu Maven实战 百度云下载链接 密码:zjt5 Spring实战 百度云下载链接 密码:z32s 深入分析JavaWeb技术内幕 百度云下载链接 密码:2gcd 深入剖析Tomcat 百度云下载链接 密码:o4tr Camel in Action 百度云下载链接 密码:itrz 设计模式 研磨设计模式 百度云下载链接 密码:a0xy 图解设计模式 百度云下载链接 密码:ba3z Head First设计模式《important》 百度云下载链接 密码:v2rl 数据库 SQL查询的艺术 百度云下载链接 密码:xfrz MySQL必知必会 百度云下载链接 密码:hwk3 高性能MySQL 百度云下载链接 密码:sjp8 MySQL技术内幕InnoDB存储引擎 百度云下载链接 密码:lsto MongoDB权威指南 百度云下载链接 密码:cw6a SQLite 权威指南 百度云下载链接 密码:b58t 前端 HTML5与CSS3基础教程 百度云下载链接 密码:7srp Bootstrap实战 百度云下载链接 密码:fnf0 jQuery高级编程 百度云下载链接 密码:zx8d 疯狂aJax讲义 百度云下载链接 密码:3szv jQuery技术内幕 百度云下载链接 密码:crcu JavaScript DOM编程艺术 百度云下载链接 密码:rn2e HTML5揭秘 百度云下载链接 密码:g3av 【JavaScript高级程序设计（第3版）】中文 高清 百度云下载链接 密码:2bnz JavaScript高效图形编程 百度云下载链接 密码:hxhk jQuery权威指南 百度云下载链接 密码:jgsq Node.js开发指南 百度云下载链接 密码:4bie HTML5揭秘 百度云下载链接 密码:g3av Linux Linux系统命令及shell脚本实践指南linuxunix技术丛书 百度云下载链接 密码:9d27 鸟哥的Linux私房菜 百度云下载链接 密码:djoc Linux高级程序设计 百度云下载链接 密码:6d08 汇编语言基于linux环境第3版 百度云下载链接 密码:c7k8 Linux命令详解词典 百度云下载链接 密码:ukq3 Linux防火墙 百度云下载链接 密码:14p6 深入Linux内核架构 百度云下载链接 密码:h1k5 Linux环境编程 百度云下载链接 密码:fyrn 精通正则表达式 百度云下载链接 密码:jzgx Linux常用命令大全 百度云下载链接 密码:7v30 Go Go语言实战 百度云下载链接 密码:3wmy Go web编程 百度云下载链接 密码:3e3f redis实战 百度云下载链接 密码:ufxn 学习Go语言 百度云下载链接 密码:0hzt Git 《Pro Git》中文版 百度云下载链接 密码:1zrt 快速入门Git 百度云下载链接 密码:0u6n 专业git中文 百度云下载链接 密码:lsdl Git参考手册 百度云下载链接 密码:qq2v 数字信号 数字信号处理教程 第3版 by 程佩青 (z-lib.org) 百度云下载链接 密码:tvmt 提升能力 重构：改善既有代码的设计（第2版） 百度云下载链接 密码:7lve 码农翻身 百度云下载链接 密码:5c26 浪潮之巅 百度云下载链接 密码:6416 程序员面试宝典 百度云下载链接 密码:ukzv 奔跑吧，程序员：从零开始打造产品、技术和团队 百度云下载链接 密码:43ul ","date":"2022-03-07","img":"","permalink":"https://cornradio.github.io/hugo/posts/itbook/","series":[],"tags":["编程书籍"],"title":"IT BOOKS"},{"categories":[""],"content":"问题描述 有时候会出现这种情况：像上图一样，steam的好友网络无法访问，更关键的是这个东西会不定期的跳出来，比如，在你和其他敌人激烈对线的时候。\n解决办法 删除steam文件夹下的一些缓存文件来达到恢复使用的目的。\n打开steam目录 找到package文件夹 删除内部所有文件 傻瓜图示 ","date":"2022-03-05","img":"","permalink":"https://cornradio.github.io/hugo/posts/steam%E5%A5%BD%E5%8F%8B%E5%B7%B2%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E4%BF%AE%E5%A4%8D%E5%8A%9E%E6%B3%95/","series":[],"tags":["steam"],"title":"Steam好友已断开连接修复办法"},{"categories":[""],"content":"xyployer 教程 常用快捷键 功能 按键 开启树状图 F8 开启双面板 F10 自定义按钮 图床使用 imgur 如果无法看图请确保网络连通\n自定义按钮非常好用，可以把某个常用位置放到按钮上，需要一丢丢的“编程”\n然后左边点击，选一个按钮，添加到右边。\n然后再按钮栏里面就可以看到自己的按钮了，随便起个名字然后下面写：\n1goto \u0026#34;\u0026lt;文件路径\u0026gt;\u0026#34; 然后下次单击这个按钮就可以到一个指定目录里面了，超级方便！\n实际上这个是写的“script”，更多例子可以看这里：XYplorer - Tour - Scripting 保存Pane 默认打开了这个软件之后，会显示两个pane，每一个pane的标签页都是可以独立保存的（会保存你当前开启了那些标签页）。通过任务栏上面的“公文包”按钮就可以保存了。\n这里我选择的是上面的pane，然后右键-另存为，新建一个\n新建之后就可左键公文包来选择保存过的标签了。\n有一点要注意的是，现在正在使用的标签（minecarft），默认会在最后的时候（会在关闭窗体的时候）保存一下当前开启的标签页。\n色彩标注 非常棒的功能之一就是彩色标注功能，但是这个东西默认隐藏，我来教你如何打开它\n只需要右键然后把这个标注列选出来，就可以标注文件了！\n","date":"2022-02-17","img":"","permalink":"https://cornradio.github.io/hugo/posts/xypolyer/","series":[],"tags":["文件管理"],"title":"Xypolyer 使用教学"},{"categories":["centos","ssh"],"content":"今天ssh登录阿里云远程的centos，出现了\n1Permission denied (publickey,gssapi-keyex,gssapi-with-mic) 尝试使用生成的key（pem文件）没有成功。\n1ssh -i myvmubuntu.pem root@123.56.18.36 提示如下错误：\n1Permission denied (publickey,gssapi-keyex,gssapi-with-mic) 解决方案 修改这文件:\n1sudo vim /etc/ssh/sshd_config 搜索如下两项：并把后面修改成如下所示\n1PasswordAuthentication yes 2…… 3ChallengeResponseAuthentication no 重启sshd：\n1sudo systemctl restart sshd ","date":"2022-02-14","img":"","permalink":"https://cornradio.github.io/hugo/posts/ssh2/","series":[],"tags":[""],"title":"Permission Denied (Publickey,gssapi-Keyex,gssapi-With-Mic) 解决办法"},{"categories":[""],"content":"这个函数可是费我老大劲了。\n我可以保证，你无法在除了我发的——互联网任何一个地方找到这段代码。\n使用的dll需要在安装了ms office的电脑上才能找到。\n例子 1//测试：转换为pdf 2//在下面两个文件夹中找到 office 和 Microsoft.Office.Interop.Excel 两个dll 3//C:\\Windows\\assembly\\GAC_MSIL\\Microsoft.Office.Interop.Excel\\15.0.0.0__71e9bce111e9429c 4//C:\\Windows\\assembly\\GAC_MSIL\\office\\15.0.0.0__71e9bce111e9429c 5private void button2_Click(object sender, EventArgs e) 6{ 7 string filePath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @\u0026#34;\\Sample\\wb.xlsx\u0026#34;; 8 string filePath2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @\u0026#34;\\Sample\\wb.pdf\u0026#34;; 9 //List\u0026lt;string\u0026gt; files = new List\u0026lt;string\u0026gt;(); 10 //files.Add(filePath); 11 Application application = new ApplicationClass(); 12 Workbook workbook = application.Workbooks.Open(filePath); 13 workbook.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, filePath2, XlFixedFormatQuality.xlQualityStandard); 14} 封装函数 1public static void ConvertExcelToPDF(string sourcePath,string targetPath) 2{ 3 Application application ; 4 Workbook workbook ; 5 try 6 { 7 application = new ApplicationClass(); 8 workbook = application.Workbooks.Open(sourcePath); 9 workbook.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, targetPath, XlFixedFormatQuality.xlQualityStandard); 10 } 11 catch (Exception e) 12 { 13 ConsoleWriter.WriteErrorMessage(\u0026#34;pdf输出 出错\u0026#34;); 14 } 15} 那个叫做Spire的库可真是害惨我了。\nSpire.XLS提供了很简单的例子，但是报错却非常非常的诡异。网上没有任何相关信息。\n一看实现，好家伙，一堆goto\n而且Spire还有不支持excel默认编码的问题IBM 472\nSpire在读取xlsx的时候报编码错误可以用nuget安装这个包来解决：\n1system.text.encoding.codepages 1Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);//增加编码支持。 Spire 我用来调整了一下表格列宽什么的，还是挺好用的，但是它内部肯定有问题。另存为PDF根本就是一坨屎。\n更多代码可以参考我的github ","date":"2022-01-09","img":"","permalink":"https://cornradio.github.io/hugo/posts/excel%E8%BD%AC%E6%8D%A2pdf/","series":[],"tags":["c#","excel","PDF"],"title":"Excel转换pdf"},{"categories":[""],"content":"我做了一个c#的docx函数库。\npython操作word实在是太垃了，尤其是涉及到多表、页眉页脚，甚至有时候好好的段落硬是搜不到。所以我转向了对于word操作支持更好的c#。\n说是讲实现，实际上只讲了使用。毕竟实现挺复杂的也不好讲，不如感兴趣的自己看源码吧。我这里直接讲讲怎么用我这个函数就好了。\ngithub resourcehere: kasusa/Docx_Search 简介 本库主要适用于docx文件的修改、段落搜索、表格搜索等，填补了官方未提供的“搜索”功能的空白。\n功能主要包括：\nword中所有图片提取为bitmap 搜索段落 搜索表格 删除段落 获取单元格（cell）的内容 批量替换 保存到桌面 out文件夹 依赖 本库是基于开源*非商用的docx库编写的。引用如下两个库，可以在这里下载：xceedsoftware/DocX ，这个项目提供了一些非常实用的例子，建议新手先看他们的例子来学习c#操作word的逻辑。\n1using Xceed.Document.NET; 2using Xceed.Words.NET; 创建对象 我把官方的document对象又封装了一遍，这样使用函数的时候更加直观。\n1myutil tempo;//我的word对象 2//docx文件的路径 3string tempo_path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @$\u0026#34;\\Sample\\方案\\方案A.docx\u0026#34;; 4if (System.IO.Directory.Exists(tempo_path)) 5{ 6 //初始化对象 7 tempo = new myutil(a); 8} 搜索段落 搜索段落如同word中一样，使用string作为关键字进行搜索，实现下来整体速度还不错。\n有的时候一篇word中搜索一个关键词可能有好几个结果，这种时候返回list的就派上用场了。\n有的时候可能要操作的段落不好定位，但是可以确定他在某个标题的下面，index搜索就派上用场了，返回的index+1差不多就是需要的段落位置了。\n注意：xceed.docx的实现比较完善，可以搜索到目录、表格中的段落，所以有时候搜索错了可能是搜索到目录里面了……\n我写了几种类型的搜索函数：\n1Find_Paragraph_for_p(string v) //搜索后返回paragraph 2Find_Paragraph_for_plist(string v) //搜索后返回paragraph列表 3Find_Paragraph_for_text(string v) //搜索后返回string（段落的文字内容） 4Find_Paragraph_for_i(string v) //搜索后返回段落的index 5Find_Paragraph_for_ilist(string v) //搜索后返回段落的index list 举一个实际的例子：\n1//搜索“本报告记录编号：”，返回段落的text 2tmpstr = doc.Find_Paragraph_for_text(\u0026#34;本报告记录编号：\u0026#34;); 3//获取到：本报告记录编号：P2021XXXXX-GB01。 4//处理切分一下字符串，获取到我需要的部分 5tmpstr = myutil.get_string_after(tmpstr, \u0026#34;本报告记录编号：\u0026#34;, \u0026#34;P2021XXXXX\u0026#34;.Length);//结果：P2021XXXXX 再举一个例子：\n1//搜索总体评价（一级标题），获取其后面段落的内容 2int i = doc.Find_Paragraph_for_ilist(\u0026#34;总体评价\u0026#34;)[0] + 1; 3a = doc.document.Paragraphs[i].Text; 搜索的时候如果得到的结果不是很正常，就要看看word中是不是又多个能搜到的位置了。\n搜索表格 搜索表格是一个我自创的功能，他是利用表头（首行）的文字内容对整个word中的所有表标题进行检索,如果某一个表格的第一行和给的参数相同，就认为是查找到了这张表。\n经过我的实际测试，速度还算可以。\n1//寻找表头文字为“序号\t机房名称\t物理位置\t重要程度”的第一张表 2//注意这里我没有删除空格和tab，这是为了从word中复制过来方便，实际在函数中会把空格、tab字符都删除后进行对比 3var table1 = doc.findTableList(\u0026#34;序号\t机房名称\t物理位置\t重要程度\u0026#34;)[0]; 下面是我实现的一个表格复制函数。从word1中把t1复制到t2，可以选择是否包含表头。\n1#region 表格复制函数 2/// \u0026lt;param name=\u0026#34;t1head\u0026#34;\u0026gt;table1 表头\u0026lt;/param\u0026gt; 3/// \u0026lt;param name=\u0026#34;i1\u0026#34;\u0026gt;table1 所在index\u0026lt;/param\u0026gt; 4/// \u0026lt;param name=\u0026#34;t2head\u0026#34;\u0026gt;table2 表头\u0026lt;/param\u0026gt; 5/// \u0026lt;param name=\u0026#34;i2\u0026#34;\u0026gt;table 2 所在index\u0026lt;/param\u0026gt; 6void CopyTable(string t1head, string t2head, int i1 = 0, int i2 = 0) 7{ 8 bool toremove = false; 9 var table1 = doc.findTableList(t1head)[i1]; 10 ConsoleWriter.WriteColoredText(\u0026#34;table 报告中 ↑\u0026#34;, ConsoleColor.Green); 11 var table2 = tempo.findTableList(t2head)[i2]; 12 ConsoleWriter.WriteColoredText(\u0026#34;table 模板中 ↑\u0026#34;, ConsoleColor.Green); 13 //如果t1比t2更宽，增加一列临时列 14 if (table1.ColumnCount \u0026gt; table2.ColumnCount) 15 { 16 table2.InsertColumn(); 17 toremove = true; 18 } 19 //如果t1比t2更窄，直接给t2瘦身 20 else if (table1.ColumnCount \u0026lt; table2.ColumnCount) 21 { 22 table2.RemoveColumn(table2.ColumnCount-1); 23 } 24 //删除所有空的内容行 25 while (table2.RowCount \u0026gt; 1) 26 { 27 table2.RemoveRow(table2.RowCount - 1); 28 } 29 //从内容行数开始复制 30 for (int i = 1; i \u0026lt; table1.RowCount; i++) 31 { 32 Xceed.Document.NET.Row row = table1.Rows[i]; 33 34 table2.InsertRow(row); 35 } 36 //删除多复制过来的列 37 if (toremove) 38 { 39 table2.RemoveColumn(table2.ColumnCount - 1); 40 } 41 ConsoleWriter.WriteColoredText(\u0026#34;复制表完毕;\u0026#34;, ConsoleColor.Yellow); 42 43} 44 45/// \u0026lt;summary\u0026gt; 46/// 复制表t1到表t2（包含表头） 47/// \u0026lt;/summary\u0026gt; 48/// \u0026lt;param name=\u0026#34;t1head\u0026#34;\u0026gt;table1 表头\u0026lt;/param\u0026gt; 49/// \u0026lt;param name=\u0026#34;i1\u0026#34;\u0026gt;table1 所在位数\u0026lt;/param\u0026gt; 50/// \u0026lt;param name=\u0026#34;t2head\u0026#34;\u0026gt;table2 表头\u0026lt;/param\u0026gt; 51/// \u0026lt;param name=\u0026#34;i2\u0026#34;\u0026gt;table 2 所在位数\u0026lt;/param\u0026gt; 52void CopyTable_withHead(string t1head, string t2head, int i1 = 0, int i2 = 0) 53{ 54 bool toremove = false; 55 var table1 = doc.findTableList(t1head)[i1]; 56 ConsoleWriter.WriteColoredText(\u0026#34;table 报告中 ↑\u0026#34;, ConsoleColor.Green); 57 var table2 = tempo.findTableList(t2head)[i2]; 58 ConsoleWriter.WriteColoredText(\u0026#34;table 模板中 ↑\u0026#34;, ConsoleColor.Green); 59 //如果t1比t2更宽，增加一列临时列 60 if (table1.ColumnCount \u0026gt; table2.ColumnCount) 61 { 62 table2.InsertColumn(); 63 toremove = true; 64 } 65 //如果t1比t2更窄，直接给t2瘦身 66 else if (table1.ColumnCount \u0026lt; table2.ColumnCount) 67 { 68 table2.RemoveColumn(table2.ColumnCount - 1); 69 } 70 //删除所有空的内容行 71 while (table2.RowCount \u0026gt; 1) 72 { 73 table2.RemoveRow(table2.RowCount - 1); 74 } 75 //从内容行数开始复制 76 for (int i = 0; i \u0026lt; table1.RowCount; i++) 77 { 78 Xceed.Document.NET.Row row = table1.Rows[i]; 79 80 table2.InsertRow(row); 81 } 82 //删除多复制过来的列 83 if (toremove) 84 { 85 table2.RemoveColumn(table2.ColumnCount - 1); 86 } 87 //删除顶部的原始行（表头总是有问题服了） 88 table2.RemoveRow(0); 89 ConsoleWriter.WriteColoredText(\u0026#34;复制表完毕;\u0026#34;, ConsoleColor.Yellow); 90 91} 92 93#endregion 文字批量替换 文字批量替换是我参考官方文档的例子写出来的，因为功能很常用所以把他包含到了库中。\n1//向字典里面添加【被替换str】、【替换成str】 2doc._replacePatterns.Add(\u0026#34;P2021xxxxx\u0026#34;, \u0026#34;P202100001\u0026#34;); 3doc._replacePatterns.Add(\u0026#34;AAAAA\u0026#34;, \u0026#34;可口可乐公司\u0026#34;); 4 5doc.ReplaceTextWithText_all_noBracket();//自动搜索文档中所有在字典里面的内容并替换 明天过生日啦~\n","date":"2022-01-07","img":"","permalink":"https://cornradio.github.io/hugo/posts/docx%E7%9A%84%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0/","series":[],"tags":["c#","docx"],"title":"Docx的搜索实现"},{"categories":[""],"content":"2022年的第一个帖子！\n今年的元旦我老妈从黑龙江过来看我。\n在这之前，我一直有点嘴巴上火还是什么的，有好几个大大的溃疡，非常疼！\n直到31号，我妈到了这边，我早上从公交站把她接过来，看看我住的小房间。\n第一天，是周五，我去上班，我妈在家里就收拾了屋子。我中午的午休的时候领着她去吃了一下我常吃的菜馆，结果她说好难吃呀！还那么贵，我平常到也都习惯了，没有感觉啥。\n晚上开始，我妈给我做了一堆好吃的，小凉菜和红烧肉啥的。都是我爱吃的东北菜，然后教我自己做饭啥的。还把这边的洗手池什么的擦得亮晶晶的，非常干净！\n跨年夜的晚上我们挤在我的不大不小的双人床上，两个厚被子把整个床弄得非常拥挤。\n这几天我大饱口福，反而体重还下降了一点。确实是不要吃外面的垃圾东东了。虽然会费时间一些，以后多多少少我也要自己做点菜啥的了。毕竟这次过来之后她还给我买好了调料，放好了电饭锅的位置啥的。以后我也不至于只有食用盐和酱油做菜吃了。\n短短三天一下子就过去了。我在今年要考证书，cisp和等保初级必须考掉。\n然后升级下工资，换个有自己卫生间和厨房的地方。\n控制一下饮食*米饭啥的，重量控制控制。已经不能再继续重下去了~~~\n今天4号，是第一天节后上班。\n一早上我起床我妈就弄好了吃的，饺子和紫菜汤。吃完了就出去挤地铁了。\n白天扫描扫描漏洞、看了个机房整理了下记录表一天就结束了。\n晚上回家也有好吃的等着我，到家就吃饭了！开心。\n倒也不一直非常愉快啦，有时候会有烦人的唠叨和半夜的扰人呼噜声。不过总的来说，我妈过来一趟我还是很开心的！\n过年回家的机票实在是太贵了，我感觉还有怕疫情影响啥的，所以今年就没有买票呢，也没有决定到底是否回家过年去。\n感觉最快乐的就是在我一边打游戏，我妈妈在那里做饭，然后我打完了一起吃个饭了。\n吃完饭在出去遛弯，最后再去休息一下，刷刷手机。最棒的日子。\n","date":"2022-01-04","img":"","permalink":"https://cornradio.github.io/hugo/posts/2022/","series":[],"tags":[""],"title":"2022"},{"categories":[""],"content":"使用python移动文件和新建目录主要是用于大量的文档分类工作，以下是代码部分:\n1import os #新建目录 2import shutil #复制文件 3# 新建一个文件夹out 然后把f.txt复制到out文件夹中： 4# r字符串可以不需要写\\\\，对于windows目录操作比较实用 5original = r\u0026#39;f.txt\u0026#39; 6target = r\u0026#39;out\\f.txt\u0026#39; 7 8if not os.path.exists(\u0026#39;out\u0026#39;): #当文件已存在时，无法创建该文件所以需要先检查 9 os.mkdir(r\u0026#39;out\u0026#39;) 10shutil.copyfile(original,target) #复制文件 下面来一个实用的例子，把一个文件夹中，文件名称包含了“xxx系统”的文件都放到指定文件夹中：\n1mylist = os.listdir(\u0026#39;文件目录\u0026#39;) # 获取某个目录下的全部文件名称 2 3for item in mylist: 4 if item.__contains__(\u0026#39;系统名称\u0026#39;): 5 shutil.copy(\u0026#39;文件目录\u0026#39; + \u0026#39;\\\\\u0026#39; + item, \u0026#39;输出目录\u0026#39; + \u0026#34;\\\\\u0026#34; +item ) 它最大的实用性就在对于多个文件的自定义命名。很方便。\n","date":"2021-12-11","img":"","permalink":"https://cornradio.github.io/hugo/posts/python%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%95/","series":[],"tags":["python"],"title":"Python移动文件、新建目录"},{"categories":[""],"content":"用python操作word::docx库的使用方法 python-docx这个库，说好用不好用，但是他是python上面唯一的选择，这里我就来简单的讲解一下它的使用方法，让小白看了能明白，会用的人可以从我下面拷贝点现成的函数避免重复造轮子。\n","date":"2021-12-07","img":"","permalink":"https://cornradio.github.io/hugo/posts/python%E6%93%8D%E4%BD%9Cword/","series":[],"tags":["python"],"title":"Python操作word"},{"categories":[""],"content":"一个可视化应用程序难免要保存一些数据，保存数据如果要自己手动操作文件的话就感觉很麻烦，好在微软提供一个很好用的保存功能，这就让我给你讲一下：\n这里是我写的一个小c#程序，需要保存的内容就是这上面4个textbox的东东。\n操作 右键项目属性，选择左侧的设置 增加一些变量名称，这里还能手动选择变量类型、默认值（范围选择用户即可，然后应该会保存到一个用户文件夹下面的一个不知道什么鬼地方） 访问： 1using hugoAuto1.Properties; 2 3textBox1.Text = Settings.Default.source; 保存： 1using hugoAuto1.Properties; 2 3Settings.Default.source = textBox1.Text; 4Settings.Default.Save(); 原理和操作就是这么简单，用起来也很方便！\n","date":"2021-11-30","img":"","permalink":"https://cornradio.github.io/hugo/posts/csharp%E4%BF%9D%E5%AD%98%E8%AE%BE%E7%BD%AE/","series":[],"tags":["c#"],"title":"C# 保存程序设置"},{"categories":[""],"content":"我想要默认开启电脑的clash全局代理。但是要求steam这个东东登录和下载（尤其是游戏下载）不要走代理。下载太耗费流量了，还不能跑满网速。\n下载游戏的同时我还会上网。如果特意为了steam把clash关了我就不能上外网了。\n最后在github的一个issue里面看到了这个： 0.16.2 版，Steam 商店、社区无法加载 · Issue #2035 · Fndroid/clash_for_windows_pkg (github.com) 1bypass: 2# Steam中国大陆地区游戏下载 3 - \u0026#34;steampipe.steamcontent.tnkjmec.com\u0026#34; #华为云 4 - \u0026#34;st.dl.eccdnx.com\u0026#34; #白山云 5 - \u0026#34;st.dl.bscstorage.net\u0026#34; 6 - \u0026#34;st.dl.pinyuncloud.com\u0026#34; 7 - \u0026#34;dl.steam.clngaa.com\u0026#34; #金山云 8 - \u0026#34;cdn.mileweb.cs.steampowered.com.8686c.com\u0026#34; #网宿云 9 - \u0026#34;cdn-ws.content.steamchina.com\u0026#34; 10 - \u0026#34;cdn-qc.content.steamchina.com\u0026#34; #腾讯云 11 - \u0026#34;cdn-ali.content.steamchina.com\u0026#34; #阿里云 12# Steam非中国大陆地区游戏下载/社区实况直播 13 - \u0026#34;*.steamcontent.com\u0026#34; 14# Steam国际创意工坊下载CDN 15 - \u0026#34;steamusercontent-a.akamaihd.net\u0026#34; #CDN-Akamai 16# Origin游戏下载 17 - \u0026#34;ssl-lvlt.cdn.ea.com\u0026#34; #CDN-Level3 18 - \u0026#34;origin-a.akamaihd.net\u0026#34; #CDN-Akamai 19# Battle.net战网中国大陆地区游戏下载 20 - \u0026#34;client05.pdl.wow.battlenet.com.cn\u0026#34; #华为云 21 - \u0026#34;client02.pdl.wow.battlenet.com.cn\u0026#34; #网宿云 22# Battle.net战网非中国大陆地区游戏下载 23 - \u0026#34;level3.blizzard.com\u0026#34; #CDN-Level3 24 - \u0026#34;blzddist1-a.akamaihd.net\u0026#34; #CDN-Akamai 25 - \u0026#34;blzddistkr1-a.akamaihd.net\u0026#34; 26 - \u0026#34;kr.cdn.blizzard.com\u0026#34; #CDN-Blizzard 27 - \u0026#34;us.cdn.blizzard.com\u0026#34; 28 - \u0026#34;eu.cdn.blizzard.com\u0026#34; 29# Epic Games中国大陆地区游戏下载 30 - \u0026#34;epicgames-download1-1251447533.file.myqcloud.com\u0026#34; 31# Epic Games非中国大陆地区游戏下载 32 - \u0026#34;epicgames-download1.akamaized.net\u0026#34; #CDN-Akamai 33 - \u0026#34;download.epicgames.com\u0026#34; #CDN-Amazon 34 - \u0026#34;download2.epicgames.com\u0026#34; 35 - \u0026#34;download3.epicgames.com\u0026#34; 36 - \u0026#34;download4.epicgames.com\u0026#34; 37# Rockstar Launcher客户端更新/游戏更新/游戏下载 38 - \u0026#34;gamedownloads-rockstargames-com.akamaized.net\u0026#34; 39# GOG中国大陆游戏下载/客户端更新 40 - \u0026#34;gog.qtlglb.com\u0026#34; 41# GOG非中国大陆游戏下载/客户端更新 42 - \u0026#34;cdn.gog.com\u0026#34; 43 - \u0026#34;galaxy-client-update.gog.com\u0026#34; 44 - localhost 45 - 127.* 46 - 10.* 47 - 172.16.* 48 - 172.17.* 49 - 172.18.* 50 - 172.19.* 51 - 172.20.* 52 - 172.21.* 53 - 172.22.* 54 - 172.23.* 55 - 172.24.* 56 - 172.25.* 57 - 172.26.* 58 - 172.27.* 59 - 172.28.* 60 - 172.29.* 61 - 172.30.* 62 - 172.31.* 63 - 192.168.* 64 - \u0026lt;local\u0026gt; 使用方法 原理：在bypass列表中的域名、ip会直接跳过\n域名需要用英文双引号包起来 ip可以直接写 可以使用【星号】作为通配符 打开clash的设置，找到bypass，按照需要粘贴并保存： ![[Pasted image 20211130132003.png]] ![[Pasted image 20211130132122.png]] 我的例子 这个例子方便我后面自己取用。\n1bypass: 2 - \u0026#34;*.bing.com\u0026#34; 3 - \u0026#34;*.microsoft.com\u0026#34; 4# Steam中国大陆地区游戏下载 5 - \u0026#34;steampipe.steamcontent.tnkjmec.com\u0026#34; #华为云 6 - \u0026#34;st.dl.eccdnx.com\u0026#34; #白山云 7 - \u0026#34;st.dl.bscstorage.net\u0026#34; 8 - \u0026#34;st.dl.pinyuncloud.com\u0026#34; 9 - \u0026#34;dl.steam.clngaa.com\u0026#34; #金山云 10 - \u0026#34;cdn.mileweb.cs.steampowered.com.8686c.com\u0026#34; #网宿云 11 - \u0026#34;cdn-ws.content.steamchina.com\u0026#34; 12 - \u0026#34;cdn-qc.content.steamchina.com\u0026#34; #腾讯云 13 - \u0026#34;cdn-ali.content.steamchina.com\u0026#34; #阿里云 14# Steam非中国大陆地区游戏下载/社区实况直播 15 - \u0026#34;*.steamcontent.com\u0026#34; 16# Battle.net战网中国大陆地区游戏下载 17 - \u0026#34;client05.pdl.wow.battlenet.com.cn\u0026#34; #华为云 18 - \u0026#34;client02.pdl.wow.battlenet.com.cn\u0026#34; #网宿云 19# Epic Games中国大陆地区游戏下载 20 - \u0026#34;epicgames-download1-1251447533.file.myqcloud.com\u0026#34; 21# Rockstar Launcher客户端更新/游戏更新/游戏下载 22 - \u0026#34;gamedownloads-rockstargames-com.akamaized.net\u0026#34; ","date":"2021-11-30","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E8%AE%A9steam%E7%BB%95%E8%BF%87clash%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86/","series":[],"tags":["clash","steam"],"title":"Steam如何绕过clash的全局代理"},{"categories":[""],"content":"毕业 2021年是我毕业的一年。也是我做了很多事情都失败了的一年。\n失败事项：\n考研 考公 出国做交换项目 考研和考公我可以认为是准备不充分所以失败了，出国的话是担心疫情而且家里经济条件也没有那么可以……所以最终在大四毕业的时候，我面临两个选择：1 回家继续准备考研 2 直接开始工作\n在大四准备考研的时候，我感觉自己实际上也付出了很多，花了很多时间学习、英语和政治考的都不错，可惜我的数学和专业课分数不太行，数学甚至没有及格。真的是超垃圾呢\u0026ndash;后来总结下来我也没什么好说的，首先是之前没有做好准备，都已经到了夏天才堪堪开始准备，并且我的内心里面不是很想考研。\n时间线是这样的\n1|-2020.7-----2020.9-----2020.12-----2021.2------2021.3-----2021.4------2021.5-----2021.7----至今-| 2 准备考研 考研报名\t考研考试 考试出结果 准备考公 考公考试 工作实习 正式入职 工作数个月 这个短短的时间里面我准备了两场大考试，准备不充分、再加上考试难度是较高的，所以结果不好是在我的预见范围之内的。找工作的话就比较神奇了，我一开始面试了一些开发的地方，我感觉他们的办公环境都不太好，而且面试的时候我当时还没有出考公成绩，而且心里还是想着继续准备考研二战，所以就没有面试成，到后面我也是差不多的心态，并没有相信有什么成功的面试的来着。这个入职可以说是偶然的巧合，或者是冥冥中的选择吧。\n在实习的时候，我每天都要坐地铁坐好远，到这里（我现在就在单位附近租房子住了）每天都要花费两个小时在地铁上。\n其实多少有点在手机上面的新闻的关系，说什么程序员中年危机呀，什么35岁被辞退，在被辞退之前就是人肉干电池从9点干到晚上12点呀，总之我怕了，我怕我变成一个麻木的只有工作的人，我也怕在我中年的时候突然天降一口大锅让我失去生活资金的来源；而且我还有一点，我怕我喜爱的打代码变成了我最厌烦的事情。所以我找工作的时候并没有往开发的方向去找，而是去找了一些和开发不是非常强相关的\u0026ndash;比如现在：网络安全等级保护测评师。\n","date":"2021-11-15","img":"","permalink":"https://cornradio.github.io/hugo/posts/2021/","series":[],"tags":["生活"],"title":"2021"},{"categories":null,"content":" cmatrix 黑客帝国命令行\nGow 让win可以用大部分linux常用命令\n","date":"2021-11-15","img":"","permalink":"https://cornradio.github.io/hugo/posts/funstuff/","series":null,"tags":["ubuntu","命令行"],"title":"Linux Fun Stuff"},{"categories":null,"content":"1using System.Diagnostics; 2 3private void runincmd(string yourcommand) 4{ 5string strCmdText; 6strCmdText = $\u0026#34;/C {yourcommand}\u0026#34;; 7Process.Start(\u0026#34;CMD.exe\u0026#34;, strCmdText); 8} Process.Start(string 程序, string 参数);\n程序最好是有完整的地址，如果不需要传入参数的话可以只传入一个参数。\n上面这个语句启动一个程序并且可以附带一些参数，本质上是把要执行的命令作为windows cmd 的参数传入了，所以只能传入一行，多行可能还需要写个bat脚本。\n如果需要“静音启动”的话写起来比较麻烦，可以这么做到：\n1ProcessStartInfo processStartInfo = 2\tnew ProcessStartInfo(txtExecutable.Text.Trim(), txtParameter.Text.Trim()); 3//保持静音 4processStartInfo.ErrorDialog = false; 5processStartInfo.UseShellExecute = false; 6//用于重定向输出 7processStartInfo.RedirectStandardError = true; 8processStartInfo.RedirectStandardInput = true; 9processStartInfo.RedirectStandardOutput = true; 10//用上面的设定新建一个进程 11Process process = new Process(); 12process.StartInfo = processStartInfo; 13//以下是输出 output 或者 error msg 14if (processStarted) 15{ 16 //Get the output stream 17 outputReader = process.StandardOutput; 18 errorReader = process.StandardError; 19 process.WaitForExit();//这局可能把人卡住 20 21 //展示 22 string displayText = \u0026#34;Output:\u0026#34; + Environment.NewLine; 23 displayText += outputReader.ReadToEnd(); 24 displayText +=\u0026#34;Error:\u0026#34; + Environment.NewLine ; 25 displayText += errorReader.ReadToEnd(); 26 txtResult.Text = displayText; 27 28 //关闭stream 29 if(outputReader != null) outputReader.Close(); 30 if(errorReader != null) errorReader.Close(); 31} 我一开始打算把cmd搬到我的winform里面（可以实时更新输出的那种），但是我搜了好久也没有可以拷贝的代码，而且获取输出并且贴到textbox中会有时产生莫名其妙的死循环，于是我便放弃了于是就选择了功能相同但是弹出窗口的了。\n这个函数除了这些功能还可以做打开浏览器指定网页、打开文件夹等，是一个windows环境很常用的c#函数了\n1//打开浏览器指定网页 2private void openinbrowser(string link) 3{ 4 string strCmdText; 5 strCmdText = $\u0026#34;{link}\u0026#34;; 6 Process process = Process.Start(@\u0026#34;C:\\Users\\kasusa\\AppData\\Local\\Google\\Chrome\\Application\\Chrome.exe\u0026#34;, strCmdText); 7} 1//打开文件夹 2Process.Start(\u0026#34;explorer.exe\u0026#34;, @\u0026#34;c:\\test\u0026#34;); 对了，这里我同时说两个好用的string用法，他们分别是@和$:（语法糖)\n1@ 可以输出源字符串而不做转义，这对于string写文件目录很有用： 2如果没有@ 系统会对\\U \\k \\D \\G 挨个转义，碰到转义失败的就报错了。 3string a = @\u0026#34;C:\\Users\\kasusa\\Documents\\Gitee\u0026#34;; 4 5$ 可以快速的在一个字符串中插入一个变量而不需要用一堆的引号和加号 6string b = \u0026#34;cake\u0026#34;; 7string c = $\u0026#34;i love eating {b}， and drink cola！\u0026#34;; ","date":"2021-11-14","img":"","permalink":"https://cornradio.github.io/hugo/posts/cs%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/","series":null,"tags":["c#","编程"],"title":"C#执行命令"},{"categories":null,"content":"正规站 bilibili https://www.bilibili.com/ netflix https://www.netflix.com/browse 正常剧 低端影视 https://ddrk.me/ 奈飞影视 https://www.nfmovies.com/ 动画片 紫可可 http://zikeke.net/ AGE FANS https://www.agefans.cc/ 短视频 Coub https://coub.com/ 开眼 https://home.eyepetizer.net/ emmm X video https://www.xvideos.com/ Sex.com https://www.sex.com/ PornHub https://cn.pornhub.com/ ","date":"2021-07-18","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E9%9B%86/","series":null,"tags":["web","导航"],"title":"视频网站集"},{"categories":null,"content":"Windows10 DPI Fix http://windows10-dpi-fix.xpexplorer.com/ 这个软件的功能是修复win10在缩放125%的情况下产生的字体模糊。\n他的原理是调用win7/8.1的缩放DPI，这个老的DPI是专门为电脑设计的。而win10当时有向移动端发展的想法，便用了一个新的缩放dpi，为了照顾手机的性能，缩放之后还会变模糊，我想这才是我真正讨厌缩放的原因吧。但是不缩放15寸小屏幕很瞎眼。\n这个应用真的很好地解决了我的缩放问题，在此推荐给所有人。\n","date":"2021-06-22","img":"","permalink":"https://cornradio.github.io/hugo/posts/windows10dpifix/","series":null,"tags":["win10","软件"],"title":"Win10 DPI FIX"},{"categories":null,"content":"打开文件夹和选择其中某一项\n1private void openExplorer() 2{ 3 string FilePath = Directory.GetCurrentDirectory(); 4 //打开文件夹并选中文件 5 System.Diagnostics.Process.Start(\u0026#34;Explorer\u0026#34;, \u0026#34;/select,\u0026#34; + FilePath + \u0026#34;\\\\\u0026#34; + \u0026#34;infolist.xml\u0026#34;); 6 //仅打开文件夹 7 System.Diagnostics.Process.Start(FilePath); 8} 读取某位置的指定后缀文件（列表），把名字存入combobox\n1//读取xml文件，填充combobox列表 2public void getCombobox() 3{ 4 comboBox1.Items.Clear(); 5//获取当前程序目录，获取所有xml文件绝对地址 6 var files = Directory 7 .GetFiles(Directory.GetCurrentDirectory(), \u0026#34;*.xml\u0026#34;); 8 //提取路径地址+/为了在后面把完整路径剔除 9 string pathstr = Directory.GetCurrentDirectory()+\u0026#34;\\\\\u0026#34; ; 10 int count = 0; 11 foreach (var file in files) 12 { 13 //逐个把文件名放在combox中 14 comboBox1.Items.Add(file.ToString().Replace(pathstr, \u0026#34;\u0026#34;)); 15 count++; 16 } 17 toolStripStatusLabel1.Text = $\u0026#34;读取到了【{count}】个xml文件。\u0026#34;; 18} ","date":"2021-06-04","img":"","permalink":"https://cornradio.github.io/hugo/posts/csharp%E6%89%93%E5%BC%80%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E9%80%89%E5%AE%9A%E6%96%87%E4%BB%B6/","series":null,"tags":["csharp","winform"],"title":"C#文件管理器、读取文件列表"},{"categories":null,"content":"https://zhuanlan.zhihu.com/p/128588859 在项目中添加一个：应用程序清单文件\n在清单文件app.manifest的 \u0026lt;/assembly\u0026gt; 标签下添加\n1\u0026lt;application xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v3\u0026#34;\u0026gt; 2 \u0026lt;windowsSettings\u0026gt; 3 \u0026lt;dpiAware xmlns=\u0026#34;http://schemas.microsoft.com/SMI/2005/WindowsSettings\u0026#34;\u0026gt;true\u0026lt;/dpiAware\u0026gt; 4 \u0026lt;/windowsSettings\u0026gt; 5\u0026lt;/application\u0026gt; 适配DPI之后，即便是电脑dpi为缩放的情况下， 仍然可以清晰的显示文字。\n","date":"2021-06-02","img":"","permalink":"https://cornradio.github.io/hugo/posts/winform%E9%80%82%E9%85%8Ddpi/","series":null,"tags":["csharp","winform","dpi"],"title":"Winform适配dpi"},{"categories":null,"content":"最近写了一个工作用的小程序：https://github.com/kasusa/archive_helper 然后从开始写到现在大概花了5小时左右。用到了系统剪切板、listbox、object序列化并存储为xml、打开指定文件夹并选中指定文件。还有就是一些winform上的设计。\n你可以看到右下角的按钮，我感觉把那几个按钮摆在那个位置真的是太天才了，而且那些个按钮都是emoji，并没有用图片，整个程序仍然很小巧。\n","date":"2021-06-02","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E5%BD%92%E6%A1%A3%E8%BE%85%E5%8A%A9%E5%B0%8F%E7%A8%8B%E5%BA%8F/","series":null,"tags":["csharp","winform"],"title":"归档辅助小程序"},{"categories":null,"content":"info是我自己定义的一个类。\n下面是如何删除linklist中指定item的办法。\n1LinkedList\u0026lt;info\u0026gt; infolist = new LinkedList\u0026lt;info\u0026gt;(); 2 3string todelete = \u0026#34;1\u0026#34;; 4 5info tmpitem = new info(); 6foreach (var item in infolist) 7{ 8 if (item.no == todelete) 9 tmpitem = item; 10} 11infolist.Remove(tmpitem); ","date":"2021-06-01","img":"","permalink":"https://cornradio.github.io/hugo/posts/linkedlist%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%80%BC/","series":null,"tags":["csharp"],"title":"Linkedlist删除指定值"},{"categories":null,"content":"对实体类做标记 [DataContract] 标记在class前。\n[DataMember] 标记在需要保存的属性前。\n1 [DataContract] 2public class Car 3{ 4 [DataMember] 5 public string name; 6 7 [DataMember] 8 double power; 9 10 [DataMember] 11 List\u0026lt;Wheel\u0026gt; wheels; 12} 拷贝这两个函数 保存：保存文件到xml，文件目录和程序目录相同，文件名自定。\n读取：从指定文件名读取。\n1static void SaveViaDataContractSerialization\u0026lt;T\u0026gt;(T serializableObject, string filepath) 2{ 3 var serializer = new DataContractSerializer(typeof(T)); 4 var settings = new XmlWriterSettings() 5 { 6 Indent = true, 7 IndentChars = \u0026#34;\\t\u0026#34;, 8 }; 9 var writer = XmlWriter.Create(filepath, settings); 10 serializer.WriteObject(writer, serializableObject); 11 writer.Close(); 12} 13 14 15static T LoadViaDataContractSerialization\u0026lt;T\u0026gt;(string filepath) 16{ 17 var fileStream = new FileStream(filepath, FileMode.Open); 18 var reader = XmlDictionaryReader.CreateTextReader(fileStream, new XmlDictionaryReaderQuotas()); 19 var serializer = new DataContractSerializer(typeof(T)); 20 T serializableObject = (T)serializer.ReadObject(reader, true); 21 reader.Close(); 22 fileStream.Close(); 23 return serializableObject; 24} 读取方法 使用上面两个方法来读取和存储\n1// Save single object 2Car bmw = new Car(\u0026#34;BMW\u0026#34;, 200, new List\u0026lt;string\u0026gt; { \u0026#34;Left\u0026#34;, \u0026#34;Right\u0026#34; }); // create object 3SaveViaDataContractSerialization(bmw, \u0026#34;bmw.xml\u0026#34;); // save object 4bmw = null; // delete object 5bmw = LoadViaDataContractSerialization\u0026lt;Car\u0026gt;(\u0026#34;bmw.xml\u0026#34;); // reload object 6Console.WriteLine(bmw.ToString()); // print object 7 8 9// Save list of objects 10List\u0026lt;Car\u0026gt; carList = new List\u0026lt;Car\u0026gt; // create object list 11{ 12new Car(\u0026#34;Porsche\u0026#34;, 250, new List\u0026lt;string\u0026gt; { \u0026#34;Left\u0026#34; }), 13new Car(\u0026#34;Mercedes\u0026#34;, 150, new List\u0026lt;string\u0026gt; { \u0026#34;Front\u0026#34;, \u0026#34;Back\u0026#34; }), 14new Car(\u0026#34;Aston Martin\u0026#34;, 300, new List\u0026lt;string\u0026gt; { \u0026#34;Front\u0026#34; }) 15}; 16SaveViaDataContractSerialization(carList, \u0026#34;cars.xml\u0026#34;); // save object list 17carList = null; // delete object list 18carList = LoadViaDataContractSerialization\u0026lt;List\u0026lt;Car\u0026gt;\u0026gt;(\u0026#34;cars.xml\u0026#34;); // reload object list 19foreach (var a in carList) // print object list 20Console.WriteLine(a.ToString()); 21 22Console.ReadLine(); 原视频：https://www.youtube.com/watch?v=GzZu3eYDBmM demo代码：https://pastebin.com/mRTmdiK5 ","date":"2021-06-01","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E4%BF%9D%E5%AD%98%E4%BB%BB%E6%84%8Fobject%E5%88%B0%E6%96%87%E4%BB%B6/","series":null,"tags":["csharp"],"title":"保存object到xml"},{"categories":null,"content":"corntab 设置corntab任务，使用默认编辑器\n1corntab -e 设置默认编辑器\n1select-editor 设置任务，每天2：00执行\n10 2 * * * /home/saber/DDREPORT/ddrp.sh ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/corntab-%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/","series":null,"tags":["ubuntu","命令行"],"title":"Corntab计划任务"},{"categories":null,"content":" 剧情介绍 今天yr在我旁边弄新的hugo主题，我感觉他的新主题真的很清新，很不错，然后markdown记录之类的确实要比转化成html再放出来更加简单。不过可定制性没有那么好也是实话。\n这个博客对于语法高亮支持很不错。交互和动画就只能限制于模板（这个语法蛮怪的，可能以后会研究一个自己的模板）所以暂时决定把这个弄成技术类博客。\n我终于能把我的linux小知识都搬过来了！\n//简单说一下hugo的安装和使用：\npwershell安装hugo choco install hugo\n创建hugo工作目录 hugo new site mysite\n进入themes文件夹并且git pull自己用的主题 git clone https://github.com/panr/hugo-theme-terminal.git themes/terminal\n主题市场 terminal主题(我现在用的) 配置主题 配置主题需要根据不同的主题情况,各有不同，对于我这个主题来说我要把博客官方的 config.toml 粘贴到hugo项目中，并且进行了一点修改。遇到了一点坑，我在后面注释，你可以看一下。\ntoml文件：\n1baseurl = \u0026#34;\u0026#34; #这个要设为空，否则生成的东西css会找不到。 2languageCode = \u0026#34;en-us\u0026#34; 3theme = \u0026#34;terminal\u0026#34; 4# theme 原本github上提供的版本是 \u0026#34;hugo-theme-terminal\u0026#34;， 5# 但是会造成编译错误，故修改 6paginate = 5 7 8[params] 9 contentTypeName = \u0026#34;post\u0026#34; 10 themeColor = \u0026#34;red\u0026#34; #选择主题 11 showMenuItems = 2 12 #选择显示在顶部的导航链接数目，超出的会折叠。 13 #链接具体目录可以在下面修改 14 fullWidthTheme = false 15 centerTheme = false 16 17[languages] 18 [languages.en] 19 title = \u0026#34;KASUSA\u0026#34; 20 subtitle = \u0026#34;kasusa的技术博客\u0026#34; 21 keywords = \u0026#34;\u0026#34; 22 copyright = \u0026#34;\u0026#34; 23 menuMore = \u0026#34;展开\u0026#34; 24 readMore = \u0026#34;品读\u0026#34; 25 readOtherPosts = \u0026#34;看看别的文章 26 27 [languages.en.params.logo] 28 logoText = \u0026#34;KASUSA\u0026#34; 29 logoHomeLink = \u0026#34;/\u0026#34; 30 31 [languages.en.menu] #顶部栏条目们（不知道顺序是按照什么计算的） 32 [[languages.en.menu.main]] #一个顶部栏条目 33 identifier = \u0026#34;about\u0026#34; #id 34 name = \u0026#34;About_theme\u0026#34; #顶部条目显示为什么文字 35 url = \u0026#34;/about\u0026#34; #点击后进入什么目录 36 [[languages.en.menu.main]] 37 identifier = \u0026#34;showcase\u0026#34; 38 name = \u0026#34;Showcase\u0026#34; 39 url = \u0026#34;/showcase\u0026#34; 写博客 在 content - posts 内新建md文件，系统会用mdmd文件内容生成博客。\n对于md文件顶部的格式有着特殊的要求，这个也是因主体而异的，具体的话就要参考你的theme中archetypes文件夹内提供的模板了。我这个主题提供的模板如下：\n1+++ 2title = \u0026#34;hugo博客\u0026#34; 3date = \u0026#34;2021-05-29\u0026#34; 4author = \u0026#34;kasusa\u0026#34; 5cover = \u0026#34;https://tvax1.sinaimg.cn/...\u0026#34; 6tags = [\u0026#34;博客\u0026#34;, \u0026#34;hugo\u0026#34;] 7keywords = [\u0026#34;hugo2\u0026#34;, \u0026#34;\u0026#34;] 8description = \u0026#34;今天我建立了我的hugo博客\u0026#34; 9showFullContent = false 10+++ 我感觉他已经很明白了，但是我遇到了一个坑就是日期，我打成了2021-5-29在预览的时候就会显示成00-01-00，要注意日期格式必须相同哦！\n实时预览 hugo server -t terminal -p 51000\n-t是自定义主题，-p是自定义端口，开启成功之后他会根据你后台文件的变化不停的刷新，你可以在\nlocalhost:51000 实时的预览。\n编译生成HTML 在你的项目的目录输入命令（生成到指定目录）：\nhugo -d C:\\Users\\kasusa\\Documents\\GitHub\\kasusa.github.io\\hugo\n默认的话文件会生成在public文件夹。\n然后就把public文件夹的内容上传到github即可。以后也许会考虑 使用action自动编译 ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/hugo-newblog/","series":null,"tags":["博客","hugo"],"title":"Hugo博客"},{"categories":null,"content":" 安装proxychains sudo apt install proxychains4\n配置他的配置文件：sudo vim /etc/proxychains4.conf\n取消掉的注释 dynamic_chain\n将底部的网络协议和代理端口和ip改成你翻墙软件提供的:\n1socks5 127.0.0.1 1089 2http 127.0.0.1 8889 通过proxychains4 来在bash启动其他程序：proxychains4 \u0026lt;程序名\u0026gt;\nps：可以去 /.bashrc 给proxychains起一个别名，比较方便\n","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/youtube-proxychains%E6%80%BB%E7%BB%93/","series":null,"tags":["ubuntu","命令行"],"title":"Proxychains 使用教程"},{"categories":null,"content":"菜鸟shell教程 Shell 命令脚本 Shell 脚本文件的名称可以任意，建议将.sh 后缀加上，以表示是一个脚本文件。\n创建脚本：vim example.sh 写好脚本的内容（就是连串的shell语句） 执行脚本：（后面的是参数） bash example.sh sh example.sh ./example.sh （一般会有权限不足的报错，升权限就好了） 简单的脚本 1#!/bin/bash 2#For Example BY linuxprobe.com 3pwd 4ls -al 在上面的这个 example.sh 脚本中实际上出现了三种不同的元素：\n第一行的脚本声明（#!）用来告诉系统使用哪种 Shell 解释器来执行该脚本； 第二行的注释信息（#）是对脚本功能和某些命令的介绍信息，使得自己或他人在日后看到这个脚本内容时，可以快速知道该脚本的作用或一些警告信息； 第三、四行的可执行语句也就是我们平时执行的 Linux 命令了。 带参数的脚本-接收参数 如何运行带参数的脚本：\n1sh example.sh one two three four five six 脚本内容：\n1#!/bin/bash 2echo \u0026#34;当前脚本名称为$0\u0026#34; 3echo \u0026#34;总共有$#个参数，分别是$*。\u0026#34; 4echo \u0026#34;第 1 个参数为$1，第 5 个为$5。\u0026#34; ~ ~ $0 对应的是当前 Shell 脚本程序的名称， $# 对应的是总共有几个参数 $* 对应的是所有位置的参数值 $? 对应的是显示上一次命令的执行返回值 $1、$2、$3 则分别对应着第 N 个位置的参数值 带参数的脚本-判断用户的参数 运算符 作用 -d 测试文件是否为目录类型 -e 测试文件是否存在 -f 判断是否为一般文件 -r 测试当前用户是否有权限读取 -w 测试当前用户是否有权限写入 -x 测试当前用户是否有权限执行 \u0026mdash; 0代表存在，否则不存在 例子： 下面使用文件测试语句来判断/etc/fstab 是否为一个目录类型的文件，然后通过 Shell 解释器的内设$?变量显示上一条命令执行后的返回值。\n1root@KASUSA-cloud:~# [ -f mydir ] 2root@KASUSA-cloud:~# echo $? 31 \u0026amp;\u0026amp;符号,||符号 \u0026amp;\u0026amp;，它表示当前面的命令执行成功后才会执行它后面的命令\n判断目录是否存在：\n1[ -e mydir ] \u0026amp;\u0026amp; echo \u0026#34;Exist\u0026#34; 表示当前面的命令执行失败后才会执行它后面的命令，\n因此可以用来结合系统环境变量 USER 来判断当前登录的用户是否为非管理员身份：\n1[ $USER = root ] || echo \u0026#34;user\u0026#34; 一个复杂一点的判断用户的例子：\n1 [ ! $USER = root ] \u0026amp;\u0026amp; echo \u0026#34;user\u0026#34; || echo \u0026#34;root\u0026#34; 运算比较符 运算符 作用 -eq 是否等于 -ne 是否不等于 -gt 是否大于 -lt 是否小于 -le 是否等于或小于 -ge 是否大于或等于 流程控制语句 if 条件测试语句 for 条件循环语句 批量创建用户脚本： 创建 user.txt\n1vim users.txt 1andy 2barry 3carl 4duke 5eric 6george 创建脚本 Example.sh\n1 vim Example.sh 1#!/bin/bash 2read -p \u0026#34;Enter The Users Password : \u0026#34; PASSWD 3for UNAME in `cat users.txt` 4 do 5 id $UNAME \u0026amp;\u0026gt; /dev/null 6 if [ $? -eq 0 ] 7 then 8 echo \u0026#34;Already exists\u0026#34; 9 else 10 useradd $UNAME \u0026amp;\u0026gt; /dev/null 11 echo \u0026#34;$PASSWD\u0026#34; | passwd --stdin $UNAME \u0026amp;\u0026gt; /dev/null 12 if [ $? -eq 0 ] 13 then 14 echo \u0026#34;$UNAME , Create success\u0026#34; 15 else 16 echo \u0026#34;$UNAME , Create failure\u0026#34; 17 fi 18 fi 19done 需要多说一句，/dev/null 是一个被称作 Linux 黑洞的文件，把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁。\nwhile 条件循环语句 执行前并不确定最终执行的次数\n例子：\n1#!/bin/bash 2#在CASE变量小于等于20的时候一直运行 3CASE=0 #初始化变量 4echo \u0026#34;case = $CASE\u0026#34; #显示变量 5while [ $CASE -le 20 ] #while条件 6do #while开始 7CASE=`expr $CASE + 1` #相当于CASE++ 8echo \u0026#34;case = $CASE\u0026#34; #显示下CASE的值 9done #结束 ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/shell/","series":null,"tags":["ubuntu","命令行"],"title":"Shell"},{"categories":null,"content":" replace your source with tuna speed up apt-update : https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ this is for ubuntu , but igeuss it will working well on other linux machines too.\ndownload Qv2ray here: https://github.com/Qv2ray/Qv2ray/releases download v2ray-core here (linux-64 ver):https://github.com/v2ray/v2ray-core/releases before open Appimage file you should give it permission! : chmod 777 * set up subscribe follow this instruction :https://qv2ray.net/getting-started/step3.html#通过订阅地址导入 ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/linux-v2ray-setup/","series":null,"tags":["ubuntu","Qv2ray"],"title":"Ubuntu安装Qv2ray"},{"categories":null,"content":"ps：也可以通过内置的software \u0026amp; update来测试和更换中国源\n清华： https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/ 阿里： https://developer.aliyun.com/mirror/ubuntu ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E6%8D%A2%E6%BA%90/","series":null,"tags":["ubuntu","命令行"],"title":"Ubuntu换源"},{"categories":null,"content":"ubuntu 安装 java 最好的教程：https://docs.datastax.com/en/jdk-install/doc/jdk-install/installOracleJdkDeb.html\nsteps 去oracle下载你要的java\n1https://www.oracle.com/java/technologies/javase-downloads.html 1.1 一般来说你需要解压之后把文件放在 /usr/lib/jvm 这里是标准的java存放位置\n让系统知道你新装了 java 还有他的位置 (更改后半句的目录为你的java解压路径 最后面的是java config编号)\n1sudo update-alternatives --install \u0026#34;/usr/bin/java\u0026#34; \u0026#34;java\u0026#34; \u0026#34;/usr/lib/jvm/jdk-15.0.1/bin/java\u0026#34; 1 选择你的新java版本\n1sudo update-alternatives --config java 测试是否成功\n1java -version ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/ubuntu-install-java/","series":null,"tags":["ubuntu","命令行"],"title":"Ubuntu上安装java"},{"categories":null,"content":"vimtutor-ch 快速使用vim:\n跳转 行之间的跳转\n1[n] shift g #跳转到第n行 2gg #跳转到第一行 3shift g #跳转到最后一行 行内的跳转\n1~ #切换大小写 2w #到下一个单词头部 30 #到行头 4$ #到行尾 5f \u0026lt;字母\u0026gt; #搜索并跳转到下一个匹配字母 6F \u0026lt;字母\u0026gt; #搜索并跳转到上一个匹配字母 复制和粘贴 普通模式中使用y复制\n普通模式中，yy复制游标所在的整行（3yy表示复制3行） 普通模式中，y0 复制至行首。不含光标所在处字符。 普通模式中，y$ 复制至行尾。含光标所在处字符。 普通模式中，yw 复制一个单词。 普通模式中，y2w 复制两个单词。 普通模式中，yG 复制至文本末。 普通模式中，y1G 复制至文本开头。 普通模式中使用 p 粘贴\n普通模式中，p(小写)代表粘贴至光标后（下） 普通模式中，P(大写)代表粘贴至光标前（上） 剪切 使用 d\ndd 剪切一行 [n]dd 剪切n行 替换和撤销(Undo)命令 替换 c 删除并重写一个字母 C 删除并重写从[光标处到末尾]一个字母 cc 删除并重写一行 r 替换一个字母 R 连续的替换字母 撤销 u 一次撤销 U 撤销所有 重做 ctrl + r 重做 缩进 1\u0026lt;\u0026lt; #向左侧缩进 2\u0026gt;\u0026gt; #向右侧缩进 3:set shiftwidth=10 #设置缩进大小为10个空格 4 5:ce #中心对齐 6:le #左侧对齐 7:ri #右侧对齐 教程 我是在实验楼看到的这个系统自带的教程的. 感觉还不错的样子。\n第二讲小结 欲从当前光标删除至单字/单词末尾，请输入∶dw\n欲从当前光标删除至当前行末尾，请输入∶d$\n欲删除整行，请输入∶dd\n在正常模式下一个命令的格式是∶\n1 [number] command object 或者 command [number] object 2其意是∶ 3 number - 代表的是命令执行的次数 4 command - 代表要做的事情，比如 d 代表删除 5 object - 代表要操作的对象，比如 w 代表单字/单词，$ 代表到行末等等。 欲撤消以前的操作，请输入∶u (小写的u) 欲撤消在一行中所做的改动，请输入∶U (大写的U) 欲撤消以前的撤消命令，恢复以前的操作结果，请输入∶CTRL-R 第三讲小结 要重新置入已经删除的文本内容，请输入小写字母 p。该操作可以将已删除 的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置 于当前光标所在行的下一行。\n要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字 符即可。\n更改类命令允许您改变指定的对象，从当前光标所在位置直到对象的末尾。 比如输入 cw 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当 前光标到行末的内容。\n更改类命令的格式是∶\n1[number] c object 或者 c [number] object 下面我们继续学习下一讲。\n第四讲小结 Ctrl-g 用于显示当前光标所在位置和文件状态信息。Shift-G 用于将光标跳 转至文件最后一行。先敲入一个行号然后按 Shift-G 则是将光标移动至该行 号代表的行。\n输入 / 然后紧随一个字符串是则是在当前所编辑的文档中向后查找该字符串。 输入问号 ? 然后紧随一个字符串是则是在当前所编辑的文档中向前查找该字 符串。完成一次查找之后按 n 键则是重复上一次的命令，可在同一方向上查 找下一个字符串所在；或者按 Shift-N 向相反方向查找下该字符串所在。\n如果光标当前位置是括号(、)、[、]、{、}，按 % 可以将光标移动到配对的 括号上。\n在一行内替换头一个字符串 old 为新的字符串 new，请输入 :s/old/new 在一行内替换所有的字符串 old 为新的字符串 new，请输入 :s/old/new/g 在两行内替换所有的字符串 old 为新的字符串 new，请输入 :#,#s/old/new/g 在文件内替换所有的字符串 old 为新的字符串 new，请输入 :%s/old/new/g 进行全文替换时询问用户确认每个替换需添加 c 选项，请输入 :%s/old/new/gc 第五讲小结 :!command 用于执行一个外部命令 command。 请看一些实际例子∶ :!dir - 用于显示当前目录的内容。 :!rm FILENAME - 用于删除名为 FILENAME 的文件。\n:w FILENAME 可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文 件中。\n:#,#w FILENAME 可将当前编辑文件第 # 行至第 # 行的内容保存到文件 FILENAME 中。\n:r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置 后面。\n第六讲小结 输入小写的 o 可以在光标下方打开新的一行并将光标置于新开的行首，进入 插入模式。 输入大写的 O 可以在光标上方打开新的一行并将光标置于新开的行首，进入 插入模式。\n输入小写的 a 可以在光标所在位置之后插入文本。 输入大写的 A 可以在光标所在行的行末之后插入文本。\n输入大写的 R 将进入替换模式，直至按 键退出替换模式而进入正常 模式。\n输入 :set xxx 可以设置 xxx 选项。\n","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/vim/","series":null,"tags":["ubuntu","命令行"],"title":"Vim"},{"categories":null,"content":" zsh 有很多实用功能，下面安装和配置ohmyzsh的教程：\n安装zsh 1sudo apt install zsh 提前安装所需的字体 1sudo apt-get install fonts-powerline powerline-GitHub 抄国光的作业 1sh -c \u0026#34;$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)\u0026#34; .zshrc配置 打开配置文件 1code .zshrc 在.zshrc中加入下面这行( 去掉每行的 username@host ) 1export DEFAULT_USER=\u0026#34;$(whoami)\u0026#34; ubuntu terminal 配置 profiles-colors 配置主题颜色，要让主题够好看，对比色都强烈 profiles-command 吧zsh代替默认shell，这样每次打开terminal默认就是zsh了！ 常用快捷键： 按键 功能 备注 ctrl + - 缩小terminal ctrl+ shift + +` 放大terminal ","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/my-zsh/","series":null,"tags":["ubuntu","命令行"],"title":"安装zsh和配置主题"},{"categories":null,"content":"1、编辑 logind.conf 文件，命令如下\nsudo vim /etc/systemd/logind.conf\n2、把所有相关 HandleLidSwitch 的值都改成 ignore\n3、执行让修改的内容即时生效，输入命令：\nsystemctl restart systemd-logind\n(实时生效命令可能不能用，我这边ubuntu20.04使用了之后不停卡登录界面)\n","date":"2021-05-29","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E7%9B%92%E7%9B%96%E4%B8%8D%E5%85%B3%E6%9C%BA/","series":null,"tags":["ubuntu","命令行"],"title":"盒盖不关机"},{"categories":[],"content":"友链。 颜树人\nhttps://yantree.github.io/ （从不更新的死博客）\nLa Bibliothèque de Lumière\nhttps://ble-m.ltgc.cc/ （卢米埃尔图书馆）\nXeterium\nhttps://izfsk-ium.github.io/ （new！ 不知道会不会坚持写下去呢）\nTerrarum::异世界丨居正博客\nhttps://blog.skyju.cc/ ","date":"2020-11-09","img":"","permalink":"https://cornradio.github.io/hugo/posts/%E5%8F%8B%E9%93%BE/","series":["友链"],"tags":[],"title":"友情链接"}]